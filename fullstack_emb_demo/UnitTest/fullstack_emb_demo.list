
fullstack_emb_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08007e38  08007e38  00017e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008234  08008234  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800823c  0800823c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000264  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000438  20000438  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000107c3  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aa1  00000000  00000000  00030a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cc0  00000000  00000000  000334b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009e3  00000000  00000000  00034170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006821  00000000  00000000  00034b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000129e1  00000000  00000000  0003b374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd37d  00000000  00000000  0004dd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004614  00000000  00000000  0011b0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0011f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e20 	.word	0x08007e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007e20 	.word	0x08007e20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_ZN10RFID_RC522C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#include "RFID_RC522.hpp"

RFID_RC522::RFID_RC522(SPI_HandleTypeDef *hspi, GPIO_TypeDef* SS_GPIO_Port, uint16_t SS_Pin)
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	807b      	strh	r3, [r7, #2]
    : hspi(hspi), SS_GPIO_Port(SS_GPIO_Port), SS_Pin(SS_Pin) {}
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	887a      	ldrh	r2, [r7, #2]
 8000f62:	811a      	strh	r2, [r3, #8]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_ZN10RFID_RC5224initEv>:

void RFID_RC522::init() {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
    reset();
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f807 	bl	8000f8e <_ZN10RFID_RC5225resetEv>
    antennaOn();
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f87a 	bl	800107a <_ZN10RFID_RC5229antennaOnEv>
    // Further initialization as needed
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_ZN10RFID_RC5225resetEv>:

void RFID_RC522::reset() {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
    writeRegister(CommandReg, SoftResetCommand);
 8000f96:	220f      	movs	r2, #15
 8000f98:	2101      	movs	r1, #1
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f83e 	bl	800101c <_ZN10RFID_RC52213writeRegisterEhh>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_ZN10RFID_RC52212readRegisterEh>:

uint8_t RFID_RC522::readRegister(uint8_t addr) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6858      	ldr	r0, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	891b      	ldrh	r3, [r3, #8]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f001 faca 	bl	8002558 <HAL_GPIO_WritePin>
    uint8_t address = ((addr << 1) & 0x7E) | 0x80; // MSB 0 for writing, 1 for reading
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]
    uint8_t val = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_Transmit(hspi, &address, 1, HAL_MAX_DELAY);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f107 010f 	add.w	r1, r7, #15
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	2201      	movs	r2, #1
 8000fec:	f002 fef3 	bl	8003dd6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, &val, 1, HAL_MAX_DELAY);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	f107 010e 	add.w	r1, r7, #14
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f003 f82d 	bl	800405c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6858      	ldr	r0, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	891b      	ldrh	r3, [r3, #8]
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	f001 faa3 	bl	8002558 <HAL_GPIO_WritePin>
    return val;
 8001012:	7bbb      	ldrb	r3, [r7, #14]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_ZN10RFID_RC52213writeRegisterEhh>:

void RFID_RC522::writeRegister(uint8_t addr, uint8_t val) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
 8001028:	4613      	mov	r3, r2
 800102a:	70bb      	strb	r3, [r7, #2]
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2200      	movs	r2, #0
 8001036:	4619      	mov	r1, r3
 8001038:	f001 fa8e 	bl	8002558 <HAL_GPIO_WritePin>
    uint8_t address = (addr << 1) & 0x7E; // Address format for write
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001046:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {address, val};
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	733b      	strb	r3, [r7, #12]
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(hspi, data, 2, HAL_MAX_DELAY);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f107 010c 	add.w	r1, r7, #12
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	2202      	movs	r2, #2
 800105e:	f002 feba 	bl	8003dd6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6858      	ldr	r0, [r3, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	891b      	ldrh	r3, [r3, #8]
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	f001 fa73 	bl	8002558 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_ZN10RFID_RC5229antennaOnEv>:

void RFID_RC522::antennaOn() {
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
    uint8_t value = readRegister(TxControlReg);
 8001082:	2114      	movs	r1, #20
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff8f 	bl	8000fa8 <_ZN10RFID_RC52212readRegisterEh>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
    if (!(value & 0x03)) {
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <_ZN10RFID_RC5229antennaOnEv+0x28>
        setBitMask(TxControlReg, 0x03);
 8001098:	2203      	movs	r2, #3
 800109a:	2114      	movs	r1, #20
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f804 	bl	80010aa <_ZN10RFID_RC52210setBitMaskEhh>
    }
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_ZN10RFID_RC52210setBitMaskEhh>:

void RFID_RC522::setBitMask(uint8_t reg, uint8_t mask) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
 80010b6:	4613      	mov	r3, r2
 80010b8:	70bb      	strb	r3, [r7, #2]
    uint8_t tmp = readRegister(reg);
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff72 	bl	8000fa8 <_ZN10RFID_RC52212readRegisterEh>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]
    writeRegister(reg, tmp | mask);
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	78bb      	ldrb	r3, [r7, #2]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffa1 	bl	800101c <_ZN10RFID_RC52213writeRegisterEhh>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZN10RFID_RC52211checkForTagEv>:
void RFID_RC522::clearBitMask(uint8_t reg, uint8_t mask) {
    uint8_t tmp = readRegister(reg);
    writeRegister(reg, tmp & (~mask));
}

bool RFID_RC522::checkForTag() {
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
    // Example procedure to check for a tag
    return false; // Simplification for this example
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN10RFID_RC52213readTagSerialEv>:

std::array<uint8_t, 5> RFID_RC522::readTagSerial() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    std::array<uint8_t, 5> serialNumber = {0};
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <_ZN10RFID_RC52213readTagSerialEv+0x68>)
 8001106:	6810      	ldr	r0, [r2, #0]
 8001108:	6018      	str	r0, [r3, #0]
 800110a:	7912      	ldrb	r2, [r2, #4]
 800110c:	711a      	strb	r2, [r3, #4]

    uint8_t buffer[5] = {0}; // Buffer to store read data
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	2300      	movs	r3, #0
 8001114:	743b      	strb	r3, [r7, #16]

        // Read tag serial number from RFID module
        // This is just a placeholder, replace it with actual implementation
        // Example:
        if (checkForTag()) {
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f7ff ffe3 	bl	80010e2 <_ZN10RFID_RC52211checkForTagEv>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d018      	beq.n	8001154 <_ZN10RFID_RC52213readTagSerialEv+0x5c>
        //     // Read tag serial number
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <_ZN10RFID_RC52213readTagSerialEv+0x6c>)
 8001128:	f001 fa2f 	bl	800258a <HAL_GPIO_TogglePin>

        //     // Assume the tag serial number is stored in buffer
        for (size_t i = 0; i < 5; ++i) {
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00d      	b.n	800114e <_ZN10RFID_RC52213readTagSerialEv+0x56>
            serialNumber[i] = buffer[i];
 8001132:	6979      	ldr	r1, [r7, #20]
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f817 	bl	8001168 <_ZNSt5arrayIhLj5EEixEj>
 800113a:	4601      	mov	r1, r0
 800113c:	f107 020c 	add.w	r2, r7, #12
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	700b      	strb	r3, [r1, #0]
        for (size_t i = 0; i < 5; ++i) {
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d9ee      	bls.n	8001132 <_ZN10RFID_RC52213readTagSerialEv+0x3a>
        }
        }


    return serialNumber;
 8001154:	bf00      	nop
}
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	08007e38 	.word	0x08007e38
 8001164:	40020c00 	.word	0x40020c00

08001168 <_ZNSt5arrayIhLj5EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f805 	bl	8001186 <_ZNSt14__array_traitsIhLj5EE6_S_refERA5_Khj>
 800117c:	4603      	mov	r3, r0
      }
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_ZNSt14__array_traitsIhLj5EE6_S_refERA5_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_ZN17TemperatureSensorC1EP17I2C_HandleTypeDefP20__UART_HandleTypeDef>:
#include "TemperatureSensor.hpp"
#include <stdio.h> // For sprintf and snprintf
#include <string.h> // For strlen

TemperatureSensor::TemperatureSensor(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart)
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
    : hi2c(hi2c), huart(huart), numSensors(0) {
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	731a      	strb	r2, [r3, #12]
    // Constructor can also initialize the sensor if required
}
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <_ZN17TemperatureSensor14scanI2CDevicesEv>:

void TemperatureSensor::scanI2CDevices() {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b095      	sub	sp, #84	; 0x54
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    char buffer[64];
    numSensors = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	731a      	strb	r2, [r3, #12]
    for (uint8_t i = 0x48; i <= 0x4F; i++) {
 80011de:	2348      	movs	r3, #72	; 0x48
 80011e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80011e4:	e03f      	b.n	8001266 <_ZN17TemperatureSensor14scanI2CDevicesEv+0x96>
        if (HAL_I2C_IsDeviceReady(hi2c, (i << 1), 3, 100) == HAL_OK && numSensors < MAX_SENSORS) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b299      	uxth	r1, r3
 80011f4:	2364      	movs	r3, #100	; 0x64
 80011f6:	2203      	movs	r2, #3
 80011f8:	f001 fd58 	bl	8002cac <HAL_I2C_IsDeviceReady>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <_ZN17TemperatureSensor14scanI2CDevicesEv+0x3e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7b1b      	ldrb	r3, [r3, #12]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d801      	bhi.n	800120e <_ZN17TemperatureSensor14scanI2CDevicesEv+0x3e>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <_ZN17TemperatureSensor14scanI2CDevicesEv+0x40>
 800120e:	2300      	movs	r3, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <_ZN17TemperatureSensor14scanI2CDevicesEv+0x8c>
            sensorAddresses[numSensors++] = i;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7b1b      	ldrb	r3, [r3, #12]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	b2d1      	uxtb	r1, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	7311      	strb	r1, [r2, #12]
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800122a:	721a      	strb	r2, [r3, #8]
            sprintf(buffer, "Sensor found at address: 0x%X\r\n", i);
 800122c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4919      	ldr	r1, [pc, #100]	; (800129c <_ZN17TemperatureSensor14scanI2CDevicesEv+0xcc>)
 8001236:	4618      	mov	r0, r3
 8001238:	f004 fd36 	bl	8005ca8 <siprintf>
            HAL_UART_Transmit(huart, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685c      	ldr	r4, [r3, #4]
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f813 	bl	8000270 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	f107 0108 	add.w	r1, r7, #8
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	4620      	mov	r0, r4
 8001258:	f003 fb5a 	bl	8004910 <HAL_UART_Transmit>
    for (uint8_t i = 0x48; i <= 0x4F; i++) {
 800125c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001260:	3301      	adds	r3, #1
 8001262:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001266:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800126a:	2b4f      	cmp	r3, #79	; 0x4f
 800126c:	d9bb      	bls.n	80011e6 <_ZN17TemperatureSensor14scanI2CDevicesEv+0x16>
        }
    }
    // Initialize temperatures to 0.0
    for (int i = 0; i < MAX_SENSORS; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	64bb      	str	r3, [r7, #72]	; 0x48
 8001272:	e00a      	b.n	800128a <_ZN17TemperatureSensor14scanI2CDevicesEv+0xba>
        temperatures[i] = 0.0;
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001278:	3304      	adds	r3, #4
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_SENSORS; i++) {
 8001284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001286:	3301      	adds	r3, #1
 8001288:	64bb      	str	r3, [r7, #72]	; 0x48
 800128a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800128c:	2b03      	cmp	r3, #3
 800128e:	ddf1      	ble.n	8001274 <_ZN17TemperatureSensor14scanI2CDevicesEv+0xa4>
    }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3754      	adds	r7, #84	; 0x54
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	08007e40 	.word	0x08007e40

080012a0 <_ZN17TemperatureSensor18updateTemperaturesEv>:

void TemperatureSensor::updateTemperatures() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < numSensors; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e014      	b.n	80012d8 <_ZN17TemperatureSensor18updateTemperaturesEv+0x38>
        temperatures[i] = readLM75Temperature(sensorAddresses[i]);
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	3308      	adds	r3, #8
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f8e0 	bl	8001480 <_ZN17TemperatureSensor19readLM75TemperatureEh>
 80012c0:	eef0 7a40 	vmov.f32	s15, s0
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < numSensors; i++) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7b1b      	ldrb	r3, [r3, #12]
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	dbe4      	blt.n	80012ae <_ZN17TemperatureSensor18updateTemperaturesEv+0xe>
    }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <_ZN17TemperatureSensor21createTemperatureJSONEPcj>:
        snprintf(tempString, sizeof(tempString), "Temperature: %.2f°C\r\n", temperatures[i]);
        HAL_UART_Transmit(huart, (uint8_t*)tempString, strlen(tempString), HAL_MAX_DELAY);
    }
}

void TemperatureSensor::createTemperatureJSON(char* jsonOutput, size_t jsonSize) {
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b0cb      	sub	sp, #300	; 0x12c
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012fe:	6018      	str	r0, [r3, #0]
 8001300:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001304:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001308:	6019      	str	r1, [r3, #0]
 800130a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800130e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001312:	601a      	str	r2, [r3, #0]
    char buffer[256];
    size_t usedSize = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    usedSize += snprintf(jsonOutput + usedSize, jsonSize - usedSize, "[");
 800131a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800131e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001328:	18d0      	adds	r0, r2, r3
 800132a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800132e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <_ZN17TemperatureSensor21createTemperatureJSONEPcj+0x188>)
 800133c:	4619      	mov	r1, r3
 800133e:	f004 fc7f 	bl	8005c40 <sniprintf>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800134a:	4413      	add	r3, r2
 800134c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    for (int i = 0; i < numSensors; ++i) {
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001356:	e066      	b.n	8001426 <_ZN17TemperatureSensor21createTemperatureJSONEPcj+0x136>
        int len = snprintf(buffer, sizeof(buffer), "{\"address\":\"0x%X\",\"temperature\":%.2f}", sensorAddresses[i], temperatures[i]);
 8001358:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800135c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001366:	4413      	add	r3, r2
 8001368:	3308      	adds	r3, #8
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461c      	mov	r4, r3
 800136e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001372:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800137c:	3304      	adds	r3, #4
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8df 	bl	8000548 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	f107 0014 	add.w	r0, r7, #20
 8001392:	e9cd 2300 	strd	r2, r3, [sp]
 8001396:	4623      	mov	r3, r4
 8001398:	4a38      	ldr	r2, [pc, #224]	; (800147c <_ZN17TemperatureSensor21createTemperatureJSONEPcj+0x18c>)
 800139a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139e:	f004 fc4f 	bl	8005c40 <sniprintf>
 80013a2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
        if (usedSize + len < jsonSize - 1) {
 80013a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80013ae:	441a      	add	r2, r3
 80013b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	429a      	cmp	r2, r3
 80013be:	d23e      	bcs.n	800143e <_ZN17TemperatureSensor21createTemperatureJSONEPcj+0x14e>
            strncpy(jsonOutput + usedSize, buffer, len);
 80013c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80013ce:	4413      	add	r3, r2
 80013d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013d4:	f107 0114 	add.w	r1, r7, #20
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 fcd0 	bl	8005d7e <strncpy>
            usedSize += len;
 80013de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80013e6:	4413      	add	r3, r2
 80013e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            if (i < numSensors - 1) {
 80013ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7b1b      	ldrb	r3, [r3, #12]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013fe:	429a      	cmp	r2, r3
 8001400:	da0c      	bge.n	800141c <_ZN17TemperatureSensor21createTemperatureJSONEPcj+0x12c>
                jsonOutput[usedSize++] = ',';
 8001402:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800140c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001410:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	4413      	add	r3, r2
 8001418:	222c      	movs	r2, #44	; 0x2c
 800141a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < numSensors; ++i) {
 800141c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001420:	3301      	adds	r3, #1
 8001422:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001426:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800142a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	7b1b      	ldrb	r3, [r3, #12]
 8001432:	461a      	mov	r2, r3
 8001434:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001438:	4293      	cmp	r3, r2
 800143a:	db8d      	blt.n	8001358 <_ZN17TemperatureSensor21createTemperatureJSONEPcj+0x68>
 800143c:	e000      	b.n	8001440 <_ZN17TemperatureSensor21createTemperatureJSONEPcj+0x150>
            }
        } else {
            break;
 800143e:	bf00      	nop
        }
    }
    jsonOutput[usedSize++] = ']';
 8001440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800144a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800144e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	4413      	add	r3, r2
 8001456:	225d      	movs	r2, #93	; 0x5d
 8001458:	701a      	strb	r2, [r3, #0]
    jsonOutput[usedSize] = '\0';
 800145a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800145e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001468:	4413      	add	r3, r2
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	08007e78 	.word	0x08007e78
 800147c:	08007e7c 	.word	0x08007e7c

08001480 <_ZN17TemperatureSensor19readLM75TemperatureEh>:

float TemperatureSensor::readLM75Temperature(uint8_t sensorAddress) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
    uint8_t tempReg[2];
    float temperature = 0.0f;
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]

    if (HAL_I2C_Master_Receive(hi2c, (sensorAddress << 1), tempReg, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	b29b      	uxth	r3, r3
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	b299      	uxth	r1, r3
 800149e:	f107 0208 	add.w	r2, r7, #8
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2302      	movs	r3, #2
 80014aa:	f001 f9cd 	bl	8002848 <HAL_I2C_Master_Receive>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01b      	beq.n	80014f6 <_ZN17TemperatureSensor19readLM75TemperatureEh+0x76>
        int16_t temp = (int16_t)(tempReg[0] << 8 | tempReg[1]) >> 5;
 80014be:	7a3b      	ldrb	r3, [r7, #8]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	7a7b      	ldrb	r3, [r7, #9]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	115b      	asrs	r3, r3, #5
 80014ce:	817b      	strh	r3, [r7, #10]
        temperature = temp * 0.125;
 80014d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f825 	bl	8000524 <__aeabi_i2d>
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80014e2:	f7ff f889 	bl	80005f8 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb5b 	bl	8000ba8 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	60fb      	str	r3, [r7, #12]
    }
    return temperature;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	ee07 3a90 	vmov	s15, r3
}
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	4b91      	ldr	r3, [pc, #580]	; (8001768 <MX_GPIO_Init+0x260>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a90      	ldr	r2, [pc, #576]	; (8001768 <MX_GPIO_Init+0x260>)
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b8e      	ldr	r3, [pc, #568]	; (8001768 <MX_GPIO_Init+0x260>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <MX_GPIO_Init+0x260>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a89      	ldr	r2, [pc, #548]	; (8001768 <MX_GPIO_Init+0x260>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b87      	ldr	r3, [pc, #540]	; (8001768 <MX_GPIO_Init+0x260>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b83      	ldr	r3, [pc, #524]	; (8001768 <MX_GPIO_Init+0x260>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a82      	ldr	r2, [pc, #520]	; (8001768 <MX_GPIO_Init+0x260>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b80      	ldr	r3, [pc, #512]	; (8001768 <MX_GPIO_Init+0x260>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <MX_GPIO_Init+0x260>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a7b      	ldr	r2, [pc, #492]	; (8001768 <MX_GPIO_Init+0x260>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b79      	ldr	r3, [pc, #484]	; (8001768 <MX_GPIO_Init+0x260>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b75      	ldr	r3, [pc, #468]	; (8001768 <MX_GPIO_Init+0x260>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a74      	ldr	r2, [pc, #464]	; (8001768 <MX_GPIO_Init+0x260>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b72      	ldr	r3, [pc, #456]	; (8001768 <MX_GPIO_Init+0x260>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <MX_GPIO_Init+0x260>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a6d      	ldr	r2, [pc, #436]	; (8001768 <MX_GPIO_Init+0x260>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <MX_GPIO_Init+0x260>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2108      	movs	r1, #8
 80015ca:	4868      	ldr	r0, [pc, #416]	; (800176c <MX_GPIO_Init+0x264>)
 80015cc:	f000 ffc4 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2101      	movs	r1, #1
 80015d4:	4866      	ldr	r0, [pc, #408]	; (8001770 <MX_GPIO_Init+0x268>)
 80015d6:	f000 ffbf 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015da:	2200      	movs	r2, #0
 80015dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80015e0:	4864      	ldr	r0, [pc, #400]	; (8001774 <MX_GPIO_Init+0x26c>)
 80015e2:	f000 ffb9 	bl	8002558 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015e6:	2308      	movs	r3, #8
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	485b      	ldr	r0, [pc, #364]	; (800176c <MX_GPIO_Init+0x264>)
 80015fe:	f000 fe0f 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001602:	2301      	movs	r3, #1
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4855      	ldr	r0, [pc, #340]	; (8001770 <MX_GPIO_Init+0x268>)
 800161a:	f000 fe01 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800161e:	2308      	movs	r3, #8
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162e:	2305      	movs	r3, #5
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	484d      	ldr	r0, [pc, #308]	; (8001770 <MX_GPIO_Init+0x268>)
 800163a:	f000 fdf1 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800163e:	2301      	movs	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001642:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4849      	ldr	r0, [pc, #292]	; (8001778 <MX_GPIO_Init+0x270>)
 8001654:	f000 fde4 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001658:	2310      	movs	r3, #16
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001668:	2306      	movs	r3, #6
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4841      	ldr	r0, [pc, #260]	; (8001778 <MX_GPIO_Init+0x270>)
 8001674:	f000 fdd4 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001678:	2304      	movs	r3, #4
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	483c      	ldr	r0, [pc, #240]	; (800177c <MX_GPIO_Init+0x274>)
 800168c:	f000 fdc8 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a2:	2305      	movs	r3, #5
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4833      	ldr	r0, [pc, #204]	; (800177c <MX_GPIO_Init+0x274>)
 80016ae:	f000 fdb7 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80016b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	482a      	ldr	r0, [pc, #168]	; (8001774 <MX_GPIO_Init+0x26c>)
 80016cc:	f000 fda8 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80016d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e2:	2306      	movs	r3, #6
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4820      	ldr	r0, [pc, #128]	; (8001770 <MX_GPIO_Init+0x268>)
 80016ee:	f000 fd97 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80016f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	481c      	ldr	r0, [pc, #112]	; (8001778 <MX_GPIO_Init+0x270>)
 8001708:	f000 fd8a 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800170c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800171e:	230a      	movs	r3, #10
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 031c 	add.w	r3, r7, #28
 8001726:	4619      	mov	r1, r3
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_GPIO_Init+0x270>)
 800172a:	f000 fd79 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800172e:	2320      	movs	r3, #32
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_GPIO_Init+0x26c>)
 8001742:	f000 fd6d 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001746:	2302      	movs	r3, #2
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800174a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_GPIO_Init+0x264>)
 800175c:	f000 fd60 	bl	8002220 <HAL_GPIO_Init>

}
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40021000 	.word	0x40021000
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_I2C1_Init+0x54>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_I2C1_Init+0x50>)
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_I2C1_Init+0x58>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_I2C1_Init+0x50>)
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017be:	f000 feff 	bl	80025c0 <HAL_I2C_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f000 f95a 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200001f0 	.word	0x200001f0
 80017d4:	40005400 	.word	0x40005400
 80017d8:	000186a0 	.word	0x000186a0

080017dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_I2C_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12c      	bne.n	8001858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800181a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001820:	2312      	movs	r3, #18
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001824:	2301      	movs	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182c:	2304      	movs	r3, #4
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <HAL_I2C_MspInit+0x8c>)
 8001838:	f000 fcf2 	bl	8002220 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_I2C_MspInit+0x88>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40005400 	.word	0x40005400
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <main>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
extern SPI_HandleTypeDef hspiX;


int main() {
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8001872:	af00      	add	r7, sp, #0
    HAL_Init();
 8001874:	f000 fb58 	bl	8001f28 <HAL_Init>
    SystemClock_Config();
 8001878:	f000 f88e 	bl	8001998 <_Z18SystemClock_Configv>
    MX_GPIO_Init();
 800187c:	f7ff fe44 	bl	8001508 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001880:	f7ff ff7e 	bl	8001780 <MX_I2C1_Init>
    MX_SPI1_Init();
 8001884:	f000 f90c 	bl	8001aa0 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 8001888:	f000 fab2 	bl	8001df0 <MX_USART2_UART_Init>

    RFID_RC522 rfid(&hspi1, GPIOA, GPIO_PIN_10);
 800188c:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8001890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001894:	4a3b      	ldr	r2, [pc, #236]	; (8001984 <main+0x118>)
 8001896:	493c      	ldr	r1, [pc, #240]	; (8001988 <main+0x11c>)
 8001898:	f7ff fb54 	bl	8000f44 <_ZN10RFID_RC522C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
    rfid.init();
 800189c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb66 	bl	8000f72 <_ZN10RFID_RC5224initEv>

	char hexStr[11]; // Each byte to 2 hex characters + space or end ('\0')


    TemperatureSensor sensor(&hi2c1, &huart2);
 80018a6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80018aa:	4a38      	ldr	r2, [pc, #224]	; (800198c <main+0x120>)
 80018ac:	4938      	ldr	r1, [pc, #224]	; (8001990 <main+0x124>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc77 	bl	80011a2 <_ZN17TemperatureSensorC1EP17I2C_HandleTypeDefP20__UART_HandleTypeDef>
    sensor.scanI2CDevices();
 80018b4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc89 	bl	80011d0 <_ZN17TemperatureSensor14scanI2CDevicesEv>

    // Assuming readTagSerial() returns std::array<uint8_t, 5>
    auto serialNumber = rfid.readTagSerial();
 80018be:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80018c2:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fc15 	bl	80010f8 <_ZN10RFID_RC52213readTagSerialEv>

    for(size_t i = 0; i < serialNumber.size(); ++i) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80018d4:	e018      	b.n	8001908 <main+0x9c>
        sprintf(&hexStr[i * 2], "%02X", serialNumber[i]);
 80018d6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80018e0:	18d4      	adds	r4, r2, r3
 80018e2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80018e6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fc3c 	bl	8001168 <_ZNSt5arrayIhLj5EEixEj>
 80018f0:	4603      	mov	r3, r0
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4927      	ldr	r1, [pc, #156]	; (8001994 <main+0x128>)
 80018f8:	4620      	mov	r0, r4
 80018fa:	f004 f9d5 	bl	8005ca8 <siprintf>
    for(size_t i = 0; i < serialNumber.size(); ++i) {
 80018fe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001902:	3301      	adds	r3, #1
 8001904:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8001908:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f8bc 	bl	8001a8a <_ZNKSt5arrayIhLj5EE4sizeEv>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001918:	4293      	cmp	r3, r2
 800191a:	bf34      	ite	cc
 800191c:	2301      	movcc	r3, #1
 800191e:	2300      	movcs	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1d7      	bne.n	80018d6 <main+0x6a>
    }
    hexStr[10] = '\0'; // Ensure null termination
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236

    // Now use serialNumber in a way that affects the program
    HAL_UART_Transmit(&huart2, (uint8_t*)hexStr, strlen(hexStr), HAL_MAX_DELAY);
 800192c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fc9d 	bl	8000270 <strlen>
 8001936:	4603      	mov	r3, r0
 8001938:	b29a      	uxth	r2, r3
 800193a:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	4812      	ldr	r0, [pc, #72]	; (800198c <main+0x120>)
 8001944:	f002 ffe4 	bl	8004910 <HAL_UART_Transmit>

        // Now use serialNumber in a way that affects the program
        HAL_UART_Transmit(&huart2, (uint8_t*)hexStr, strlen(hexStr), HAL_MAX_DELAY);
*/

        sensor.updateTemperatures();
 8001948:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fca7 	bl	80012a0 <_ZN17TemperatureSensor18updateTemperaturesEv>
        char jsonOutput[512];
        sensor.createTemperatureJSON(jsonOutput, sizeof(jsonOutput));
 8001952:	1d39      	adds	r1, r7, #4
 8001954:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fcc7 	bl	80012f0 <_ZN17TemperatureSensor21createTemperatureJSONEPcj>
        HAL_UART_Transmit(&huart2, (uint8_t*)jsonOutput, strlen(jsonOutput), HAL_MAX_DELAY);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fc83 	bl	8000270 <strlen>
 800196a:	4603      	mov	r3, r0
 800196c:	b29a      	uxth	r2, r3
 800196e:	1d39      	adds	r1, r7, #4
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <main+0x120>)
 8001976:	f002 ffcb 	bl	8004910 <HAL_UART_Transmit>
        HAL_Delay(5000);
 800197a:	f241 3088 	movw	r0, #5000	; 0x1388
 800197e:	f000 fb45 	bl	800200c <HAL_Delay>
    }
 8001982:	e7e1      	b.n	8001948 <main+0xdc>
 8001984:	40020000 	.word	0x40020000
 8001988:	20000244 	.word	0x20000244
 800198c:	200002a0 	.word	0x200002a0
 8001990:	200001f0 	.word	0x200001f0
 8001994:	08007ea4 	.word	0x08007ea4

08001998 <_Z18SystemClock_Configv>:

}


void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	; 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2230      	movs	r2, #48	; 0x30
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 f9e1 	bl	8005d6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <_Z18SystemClock_Configv+0xe0>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <_Z18SystemClock_Configv+0xe0>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6413      	str	r3, [r2, #64]	; 0x40
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <_Z18SystemClock_Configv+0xe0>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <_Z18SystemClock_Configv+0xe4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <_Z18SystemClock_Configv+0xe4>)
 80019e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <_Z18SystemClock_Configv+0xe4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fe:	2302      	movs	r3, #2
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a16:	2307      	movs	r3, #7
 8001a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1a:	f107 0320 	add.w	r3, r7, #32
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fcb8 	bl	8003394 <HAL_RCC_OscConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8001a34:	f000 f824 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a38:	230f      	movs	r3, #15
 8001a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2105      	movs	r1, #5
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 ff14 	bl	8003884 <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001a6c:	f000 f808 	bl	8001a80 <Error_Handler>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3750      	adds	r7, #80	; 0x50
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40007000 	.word	0x40007000

08001a80 <Error_Handler>:

void Error_Handler(void) {
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
    // User can add his own implementation to report the HAL error return state
    __disable_irq();
    while (1) {
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>

08001a8a <_ZNKSt5arrayIhLj5EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	2305      	movs	r3, #5
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aa6:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <MX_SPI1_Init+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001aec:	220a      	movs	r2, #10
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_SPI1_Init+0x64>)
 8001af2:	f002 f8e7 	bl	8003cc4 <HAL_SPI_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001afc:	f7ff ffc0 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000244 	.word	0x20000244
 8001b08:	40013000 	.word	0x40013000

08001b0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_SPI_MspInit+0x84>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12b      	bne.n	8001b86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_SPI_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b66:	23e0      	movs	r3, #224	; 0xe0
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b76:	2305      	movs	r3, #5
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_SPI_MspInit+0x8c>)
 8001b82:	f000 fb4d 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40013000 	.word	0x40013000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bda:	2007      	movs	r0, #7
 8001bdc:	f000 faec 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 f9c8 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_kill>:

int _kill(int pid, int sig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c5a:	f004 f8fd 	bl	8005e58 <__errno>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2216      	movs	r2, #22
 8001c62:	601a      	str	r2, [r3, #0]
  return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_exit>:

void _exit (int status)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ffe7 	bl	8001c50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c82:	e7fe      	b.n	8001c82 <_exit+0x12>

08001c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
  }

  return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf1      	blt.n	8001cd0 <_write+0x12>
  }
  return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_close>:

int _close(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_isatty>:

int _isatty(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f004 f862 	bl	8005e58 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20020000 	.word	0x20020000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	2000029c 	.word	0x2000029c
 8001dc8:	20000438 	.word	0x20000438

08001dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <SystemInit+0x20>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <SystemInit+0x20>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_USART2_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e28:	f002 fd22 	bl	8004870 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f7ff fe25 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200002a0 	.word	0x200002a0
 8001e40:	40004400 	.word	0x40004400

08001e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_UART_MspInit+0x84>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12b      	bne.n	8001ebe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_UART_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_UART_MspInit+0x8c>)
 8001eba:	f000 f9b1 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ed8:	f7ff ff78 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f003 ffaf 	bl	8005e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f06:	f7ff fcb1 	bl	800186c <main>
  bx  lr    
 8001f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f18:	08008244 	.word	0x08008244
  ldr r2, =_sbss
 8001f1c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f20:	20000438 	.word	0x20000438

08001f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_Init+0x40>)
 8001f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_Init+0x40>)
 8001f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_Init+0x40>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f931 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fe1e 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f93b 	bl	8002206 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f911 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	200002e8 	.word	0x200002e8

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200002e8 	.word	0x200002e8

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff ffee 	bl	8001ff4 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff47 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff5c 	bl	800209c <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffb0 	bl	8002174 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e16b      	b.n	8002514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 815a 	bne.w	800250e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80b4 	beq.w	800250e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b60      	ldr	r3, [pc, #384]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_GPIO_Init+0x310>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x314>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02b      	beq.n	8002446 <HAL_GPIO_Init+0x226>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x318>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x222>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x31c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x21e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x324>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x328>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_GPIO_Init+0x32c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_GPIO_Init+0x330>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x20a>
 8002426:	2307      	movs	r3, #7
 8002428:	e00e      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242a:	2308      	movs	r3, #8
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242e:	2306      	movs	r3, #6
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002446:	2300      	movs	r3, #0
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002458:	4935      	ldr	r1, [pc, #212]	; (8002530 <HAL_GPIO_Init+0x310>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248a:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_GPIO_Init+0x334>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_GPIO_Init+0x334>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	f67f ae90 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002574:	e003      	b.n	800257e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	041a      	lsls	r2, r3, #16
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	400b      	ands	r3, r1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e12b      	b.n	800282a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff f8f8 	bl	80017dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002624:	f001 fb26 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8002628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a81      	ldr	r2, [pc, #516]	; (8002834 <HAL_I2C_Init+0x274>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d807      	bhi.n	8002644 <HAL_I2C_Init+0x84>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a80      	ldr	r2, [pc, #512]	; (8002838 <HAL_I2C_Init+0x278>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e006      	b.n	8002652 <HAL_I2C_Init+0x92>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a7d      	ldr	r2, [pc, #500]	; (800283c <HAL_I2C_Init+0x27c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0e7      	b.n	800282a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4a78      	ldr	r2, [pc, #480]	; (8002840 <HAL_I2C_Init+0x280>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a6a      	ldr	r2, [pc, #424]	; (8002834 <HAL_I2C_Init+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d802      	bhi.n	8002694 <HAL_I2C_Init+0xd4>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3301      	adds	r3, #1
 8002692:	e009      	b.n	80026a8 <HAL_I2C_Init+0xe8>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a69      	ldr	r2, [pc, #420]	; (8002844 <HAL_I2C_Init+0x284>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	3301      	adds	r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	495c      	ldr	r1, [pc, #368]	; (8002834 <HAL_I2C_Init+0x274>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d819      	bhi.n	80026fc <HAL_I2C_Init+0x13c>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e59      	subs	r1, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026dc:	400b      	ands	r3, r1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_I2C_Init+0x138>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e59      	subs	r1, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f6:	e051      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e04f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <HAL_I2C_Init+0x168>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e012      	b.n	800274e <HAL_I2C_Init+0x18e>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	0099      	lsls	r1, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Init+0x196>
 8002752:	2301      	movs	r3, #1
 8002754:	e022      	b.n	800279c <HAL_I2C_Init+0x1dc>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10e      	bne.n	800277c <HAL_I2C_Init+0x1bc>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e58      	subs	r0, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	440b      	add	r3, r1
 800276c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277a:	e00f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e58      	subs	r0, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	0099      	lsls	r1, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	6809      	ldr	r1, [r1, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6911      	ldr	r1, [r2, #16]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68d2      	ldr	r2, [r2, #12]
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	000186a0 	.word	0x000186a0
 8002838:	001e847f 	.word	0x001e847f
 800283c:	003d08ff 	.word	0x003d08ff
 8002840:	431bde83 	.word	0x431bde83
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
 8002858:	4613      	mov	r3, r2
 800285a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff fbca 	bl	8001ff4 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 8217 	bne.w	8002c9e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2319      	movs	r3, #25
 8002876:	2201      	movs	r2, #1
 8002878:	497c      	ldr	r1, [pc, #496]	; (8002a6c <HAL_I2C_Master_Receive+0x224>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fc12 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	e20a      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_I2C_Master_Receive+0x50>
 8002894:	2302      	movs	r3, #2
 8002896:	e203      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d007      	beq.n	80028be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2222      	movs	r2, #34	; 0x22
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2210      	movs	r2, #16
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	893a      	ldrh	r2, [r7, #8]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a5c      	ldr	r2, [pc, #368]	; (8002a70 <HAL_I2C_Master_Receive+0x228>)
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002900:	8979      	ldrh	r1, [r7, #10]
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fafe 	bl	8002f08 <I2C_MasterRequestRead>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e1c4      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d113      	bne.n	8002946 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e198      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11b      	bne.n	8002986 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e178      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	2b02      	cmp	r3, #2
 800298c:	d11b      	bne.n	80029c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	e158      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029ec:	e144      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f200 80f1 	bhi.w	8002bda <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d123      	bne.n	8002a48 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fc67 	bl	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e145      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a46:	e117      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d14e      	bne.n	8002aee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	2200      	movs	r2, #0
 8002a58:	4906      	ldr	r1, [pc, #24]	; (8002a74 <HAL_I2C_Master_Receive+0x22c>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fb22 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e11a      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000
 8002a74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aec:	e0c4      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2200      	movs	r2, #0
 8002af6:	496c      	ldr	r1, [pc, #432]	; (8002ca8 <HAL_I2C_Master_Receive+0x460>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fad3 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cb      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2200      	movs	r2, #0
 8002b52:	4955      	ldr	r1, [pc, #340]	; (8002ca8 <HAL_I2C_Master_Receive+0x460>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 faa5 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e09d      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd8:	e04e      	b.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fb7a 	bl	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e058      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d124      	bne.n	8002c78 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d107      	bne.n	8002c46 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c44:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f aeb6 	bne.w	80029ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	00010004 	.word	0x00010004

08002cac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff f99a 	bl	8001ff4 <HAL_GetTick>
 8002cc0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 8111 	bne.w	8002ef6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4988      	ldr	r1, [pc, #544]	; (8002f00 <HAL_I2C_IsDeviceReady+0x254>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f9e0 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e104      	b.n	8002ef8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_IsDeviceReady+0x50>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0fd      	b.n	8002ef8 <HAL_I2C_IsDeviceReady+0x24c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2224      	movs	r2, #36	; 0x24
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a70      	ldr	r2, [pc, #448]	; (8002f04 <HAL_I2C_IsDeviceReady+0x258>)
 8002d44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f99e 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7c:	d103      	bne.n	8002d86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0b6      	b.n	8002ef8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d8a:	897b      	ldrh	r3, [r7, #10]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f92b 	bl	8001ff4 <HAL_GetTick>
 8002d9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dce:	e025      	b.n	8002e1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7ff f910 	bl	8001ff4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <HAL_I2C_IsDeviceReady+0x13a>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	22a0      	movs	r2, #160	; 0xa0
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2ba0      	cmp	r3, #160	; 0xa0
 8002e26:	d005      	beq.n	8002e34 <HAL_I2C_IsDeviceReady+0x188>
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <HAL_I2C_IsDeviceReady+0x188>
 8002e2e:	7dbb      	ldrb	r3, [r7, #22]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0cd      	beq.n	8002dd0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d129      	bne.n	8002e9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	2319      	movs	r3, #25
 8002e76:	2201      	movs	r2, #1
 8002e78:	4921      	ldr	r1, [pc, #132]	; (8002f00 <HAL_I2C_IsDeviceReady+0x254>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f912 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e036      	b.n	8002ef8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e02c      	b.n	8002ef8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2319      	movs	r3, #25
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	490f      	ldr	r1, [pc, #60]	; (8002f00 <HAL_I2C_IsDeviceReady+0x254>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8ee 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e012      	b.n	8002ef8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f4ff af32 	bcc.w	8002d46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
  }
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	00100002 	.word	0x00100002
 8002f04:	ffff0000 	.word	0xffff0000

08002f08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	460b      	mov	r3, r1
 8002f16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d006      	beq.n	8002f42 <I2C_MasterRequestRead+0x3a>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d003      	beq.n	8002f42 <I2C_MasterRequestRead+0x3a>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f40:	d108      	bne.n	8002f54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e00b      	b.n	8002f6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	2b11      	cmp	r3, #17
 8002f5a:	d107      	bne.n	8002f6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f893 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f92:	d103      	bne.n	8002f9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e079      	b.n	8003094 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa8:	d108      	bne.n	8002fbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	e05f      	b.n	800307c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fbc:	897b      	ldrh	r3, [r7, #10]
 8002fbe:	11db      	asrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 0306 	and.w	r3, r3, #6
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f063 030f 	orn	r3, r3, #15
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4930      	ldr	r1, [pc, #192]	; (800309c <I2C_MasterRequestRead+0x194>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f8dc 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e054      	b.n	8003094 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4929      	ldr	r1, [pc, #164]	; (80030a0 <I2C_MasterRequestRead+0x198>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f8cc 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e044      	b.n	8003094 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800302e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f831 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003056:	d103      	bne.n	8003060 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e017      	b.n	8003094 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003064:	897b      	ldrh	r3, [r7, #10]
 8003066:	11db      	asrs	r3, r3, #7
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 0306 	and.w	r3, r3, #6
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f063 030e 	orn	r3, r3, #14
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4907      	ldr	r1, [pc, #28]	; (80030a0 <I2C_MasterRequestRead+0x198>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f888 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	00010008 	.word	0x00010008
 80030a0:	00010002 	.word	0x00010002

080030a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b4:	e048      	b.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d044      	beq.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe ff99 	bl	8001ff4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d139      	bne.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10d      	bne.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	e00c      	b.n	8003114 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	429a      	cmp	r2, r3
 8003118:	d116      	bne.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e023      	b.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10d      	bne.n	800316e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	e00c      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	43da      	mvns	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	429a      	cmp	r2, r3
 800318c:	d093      	beq.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a6:	e071      	b.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d123      	bne.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e067      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d041      	beq.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003208:	f7fe fef4 	bl	8001ff4 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d136      	bne.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e00b      	b.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e021      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10c      	bne.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	43da      	mvns	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e00b      	b.n	80032c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f af6d 	bne.w	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e4:	e049      	b.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d119      	bne.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0210 	mvn.w	r2, #16
 80032fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e030      	b.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe fe64 	bl	8001ff4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11d      	bne.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d016      	beq.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d1ae      	bne.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e267      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d075      	beq.n	800349e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b2:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d00c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033be:	4b85      	ldr	r3, [pc, #532]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d112      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ca:	4b82      	ldr	r3, [pc, #520]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	4b7e      	ldr	r3, [pc, #504]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05b      	beq.n	800349c <HAL_RCC_OscConfig+0x108>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d157      	bne.n	800349c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e242      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x74>
 80033fa:	4b76      	ldr	r3, [pc, #472]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a75      	ldr	r2, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e01d      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x98>
 8003412:	4b70      	ldr	r3, [pc, #448]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6f      	ldr	r2, [pc, #444]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b6d      	ldr	r3, [pc, #436]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6c      	ldr	r2, [pc, #432]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 800342c:	4b69      	ldr	r3, [pc, #420]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a68      	ldr	r2, [pc, #416]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b66      	ldr	r3, [pc, #408]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a65      	ldr	r2, [pc, #404]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fdd2 	bl	8001ff4 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003454:	f7fe fdce 	bl	8001ff4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e207      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b5b      	ldr	r3, [pc, #364]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0xc0>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe fdbe 	bl	8001ff4 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347c:	f7fe fdba 	bl	8001ff4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e1f3      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	4b51      	ldr	r3, [pc, #324]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0xe8>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d063      	beq.n	8003572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034aa:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x152>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1c7      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4937      	ldr	r1, [pc, #220]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	e03a      	b.n	8003572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <HAL_RCC_OscConfig+0x244>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe fd73 	bl	8001ff4 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe fd6f 	bl	8001ff4 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1a8      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4925      	ldr	r1, [pc, #148]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
 8003544:	e015      	b.n	8003572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCC_OscConfig+0x244>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fd52 	bl	8001ff4 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe fd4e 	bl	8001ff4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e187      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d036      	beq.n	80035ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_RCC_OscConfig+0x248>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe fd32 	bl	8001ff4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe fd2e 	bl	8001ff4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e167      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_OscConfig+0x240>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x200>
 80035b2:	e01b      	b.n	80035ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_OscConfig+0x248>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fd1b 	bl	8001ff4 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	e00e      	b.n	80035e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fe fd17 	bl	8001ff4 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d907      	bls.n	80035e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e150      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
 80035d4:	40023800 	.word	0x40023800
 80035d8:	42470000 	.word	0x42470000
 80035dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ea      	bne.n	80035c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8097 	beq.w	8003728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b81      	ldr	r3, [pc, #516]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	4b7d      	ldr	r3, [pc, #500]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	4a7c      	ldr	r2, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	; 0x40
 800361a:	4b7a      	ldr	r3, [pc, #488]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b77      	ldr	r3, [pc, #476]	; (8003808 <HAL_RCC_OscConfig+0x474>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d118      	bne.n	8003668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003636:	4b74      	ldr	r3, [pc, #464]	; (8003808 <HAL_RCC_OscConfig+0x474>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a73      	ldr	r2, [pc, #460]	; (8003808 <HAL_RCC_OscConfig+0x474>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003642:	f7fe fcd7 	bl	8001ff4 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fe fcd3 	bl	8001ff4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e10c      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <HAL_RCC_OscConfig+0x474>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x2ea>
 8003670:	4b64      	ldr	r3, [pc, #400]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a63      	ldr	r2, [pc, #396]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
 800367c:	e01c      	b.n	80036b8 <HAL_RCC_OscConfig+0x324>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b05      	cmp	r3, #5
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x30c>
 8003686:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	6713      	str	r3, [r2, #112]	; 0x70
 8003692:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a5b      	ldr	r2, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0x324>
 80036a0:	4b58      	ldr	r3, [pc, #352]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a57      	ldr	r2, [pc, #348]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	4b55      	ldr	r3, [pc, #340]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a54      	ldr	r2, [pc, #336]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f023 0304 	bic.w	r3, r3, #4
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe fc98 	bl	8001ff4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fc94 	bl	8001ff4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0cb      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	4b49      	ldr	r3, [pc, #292]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ee      	beq.n	80036c8 <HAL_RCC_OscConfig+0x334>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ec:	f7fe fc82 	bl	8001ff4 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fe fc7e 	bl	8001ff4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0b5      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	4b3e      	ldr	r3, [pc, #248]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ee      	bne.n	80036f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4b39      	ldr	r3, [pc, #228]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	4a38      	ldr	r2, [pc, #224]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003726:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a1 	beq.w	8003874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003732:	4b34      	ldr	r3, [pc, #208]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b08      	cmp	r3, #8
 800373c:	d05c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d141      	bne.n	80037ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_OscConfig+0x478>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe fc52 	bl	8001ff4 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe fc4e 	bl	8001ff4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e087      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	4b27      	ldr	r3, [pc, #156]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	3b01      	subs	r3, #1
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	491b      	ldr	r1, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x478>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fe fc27 	bl	8001ff4 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fe fc23 	bl	8001ff4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e05c      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x416>
 80037c8:	e054      	b.n	8003874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x478>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe fc10 	bl	8001ff4 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe fc0c 	bl	8001ff4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e045      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x470>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x444>
 80037f6:	e03d      	b.n	8003874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e038      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
 8003804:	40023800 	.word	0x40023800
 8003808:	40007000 	.word	0x40007000
 800380c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <HAL_RCC_OscConfig+0x4ec>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d028      	beq.n	8003870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d121      	bne.n	8003870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d11a      	bne.n	8003870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003840:	4013      	ands	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003848:	4293      	cmp	r3, r2
 800384a:	d111      	bne.n	8003870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	3b01      	subs	r3, #1
 800385a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0cc      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d90c      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b65      	ldr	r3, [pc, #404]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d8:	4b59      	ldr	r3, [pc, #356]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a58      	ldr	r2, [pc, #352]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f0:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	494d      	ldr	r1, [pc, #308]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d044      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d119      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b3b      	ldr	r3, [pc, #236]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e067      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4934      	ldr	r1, [pc, #208]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003974:	f7fe fb3e 	bl	8001ff4 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	e00a      	b.n	8003992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7fe fb3a 	bl	8001ff4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 020c 	and.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1eb      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20c      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4916      	ldr	r1, [pc, #88]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	490e      	ldr	r1, [pc, #56]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0a:	f000 f821 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	490a      	ldr	r1, [pc, #40]	; (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	5ccb      	ldrb	r3, [r1, r3]
 8003a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fa9e 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08007eac 	.word	0x08007eac
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000004 	.word	0x20000004

08003a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a54:	b094      	sub	sp, #80	; 0x50
 8003a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a60:	2300      	movs	r3, #0
 8003a62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a68:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d00d      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x40>
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	f200 80e1 	bhi.w	8003c3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x34>
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a82:	e0db      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a84:	4b73      	ldr	r3, [pc, #460]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a88:	e0db      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a8a:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a8e:	e0d8      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a90:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d063      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	099b      	lsrs	r3, r3, #6
 8003aac:	2200      	movs	r2, #0
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aba:	2300      	movs	r3, #0
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
 8003abe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	f04f 0000 	mov.w	r0, #0
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	0159      	lsls	r1, r3, #5
 8003ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad4:	0150      	lsls	r0, r2, #5
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4621      	mov	r1, r4
 8003adc:	1a51      	subs	r1, r2, r1
 8003ade:	6139      	str	r1, [r7, #16]
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af4:	4659      	mov	r1, fp
 8003af6:	018b      	lsls	r3, r1, #6
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afe:	4651      	mov	r1, sl
 8003b00:	018a      	lsls	r2, r1, #6
 8003b02:	4651      	mov	r1, sl
 8003b04:	ebb2 0801 	subs.w	r8, r2, r1
 8003b08:	4659      	mov	r1, fp
 8003b0a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b22:	4690      	mov	r8, r2
 8003b24:	4699      	mov	r9, r3
 8003b26:	4623      	mov	r3, r4
 8003b28:	eb18 0303 	adds.w	r3, r8, r3
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	462b      	mov	r3, r5
 8003b30:	eb49 0303 	adc.w	r3, r9, r3
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b42:	4629      	mov	r1, r5
 8003b44:	024b      	lsls	r3, r1, #9
 8003b46:	4621      	mov	r1, r4
 8003b48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	024a      	lsls	r2, r1, #9
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b56:	2200      	movs	r2, #0
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b60:	f7fd f872 	bl	8000c48 <__aeabi_uldivmod>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	e058      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6e:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	099b      	lsrs	r3, r3, #6
 8003b74:	2200      	movs	r2, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	4611      	mov	r1, r2
 8003b7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	f04f 0000 	mov.w	r0, #0
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	0159      	lsls	r1, r3, #5
 8003b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9a:	0150      	lsls	r0, r2, #5
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bc0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bc4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	00eb      	lsls	r3, r5, #3
 8003bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd6:	00e2      	lsls	r2, r4, #3
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	4643      	mov	r3, r8
 8003bde:	18e3      	adds	r3, r4, r3
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	464b      	mov	r3, r9
 8003be4:	eb45 0303 	adc.w	r3, r5, r3
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	028b      	lsls	r3, r1, #10
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c00:	4621      	mov	r1, r4
 8003c02:	028a      	lsls	r2, r1, #10
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	61fa      	str	r2, [r7, #28]
 8003c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c14:	f7fd f818 	bl	8000c48 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3750      	adds	r7, #80	; 0x50
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	007a1200 	.word	0x007a1200

08003c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000000 	.word	0x20000000

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c78:	f7ff fff0 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0a9b      	lsrs	r3, r3, #10
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08007ebc 	.word	0x08007ebc

08003c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca0:	f7ff ffdc 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0b5b      	lsrs	r3, r3, #13
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4903      	ldr	r1, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	08007ebc 	.word	0x08007ebc

08003cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e07b      	b.n	8003dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d108      	bne.n	8003cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce6:	d009      	beq.n	8003cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	61da      	str	r2, [r3, #28]
 8003cee:	e005      	b.n	8003cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fef8 	bl	8001b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	ea42 0103 	orr.w	r1, r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	0c1b      	lsrs	r3, r3, #16
 8003d9a:	f003 0104 	and.w	r1, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0210 	and.w	r2, r3, #16
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b088      	sub	sp, #32
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_SPI_Transmit+0x22>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e12d      	b.n	8004054 <HAL_SPI_Transmit+0x27e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e00:	f7fe f8f8 	bl	8001ff4 <HAL_GetTick>
 8003e04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e1a:	e116      	b.n	800404a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_Transmit+0x52>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e2c:	e10d      	b.n	800404a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2203      	movs	r2, #3
 8003e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e74:	d10f      	bne.n	8003e96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d007      	beq.n	8003eb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebc:	d14f      	bne.n	8003f5e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_SPI_Transmit+0xf6>
 8003ec6:	8afb      	ldrh	r3, [r7, #22]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d142      	bne.n	8003f52 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	881a      	ldrh	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	1c9a      	adds	r2, r3, #2
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ef0:	e02f      	b.n	8003f52 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d112      	bne.n	8003f26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	1c9a      	adds	r2, r3, #2
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f24:	e015      	b.n	8003f52 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f26:	f7fe f865 	bl	8001ff4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d803      	bhi.n	8003f3e <HAL_SPI_Transmit+0x168>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d102      	bne.n	8003f44 <HAL_SPI_Transmit+0x16e>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f50:	e07b      	b.n	800404a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ca      	bne.n	8003ef2 <HAL_SPI_Transmit+0x11c>
 8003f5c:	e050      	b.n	8004000 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_Transmit+0x196>
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d144      	bne.n	8003ff6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f92:	e030      	b.n	8003ff6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d113      	bne.n	8003fca <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fc8:	e015      	b.n	8003ff6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fca:	f7fe f813 	bl	8001ff4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d803      	bhi.n	8003fe2 <HAL_SPI_Transmit+0x20c>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d102      	bne.n	8003fe8 <HAL_SPI_Transmit+0x212>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ff4:	e029      	b.n	800404a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1c9      	bne.n	8003f94 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	6839      	ldr	r1, [r7, #0]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fbdf 	bl	80047c8 <SPI_EndRxTxTransaction>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e003      	b.n	800404a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004052:	7ffb      	ldrb	r3, [r7, #31]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800407c:	2302      	movs	r3, #2
 800407e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004080:	e0fb      	b.n	800427a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408a:	d112      	bne.n	80040b2 <HAL_SPI_Receive+0x56>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10e      	bne.n	80040b2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2204      	movs	r2, #4
 8004098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f8ef 	bl	800428c <HAL_SPI_TransmitReceive>
 80040ae:	4603      	mov	r3, r0
 80040b0:	e0e8      	b.n	8004284 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_SPI_Receive+0x64>
 80040bc:	2302      	movs	r3, #2
 80040be:	e0e1      	b.n	8004284 <HAL_SPI_Receive+0x228>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c8:	f7fd ff94 	bl	8001ff4 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Receive+0x7e>
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040de:	e0cc      	b.n	800427a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2204      	movs	r2, #4
 80040e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004126:	d10f      	bne.n	8004148 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004136:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004146:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d007      	beq.n	8004166 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004164:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d16a      	bne.n	8004244 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800416e:	e032      	b.n	80041d6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d115      	bne.n	80041aa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f103 020c 	add.w	r2, r3, #12
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041a8:	e015      	b.n	80041d6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041aa:	f7fd ff23 	bl	8001ff4 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d803      	bhi.n	80041c2 <HAL_SPI_Receive+0x166>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d102      	bne.n	80041c8 <HAL_SPI_Receive+0x16c>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80041d4:	e051      	b.n	800427a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1c7      	bne.n	8004170 <HAL_SPI_Receive+0x114>
 80041e0:	e035      	b.n	800424e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d113      	bne.n	8004218 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	b292      	uxth	r2, r2
 80041fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004216:	e015      	b.n	8004244 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004218:	f7fd feec 	bl	8001ff4 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d803      	bhi.n	8004230 <HAL_SPI_Receive+0x1d4>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d102      	bne.n	8004236 <HAL_SPI_Receive+0x1da>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004242:	e01a      	b.n	800427a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1c9      	bne.n	80041e2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fa52 	bl	80046fc <SPI_EndRxTransaction>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
 8004270:	e003      	b.n	800427a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004282:	7dfb      	ldrb	r3, [r7, #23]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08c      	sub	sp, #48	; 0x30
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800429a:	2301      	movs	r3, #1
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x26>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e198      	b.n	80045e4 <HAL_SPI_TransmitReceive+0x358>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ba:	f7fd fe9b 	bl	8001ff4 <HAL_GetTick>
 80042be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d00f      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x70>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e2:	d107      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x68>
 80042ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d003      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042fa:	e16d      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_SPI_TransmitReceive+0x82>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_SPI_TransmitReceive+0x82>
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004314:	e160      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b04      	cmp	r3, #4
 8004320:	d003      	beq.n	800432a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2205      	movs	r2, #5
 8004326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	887a      	ldrh	r2, [r7, #2]
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	887a      	ldrh	r2, [r7, #2]
 8004352:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d007      	beq.n	800437e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004386:	d17c      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_SPI_TransmitReceive+0x10a>
 8004390:	8b7b      	ldrh	r3, [r7, #26]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d16a      	bne.n	800446c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	881a      	ldrh	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	1c9a      	adds	r2, r3, #2
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ba:	e057      	b.n	800446c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d11b      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x176>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d016      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x176>
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d113      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	881a      	ldrh	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d119      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x1b8>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d014      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	b292      	uxth	r2, r2
 8004426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004440:	2301      	movs	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004444:	f7fd fdd6 	bl	8001ff4 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004450:	429a      	cmp	r2, r3
 8004452:	d80b      	bhi.n	800446c <HAL_SPI_TransmitReceive+0x1e0>
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d007      	beq.n	800446c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800446a:	e0b5      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1a2      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x130>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d19d      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x130>
 8004480:	e080      	b.n	8004584 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x204>
 800448a:	8b7b      	ldrh	r3, [r7, #26]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d16f      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b6:	e05b      	b.n	8004570 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d11c      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x274>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d017      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x274>
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d114      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d119      	bne.n	8004542 <HAL_SPI_TransmitReceive+0x2b6>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d014      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800453e:	2301      	movs	r3, #1
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004542:	f7fd fd57 	bl	8001ff4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800454e:	429a      	cmp	r2, r3
 8004550:	d803      	bhi.n	800455a <HAL_SPI_TransmitReceive+0x2ce>
 8004552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d102      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x2d4>
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d107      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800456e:	e033      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d19e      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x22c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d199      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f91d 	bl	80047c8 <SPI_EndRxTxTransaction>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d006      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045a0:	e01a      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ce:	e003      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3730      	adds	r7, #48	; 0x30
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045fc:	f7fd fcfa 	bl	8001ff4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	4413      	add	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800460c:	f7fd fcf2 	bl	8001ff4 <HAL_GetTick>
 8004610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004612:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	015b      	lsls	r3, r3, #5
 8004618:	0d1b      	lsrs	r3, r3, #20
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004622:	e054      	b.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d050      	beq.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800462c:	f7fd fce2 	bl	8001ff4 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	429a      	cmp	r2, r3
 800463a:	d902      	bls.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13d      	bne.n	80046be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d111      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d004      	beq.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d107      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d10f      	bne.n	80046aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e017      	b.n	80046ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4013      	ands	r3, r2
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d19b      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000000 	.word	0x20000000

080046fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004710:	d111      	bne.n	8004736 <SPI_EndRxTransaction+0x3a>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	d004      	beq.n	8004726 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d107      	bne.n	8004736 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473e:	d12a      	bne.n	8004796 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004748:	d012      	beq.n	8004770 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff ff49 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02d      	beq.n	80047bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e026      	b.n	80047be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	2101      	movs	r1, #1
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ff36 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01a      	beq.n	80047bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e013      	b.n	80047be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2200      	movs	r2, #0
 800479e:	2101      	movs	r1, #1
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7ff ff23 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e000      	b.n	80047be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2201      	movs	r2, #1
 80047dc:	2102      	movs	r1, #2
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff04 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e032      	b.n	8004860 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <SPI_EndRxTxTransaction+0xa0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1b      	ldr	r2, [pc, #108]	; (800486c <SPI_EndRxTxTransaction+0xa4>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	0d5b      	lsrs	r3, r3, #21
 8004806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004818:	d112      	bne.n	8004840 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	; 0x80
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff fee1 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d016      	beq.n	800485e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e00f      	b.n	8004860 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3b01      	subs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b80      	cmp	r3, #128	; 0x80
 8004858:	d0f2      	beq.n	8004840 <SPI_EndRxTxTransaction+0x78>
 800485a:	e000      	b.n	800485e <SPI_EndRxTxTransaction+0x96>
        break;
 800485c:	bf00      	nop
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000000 	.word	0x20000000
 800486c:	165e9f81 	.word	0x165e9f81

08004870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e042      	b.n	8004908 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd fad4 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f973 	bl	8004ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b20      	cmp	r3, #32
 800492e:	d175      	bne.n	8004a1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_UART_Transmit+0x2c>
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e06e      	b.n	8004a1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2221      	movs	r2, #33	; 0x21
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494e:	f7fd fb51 	bl	8001ff4 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d108      	bne.n	800497c <HAL_UART_Transmit+0x6c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e003      	b.n	8004984 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004984:	e02e      	b.n	80049e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f848 	bl	8004a26 <UART_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e03a      	b.n	8004a1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	3302      	adds	r3, #2
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e007      	b.n	80049d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1cb      	bne.n	8004986 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2140      	movs	r1, #64	; 0x40
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f814 	bl	8004a26 <UART_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e006      	b.n	8004a1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a36:	e03b      	b.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d037      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a40:	f7fd fad8 	bl	8001ff4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	6a3a      	ldr	r2, [r7, #32]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e03a      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d023      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d020      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d01d      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d116      	bne.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f81d 	bl	8004ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e00f      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d0b4      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b095      	sub	sp, #84	; 0x54
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b00:	643a      	str	r2, [r7, #64]	; 0x40
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3314      	adds	r3, #20
 8004b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d119      	bne.n	8004b84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0310 	bic.w	r3, r3, #16
 8004b66:	647b      	str	r3, [r7, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b70:	61ba      	str	r2, [r7, #24]
 8004b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b92:	bf00      	nop
 8004b94:	3754      	adds	r7, #84	; 0x54
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b0c0      	sub	sp, #256	; 0x100
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	68d9      	ldr	r1, [r3, #12]
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	ea40 0301 	orr.w	r3, r0, r1
 8004bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bf8:	f021 010c 	bic.w	r1, r1, #12
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c06:	430b      	orrs	r3, r1
 8004c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	6999      	ldr	r1, [r3, #24]
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	ea40 0301 	orr.w	r3, r0, r1
 8004c26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b8f      	ldr	r3, [pc, #572]	; (8004e6c <UART_SetConfig+0x2cc>)
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d005      	beq.n	8004c40 <UART_SetConfig+0xa0>
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b8d      	ldr	r3, [pc, #564]	; (8004e70 <UART_SetConfig+0x2d0>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d104      	bne.n	8004c4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c40:	f7ff f82c 	bl	8003c9c <HAL_RCC_GetPCLK2Freq>
 8004c44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c48:	e003      	b.n	8004c52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c4a:	f7ff f813 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8004c4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5c:	f040 810c 	bne.w	8004e78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c72:	4622      	mov	r2, r4
 8004c74:	462b      	mov	r3, r5
 8004c76:	1891      	adds	r1, r2, r2
 8004c78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c7a:	415b      	adcs	r3, r3
 8004c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c82:	4621      	mov	r1, r4
 8004c84:	eb12 0801 	adds.w	r8, r2, r1
 8004c88:	4629      	mov	r1, r5
 8004c8a:	eb43 0901 	adc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	eb49 0303 	adc.w	r3, r9, r3
 8004cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cce:	460b      	mov	r3, r1
 8004cd0:	18db      	adds	r3, r3, r3
 8004cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	eb42 0303 	adc.w	r3, r2, r3
 8004cda:	657b      	str	r3, [r7, #84]	; 0x54
 8004cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ce0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ce4:	f7fb ffb0 	bl	8000c48 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <UART_SetConfig+0x2d4>)
 8004cee:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	011c      	lsls	r4, r3, #4
 8004cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	1891      	adds	r1, r2, r2
 8004d0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d10:	415b      	adcs	r3, r3
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d18:	4641      	mov	r1, r8
 8004d1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d1e:	4649      	mov	r1, r9
 8004d20:	eb43 0b01 	adc.w	fp, r3, r1
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d38:	4692      	mov	sl, r2
 8004d3a:	469b      	mov	fp, r3
 8004d3c:	4643      	mov	r3, r8
 8004d3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d46:	464b      	mov	r3, r9
 8004d48:	eb4b 0303 	adc.w	r3, fp, r3
 8004d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d64:	460b      	mov	r3, r1
 8004d66:	18db      	adds	r3, r3, r3
 8004d68:	643b      	str	r3, [r7, #64]	; 0x40
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	eb42 0303 	adc.w	r3, r2, r3
 8004d70:	647b      	str	r3, [r7, #68]	; 0x44
 8004d72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d7a:	f7fb ff65 	bl	8000c48 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <UART_SetConfig+0x2d4>)
 8004d86:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2264      	movs	r2, #100	; 0x64
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	1acb      	subs	r3, r1, r3
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d9a:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <UART_SetConfig+0x2d4>)
 8004d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004da8:	441c      	add	r4, r3
 8004daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004db4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004db8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dcc:	4641      	mov	r1, r8
 8004dce:	1851      	adds	r1, r2, r1
 8004dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	414b      	adcs	r3, r1
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004de4:	4659      	mov	r1, fp
 8004de6:	00cb      	lsls	r3, r1, #3
 8004de8:	4651      	mov	r1, sl
 8004dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dee:	4651      	mov	r1, sl
 8004df0:	00ca      	lsls	r2, r1, #3
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	4642      	mov	r2, r8
 8004dfa:	189b      	adds	r3, r3, r2
 8004dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e00:	464b      	mov	r3, r9
 8004e02:	460a      	mov	r2, r1
 8004e04:	eb42 0303 	adc.w	r3, r2, r3
 8004e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e20:	460b      	mov	r3, r1
 8004e22:	18db      	adds	r3, r3, r3
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e26:	4613      	mov	r3, r2
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e36:	f7fb ff07 	bl	8000c48 <__aeabi_uldivmod>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <UART_SetConfig+0x2d4>)
 8004e40:	fba3 1302 	umull	r1, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2164      	movs	r1, #100	; 0x64
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <UART_SetConfig+0x2d4>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 0207 	and.w	r2, r3, #7
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4422      	add	r2, r4
 8004e66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e68:	e106      	b.n	8005078 <UART_SetConfig+0x4d8>
 8004e6a:	bf00      	nop
 8004e6c:	40011000 	.word	0x40011000
 8004e70:	40011400 	.word	0x40011400
 8004e74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e8a:	4642      	mov	r2, r8
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	1891      	adds	r1, r2, r2
 8004e90:	6239      	str	r1, [r7, #32]
 8004e92:	415b      	adcs	r3, r3
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	1854      	adds	r4, r2, r1
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	eb43 0501 	adc.w	r5, r3, r1
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	00eb      	lsls	r3, r5, #3
 8004eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eb2:	00e2      	lsls	r2, r4, #3
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	4643      	mov	r3, r8
 8004eba:	18e3      	adds	r3, r4, r3
 8004ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	eb45 0303 	adc.w	r3, r5, r3
 8004ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	008b      	lsls	r3, r1, #2
 8004eea:	4621      	mov	r1, r4
 8004eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	008a      	lsls	r2, r1, #2
 8004ef4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ef8:	f7fb fea6 	bl	8000c48 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b60      	ldr	r3, [pc, #384]	; (8005084 <UART_SetConfig+0x4e4>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	011c      	lsls	r4, r3, #4
 8004f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	1891      	adds	r1, r2, r2
 8004f22:	61b9      	str	r1, [r7, #24]
 8004f24:	415b      	adcs	r3, r3
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	1851      	adds	r1, r2, r1
 8004f30:	6139      	str	r1, [r7, #16]
 8004f32:	4649      	mov	r1, r9
 8004f34:	414b      	adcs	r3, r1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f44:	4659      	mov	r1, fp
 8004f46:	00cb      	lsls	r3, r1, #3
 8004f48:	4651      	mov	r1, sl
 8004f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f4e:	4651      	mov	r1, sl
 8004f50:	00ca      	lsls	r2, r1, #3
 8004f52:	4610      	mov	r0, r2
 8004f54:	4619      	mov	r1, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	4642      	mov	r2, r8
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f60:	464b      	mov	r3, r9
 8004f62:	460a      	mov	r2, r1
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f84:	4649      	mov	r1, r9
 8004f86:	008b      	lsls	r3, r1, #2
 8004f88:	4641      	mov	r1, r8
 8004f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f8e:	4641      	mov	r1, r8
 8004f90:	008a      	lsls	r2, r1, #2
 8004f92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f96:	f7fb fe57 	bl	8000c48 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4b38      	ldr	r3, [pc, #224]	; (8005084 <UART_SetConfig+0x4e4>)
 8004fa2:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2264      	movs	r2, #100	; 0x64
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	1acb      	subs	r3, r1, r3
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	3332      	adds	r3, #50	; 0x32
 8004fb4:	4a33      	ldr	r2, [pc, #204]	; (8005084 <UART_SetConfig+0x4e4>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc0:	441c      	add	r4, r3
 8004fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004fca:	677a      	str	r2, [r7, #116]	; 0x74
 8004fcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	1891      	adds	r1, r2, r2
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	415b      	adcs	r3, r3
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	1851      	adds	r1, r2, r1
 8004fe4:	6039      	str	r1, [r7, #0]
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	414b      	adcs	r3, r1
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	00cb      	lsls	r3, r1, #3
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005002:	4651      	mov	r1, sl
 8005004:	00ca      	lsls	r2, r1, #3
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	4603      	mov	r3, r0
 800500c:	4642      	mov	r2, r8
 800500e:	189b      	adds	r3, r3, r2
 8005010:	66bb      	str	r3, [r7, #104]	; 0x68
 8005012:	464b      	mov	r3, r9
 8005014:	460a      	mov	r2, r1
 8005016:	eb42 0303 	adc.w	r3, r2, r3
 800501a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	663b      	str	r3, [r7, #96]	; 0x60
 8005026:	667a      	str	r2, [r7, #100]	; 0x64
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005034:	4649      	mov	r1, r9
 8005036:	008b      	lsls	r3, r1, #2
 8005038:	4641      	mov	r1, r8
 800503a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503e:	4641      	mov	r1, r8
 8005040:	008a      	lsls	r2, r1, #2
 8005042:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005046:	f7fb fdff 	bl	8000c48 <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <UART_SetConfig+0x4e4>)
 8005050:	fba3 1302 	umull	r1, r3, r3, r2
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	2164      	movs	r1, #100	; 0x64
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	3332      	adds	r3, #50	; 0x32
 8005062:	4a08      	ldr	r2, [pc, #32]	; (8005084 <UART_SetConfig+0x4e4>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	f003 020f 	and.w	r2, r3, #15
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4422      	add	r2, r4
 8005076:	609a      	str	r2, [r3, #8]
}
 8005078:	bf00      	nop
 800507a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005084:	51eb851f 	.word	0x51eb851f

08005088 <malloc>:
 8005088:	4b02      	ldr	r3, [pc, #8]	; (8005094 <malloc+0xc>)
 800508a:	4601      	mov	r1, r0
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	f000 b823 	b.w	80050d8 <_malloc_r>
 8005092:	bf00      	nop
 8005094:	20000064 	.word	0x20000064

08005098 <sbrk_aligned>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4e0e      	ldr	r6, [pc, #56]	; (80050d4 <sbrk_aligned+0x3c>)
 800509c:	460c      	mov	r4, r1
 800509e:	6831      	ldr	r1, [r6, #0]
 80050a0:	4605      	mov	r5, r0
 80050a2:	b911      	cbnz	r1, 80050aa <sbrk_aligned+0x12>
 80050a4:	f000 feb6 	bl	8005e14 <_sbrk_r>
 80050a8:	6030      	str	r0, [r6, #0]
 80050aa:	4621      	mov	r1, r4
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 feb1 	bl	8005e14 <_sbrk_r>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	d00a      	beq.n	80050cc <sbrk_aligned+0x34>
 80050b6:	1cc4      	adds	r4, r0, #3
 80050b8:	f024 0403 	bic.w	r4, r4, #3
 80050bc:	42a0      	cmp	r0, r4
 80050be:	d007      	beq.n	80050d0 <sbrk_aligned+0x38>
 80050c0:	1a21      	subs	r1, r4, r0
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 fea6 	bl	8005e14 <_sbrk_r>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d101      	bne.n	80050d0 <sbrk_aligned+0x38>
 80050cc:	f04f 34ff 	mov.w	r4, #4294967295
 80050d0:	4620      	mov	r0, r4
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	200002f0 	.word	0x200002f0

080050d8 <_malloc_r>:
 80050d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050dc:	1ccd      	adds	r5, r1, #3
 80050de:	f025 0503 	bic.w	r5, r5, #3
 80050e2:	3508      	adds	r5, #8
 80050e4:	2d0c      	cmp	r5, #12
 80050e6:	bf38      	it	cc
 80050e8:	250c      	movcc	r5, #12
 80050ea:	2d00      	cmp	r5, #0
 80050ec:	4607      	mov	r7, r0
 80050ee:	db01      	blt.n	80050f4 <_malloc_r+0x1c>
 80050f0:	42a9      	cmp	r1, r5
 80050f2:	d905      	bls.n	8005100 <_malloc_r+0x28>
 80050f4:	230c      	movs	r3, #12
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	2600      	movs	r6, #0
 80050fa:	4630      	mov	r0, r6
 80050fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051d4 <_malloc_r+0xfc>
 8005104:	f000 f868 	bl	80051d8 <__malloc_lock>
 8005108:	f8d8 3000 	ldr.w	r3, [r8]
 800510c:	461c      	mov	r4, r3
 800510e:	bb5c      	cbnz	r4, 8005168 <_malloc_r+0x90>
 8005110:	4629      	mov	r1, r5
 8005112:	4638      	mov	r0, r7
 8005114:	f7ff ffc0 	bl	8005098 <sbrk_aligned>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	4604      	mov	r4, r0
 800511c:	d155      	bne.n	80051ca <_malloc_r+0xf2>
 800511e:	f8d8 4000 	ldr.w	r4, [r8]
 8005122:	4626      	mov	r6, r4
 8005124:	2e00      	cmp	r6, #0
 8005126:	d145      	bne.n	80051b4 <_malloc_r+0xdc>
 8005128:	2c00      	cmp	r4, #0
 800512a:	d048      	beq.n	80051be <_malloc_r+0xe6>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	4631      	mov	r1, r6
 8005130:	4638      	mov	r0, r7
 8005132:	eb04 0903 	add.w	r9, r4, r3
 8005136:	f000 fe6d 	bl	8005e14 <_sbrk_r>
 800513a:	4581      	cmp	r9, r0
 800513c:	d13f      	bne.n	80051be <_malloc_r+0xe6>
 800513e:	6821      	ldr	r1, [r4, #0]
 8005140:	1a6d      	subs	r5, r5, r1
 8005142:	4629      	mov	r1, r5
 8005144:	4638      	mov	r0, r7
 8005146:	f7ff ffa7 	bl	8005098 <sbrk_aligned>
 800514a:	3001      	adds	r0, #1
 800514c:	d037      	beq.n	80051be <_malloc_r+0xe6>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	442b      	add	r3, r5
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	f8d8 3000 	ldr.w	r3, [r8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d038      	beq.n	80051ce <_malloc_r+0xf6>
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	42a2      	cmp	r2, r4
 8005160:	d12b      	bne.n	80051ba <_malloc_r+0xe2>
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	e00f      	b.n	8005188 <_malloc_r+0xb0>
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	1b52      	subs	r2, r2, r5
 800516c:	d41f      	bmi.n	80051ae <_malloc_r+0xd6>
 800516e:	2a0b      	cmp	r2, #11
 8005170:	d917      	bls.n	80051a2 <_malloc_r+0xca>
 8005172:	1961      	adds	r1, r4, r5
 8005174:	42a3      	cmp	r3, r4
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	6059      	strne	r1, [r3, #4]
 800517c:	6863      	ldr	r3, [r4, #4]
 800517e:	bf08      	it	eq
 8005180:	f8c8 1000 	streq.w	r1, [r8]
 8005184:	5162      	str	r2, [r4, r5]
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	4638      	mov	r0, r7
 800518a:	f104 060b 	add.w	r6, r4, #11
 800518e:	f000 f829 	bl	80051e4 <__malloc_unlock>
 8005192:	f026 0607 	bic.w	r6, r6, #7
 8005196:	1d23      	adds	r3, r4, #4
 8005198:	1af2      	subs	r2, r6, r3
 800519a:	d0ae      	beq.n	80050fa <_malloc_r+0x22>
 800519c:	1b9b      	subs	r3, r3, r6
 800519e:	50a3      	str	r3, [r4, r2]
 80051a0:	e7ab      	b.n	80050fa <_malloc_r+0x22>
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	6862      	ldr	r2, [r4, #4]
 80051a6:	d1dd      	bne.n	8005164 <_malloc_r+0x8c>
 80051a8:	f8c8 2000 	str.w	r2, [r8]
 80051ac:	e7ec      	b.n	8005188 <_malloc_r+0xb0>
 80051ae:	4623      	mov	r3, r4
 80051b0:	6864      	ldr	r4, [r4, #4]
 80051b2:	e7ac      	b.n	800510e <_malloc_r+0x36>
 80051b4:	4634      	mov	r4, r6
 80051b6:	6876      	ldr	r6, [r6, #4]
 80051b8:	e7b4      	b.n	8005124 <_malloc_r+0x4c>
 80051ba:	4613      	mov	r3, r2
 80051bc:	e7cc      	b.n	8005158 <_malloc_r+0x80>
 80051be:	230c      	movs	r3, #12
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	4638      	mov	r0, r7
 80051c4:	f000 f80e 	bl	80051e4 <__malloc_unlock>
 80051c8:	e797      	b.n	80050fa <_malloc_r+0x22>
 80051ca:	6025      	str	r5, [r4, #0]
 80051cc:	e7dc      	b.n	8005188 <_malloc_r+0xb0>
 80051ce:	605b      	str	r3, [r3, #4]
 80051d0:	deff      	udf	#255	; 0xff
 80051d2:	bf00      	nop
 80051d4:	200002ec 	.word	0x200002ec

080051d8 <__malloc_lock>:
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <__malloc_lock+0x8>)
 80051da:	f000 be68 	b.w	8005eae <__retarget_lock_acquire_recursive>
 80051de:	bf00      	nop
 80051e0:	20000434 	.word	0x20000434

080051e4 <__malloc_unlock>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__malloc_unlock+0x8>)
 80051e6:	f000 be63 	b.w	8005eb0 <__retarget_lock_release_recursive>
 80051ea:	bf00      	nop
 80051ec:	20000434 	.word	0x20000434

080051f0 <__cvt>:
 80051f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	ec55 4b10 	vmov	r4, r5, d0
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	460e      	mov	r6, r1
 80051fc:	4619      	mov	r1, r3
 80051fe:	462b      	mov	r3, r5
 8005200:	bfbb      	ittet	lt
 8005202:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005206:	461d      	movlt	r5, r3
 8005208:	2300      	movge	r3, #0
 800520a:	232d      	movlt	r3, #45	; 0x2d
 800520c:	700b      	strb	r3, [r1, #0]
 800520e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005210:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005214:	4691      	mov	r9, r2
 8005216:	f023 0820 	bic.w	r8, r3, #32
 800521a:	bfbc      	itt	lt
 800521c:	4622      	movlt	r2, r4
 800521e:	4614      	movlt	r4, r2
 8005220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005224:	d005      	beq.n	8005232 <__cvt+0x42>
 8005226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800522a:	d100      	bne.n	800522e <__cvt+0x3e>
 800522c:	3601      	adds	r6, #1
 800522e:	2102      	movs	r1, #2
 8005230:	e000      	b.n	8005234 <__cvt+0x44>
 8005232:	2103      	movs	r1, #3
 8005234:	ab03      	add	r3, sp, #12
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	ab02      	add	r3, sp, #8
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	ec45 4b10 	vmov	d0, r4, r5
 8005240:	4653      	mov	r3, sl
 8005242:	4632      	mov	r2, r6
 8005244:	f000 fec0 	bl	8005fc8 <_dtoa_r>
 8005248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800524c:	4607      	mov	r7, r0
 800524e:	d102      	bne.n	8005256 <__cvt+0x66>
 8005250:	f019 0f01 	tst.w	r9, #1
 8005254:	d022      	beq.n	800529c <__cvt+0xac>
 8005256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800525a:	eb07 0906 	add.w	r9, r7, r6
 800525e:	d110      	bne.n	8005282 <__cvt+0x92>
 8005260:	783b      	ldrb	r3, [r7, #0]
 8005262:	2b30      	cmp	r3, #48	; 0x30
 8005264:	d10a      	bne.n	800527c <__cvt+0x8c>
 8005266:	2200      	movs	r2, #0
 8005268:	2300      	movs	r3, #0
 800526a:	4620      	mov	r0, r4
 800526c:	4629      	mov	r1, r5
 800526e:	f7fb fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005272:	b918      	cbnz	r0, 800527c <__cvt+0x8c>
 8005274:	f1c6 0601 	rsb	r6, r6, #1
 8005278:	f8ca 6000 	str.w	r6, [sl]
 800527c:	f8da 3000 	ldr.w	r3, [sl]
 8005280:	4499      	add	r9, r3
 8005282:	2200      	movs	r2, #0
 8005284:	2300      	movs	r3, #0
 8005286:	4620      	mov	r0, r4
 8005288:	4629      	mov	r1, r5
 800528a:	f7fb fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800528e:	b108      	cbz	r0, 8005294 <__cvt+0xa4>
 8005290:	f8cd 900c 	str.w	r9, [sp, #12]
 8005294:	2230      	movs	r2, #48	; 0x30
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	454b      	cmp	r3, r9
 800529a:	d307      	bcc.n	80052ac <__cvt+0xbc>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052a0:	1bdb      	subs	r3, r3, r7
 80052a2:	4638      	mov	r0, r7
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	b004      	add	sp, #16
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	9103      	str	r1, [sp, #12]
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e7f0      	b.n	8005296 <__cvt+0xa6>

080052b4 <__exponent>:
 80052b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b6:	4603      	mov	r3, r0
 80052b8:	2900      	cmp	r1, #0
 80052ba:	bfb8      	it	lt
 80052bc:	4249      	neglt	r1, r1
 80052be:	f803 2b02 	strb.w	r2, [r3], #2
 80052c2:	bfb4      	ite	lt
 80052c4:	222d      	movlt	r2, #45	; 0x2d
 80052c6:	222b      	movge	r2, #43	; 0x2b
 80052c8:	2909      	cmp	r1, #9
 80052ca:	7042      	strb	r2, [r0, #1]
 80052cc:	dd2a      	ble.n	8005324 <__exponent+0x70>
 80052ce:	f10d 0207 	add.w	r2, sp, #7
 80052d2:	4617      	mov	r7, r2
 80052d4:	260a      	movs	r6, #10
 80052d6:	4694      	mov	ip, r2
 80052d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80052dc:	fb06 1415 	mls	r4, r6, r5, r1
 80052e0:	3430      	adds	r4, #48	; 0x30
 80052e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80052e6:	460c      	mov	r4, r1
 80052e8:	2c63      	cmp	r4, #99	; 0x63
 80052ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80052ee:	4629      	mov	r1, r5
 80052f0:	dcf1      	bgt.n	80052d6 <__exponent+0x22>
 80052f2:	3130      	adds	r1, #48	; 0x30
 80052f4:	f1ac 0402 	sub.w	r4, ip, #2
 80052f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052fc:	1c41      	adds	r1, r0, #1
 80052fe:	4622      	mov	r2, r4
 8005300:	42ba      	cmp	r2, r7
 8005302:	d30a      	bcc.n	800531a <__exponent+0x66>
 8005304:	f10d 0209 	add.w	r2, sp, #9
 8005308:	eba2 020c 	sub.w	r2, r2, ip
 800530c:	42bc      	cmp	r4, r7
 800530e:	bf88      	it	hi
 8005310:	2200      	movhi	r2, #0
 8005312:	4413      	add	r3, r2
 8005314:	1a18      	subs	r0, r3, r0
 8005316:	b003      	add	sp, #12
 8005318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800531e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005322:	e7ed      	b.n	8005300 <__exponent+0x4c>
 8005324:	2330      	movs	r3, #48	; 0x30
 8005326:	3130      	adds	r1, #48	; 0x30
 8005328:	7083      	strb	r3, [r0, #2]
 800532a:	70c1      	strb	r1, [r0, #3]
 800532c:	1d03      	adds	r3, r0, #4
 800532e:	e7f1      	b.n	8005314 <__exponent+0x60>

08005330 <_printf_float>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	ed2d 8b02 	vpush	{d8}
 8005338:	b08d      	sub	sp, #52	; 0x34
 800533a:	460c      	mov	r4, r1
 800533c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005340:	4616      	mov	r6, r2
 8005342:	461f      	mov	r7, r3
 8005344:	4605      	mov	r5, r0
 8005346:	f000 fd2d 	bl	8005da4 <_localeconv_r>
 800534a:	f8d0 a000 	ldr.w	sl, [r0]
 800534e:	4650      	mov	r0, sl
 8005350:	f7fa ff8e 	bl	8000270 <strlen>
 8005354:	2300      	movs	r3, #0
 8005356:	930a      	str	r3, [sp, #40]	; 0x28
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	9305      	str	r3, [sp, #20]
 800535c:	f8d8 3000 	ldr.w	r3, [r8]
 8005360:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005364:	3307      	adds	r3, #7
 8005366:	f023 0307 	bic.w	r3, r3, #7
 800536a:	f103 0208 	add.w	r2, r3, #8
 800536e:	f8c8 2000 	str.w	r2, [r8]
 8005372:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005376:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800537a:	9307      	str	r3, [sp, #28]
 800537c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005380:	ee08 0a10 	vmov	s16, r0
 8005384:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800538c:	4b9e      	ldr	r3, [pc, #632]	; (8005608 <_printf_float+0x2d8>)
 800538e:	f04f 32ff 	mov.w	r2, #4294967295
 8005392:	f7fb fbcb 	bl	8000b2c <__aeabi_dcmpun>
 8005396:	bb88      	cbnz	r0, 80053fc <_printf_float+0xcc>
 8005398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800539c:	4b9a      	ldr	r3, [pc, #616]	; (8005608 <_printf_float+0x2d8>)
 800539e:	f04f 32ff 	mov.w	r2, #4294967295
 80053a2:	f7fb fba5 	bl	8000af0 <__aeabi_dcmple>
 80053a6:	bb48      	cbnz	r0, 80053fc <_printf_float+0xcc>
 80053a8:	2200      	movs	r2, #0
 80053aa:	2300      	movs	r3, #0
 80053ac:	4640      	mov	r0, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fb fb94 	bl	8000adc <__aeabi_dcmplt>
 80053b4:	b110      	cbz	r0, 80053bc <_printf_float+0x8c>
 80053b6:	232d      	movs	r3, #45	; 0x2d
 80053b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053bc:	4a93      	ldr	r2, [pc, #588]	; (800560c <_printf_float+0x2dc>)
 80053be:	4b94      	ldr	r3, [pc, #592]	; (8005610 <_printf_float+0x2e0>)
 80053c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053c4:	bf94      	ite	ls
 80053c6:	4690      	movls	r8, r2
 80053c8:	4698      	movhi	r8, r3
 80053ca:	2303      	movs	r3, #3
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	9b05      	ldr	r3, [sp, #20]
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	f04f 0900 	mov.w	r9, #0
 80053da:	9700      	str	r7, [sp, #0]
 80053dc:	4633      	mov	r3, r6
 80053de:	aa0b      	add	r2, sp, #44	; 0x2c
 80053e0:	4621      	mov	r1, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f9da 	bl	800579c <_printf_common>
 80053e8:	3001      	adds	r0, #1
 80053ea:	f040 8090 	bne.w	800550e <_printf_float+0x1de>
 80053ee:	f04f 30ff 	mov.w	r0, #4294967295
 80053f2:	b00d      	add	sp, #52	; 0x34
 80053f4:	ecbd 8b02 	vpop	{d8}
 80053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fc:	4642      	mov	r2, r8
 80053fe:	464b      	mov	r3, r9
 8005400:	4640      	mov	r0, r8
 8005402:	4649      	mov	r1, r9
 8005404:	f7fb fb92 	bl	8000b2c <__aeabi_dcmpun>
 8005408:	b140      	cbz	r0, 800541c <_printf_float+0xec>
 800540a:	464b      	mov	r3, r9
 800540c:	2b00      	cmp	r3, #0
 800540e:	bfbc      	itt	lt
 8005410:	232d      	movlt	r3, #45	; 0x2d
 8005412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005416:	4a7f      	ldr	r2, [pc, #508]	; (8005614 <_printf_float+0x2e4>)
 8005418:	4b7f      	ldr	r3, [pc, #508]	; (8005618 <_printf_float+0x2e8>)
 800541a:	e7d1      	b.n	80053c0 <_printf_float+0x90>
 800541c:	6863      	ldr	r3, [r4, #4]
 800541e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005422:	9206      	str	r2, [sp, #24]
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	d13f      	bne.n	80054a8 <_printf_float+0x178>
 8005428:	2306      	movs	r3, #6
 800542a:	6063      	str	r3, [r4, #4]
 800542c:	9b05      	ldr	r3, [sp, #20]
 800542e:	6861      	ldr	r1, [r4, #4]
 8005430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005434:	2300      	movs	r3, #0
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	ab0a      	add	r3, sp, #40	; 0x28
 800543a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800543e:	ab09      	add	r3, sp, #36	; 0x24
 8005440:	ec49 8b10 	vmov	d0, r8, r9
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	6022      	str	r2, [r4, #0]
 8005448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800544c:	4628      	mov	r0, r5
 800544e:	f7ff fecf 	bl	80051f0 <__cvt>
 8005452:	9b06      	ldr	r3, [sp, #24]
 8005454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005456:	2b47      	cmp	r3, #71	; 0x47
 8005458:	4680      	mov	r8, r0
 800545a:	d108      	bne.n	800546e <_printf_float+0x13e>
 800545c:	1cc8      	adds	r0, r1, #3
 800545e:	db02      	blt.n	8005466 <_printf_float+0x136>
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	4299      	cmp	r1, r3
 8005464:	dd41      	ble.n	80054ea <_printf_float+0x1ba>
 8005466:	f1ab 0302 	sub.w	r3, fp, #2
 800546a:	fa5f fb83 	uxtb.w	fp, r3
 800546e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005472:	d820      	bhi.n	80054b6 <_printf_float+0x186>
 8005474:	3901      	subs	r1, #1
 8005476:	465a      	mov	r2, fp
 8005478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800547c:	9109      	str	r1, [sp, #36]	; 0x24
 800547e:	f7ff ff19 	bl	80052b4 <__exponent>
 8005482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005484:	1813      	adds	r3, r2, r0
 8005486:	2a01      	cmp	r2, #1
 8005488:	4681      	mov	r9, r0
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	dc02      	bgt.n	8005494 <_printf_float+0x164>
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	07d2      	lsls	r2, r2, #31
 8005492:	d501      	bpl.n	8005498 <_printf_float+0x168>
 8005494:	3301      	adds	r3, #1
 8005496:	6123      	str	r3, [r4, #16]
 8005498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800549c:	2b00      	cmp	r3, #0
 800549e:	d09c      	beq.n	80053da <_printf_float+0xaa>
 80054a0:	232d      	movs	r3, #45	; 0x2d
 80054a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a6:	e798      	b.n	80053da <_printf_float+0xaa>
 80054a8:	9a06      	ldr	r2, [sp, #24]
 80054aa:	2a47      	cmp	r2, #71	; 0x47
 80054ac:	d1be      	bne.n	800542c <_printf_float+0xfc>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1bc      	bne.n	800542c <_printf_float+0xfc>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e7b9      	b.n	800542a <_printf_float+0xfa>
 80054b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054ba:	d118      	bne.n	80054ee <_printf_float+0x1be>
 80054bc:	2900      	cmp	r1, #0
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	dd0b      	ble.n	80054da <_printf_float+0x1aa>
 80054c2:	6121      	str	r1, [r4, #16]
 80054c4:	b913      	cbnz	r3, 80054cc <_printf_float+0x19c>
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	07d0      	lsls	r0, r2, #31
 80054ca:	d502      	bpl.n	80054d2 <_printf_float+0x1a2>
 80054cc:	3301      	adds	r3, #1
 80054ce:	440b      	add	r3, r1
 80054d0:	6123      	str	r3, [r4, #16]
 80054d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80054d4:	f04f 0900 	mov.w	r9, #0
 80054d8:	e7de      	b.n	8005498 <_printf_float+0x168>
 80054da:	b913      	cbnz	r3, 80054e2 <_printf_float+0x1b2>
 80054dc:	6822      	ldr	r2, [r4, #0]
 80054de:	07d2      	lsls	r2, r2, #31
 80054e0:	d501      	bpl.n	80054e6 <_printf_float+0x1b6>
 80054e2:	3302      	adds	r3, #2
 80054e4:	e7f4      	b.n	80054d0 <_printf_float+0x1a0>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e7f2      	b.n	80054d0 <_printf_float+0x1a0>
 80054ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f0:	4299      	cmp	r1, r3
 80054f2:	db05      	blt.n	8005500 <_printf_float+0x1d0>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	6121      	str	r1, [r4, #16]
 80054f8:	07d8      	lsls	r0, r3, #31
 80054fa:	d5ea      	bpl.n	80054d2 <_printf_float+0x1a2>
 80054fc:	1c4b      	adds	r3, r1, #1
 80054fe:	e7e7      	b.n	80054d0 <_printf_float+0x1a0>
 8005500:	2900      	cmp	r1, #0
 8005502:	bfd4      	ite	le
 8005504:	f1c1 0202 	rsble	r2, r1, #2
 8005508:	2201      	movgt	r2, #1
 800550a:	4413      	add	r3, r2
 800550c:	e7e0      	b.n	80054d0 <_printf_float+0x1a0>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	055a      	lsls	r2, r3, #21
 8005512:	d407      	bmi.n	8005524 <_printf_float+0x1f4>
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	4642      	mov	r2, r8
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	d12c      	bne.n	800557c <_printf_float+0x24c>
 8005522:	e764      	b.n	80053ee <_printf_float+0xbe>
 8005524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005528:	f240 80e0 	bls.w	80056ec <_printf_float+0x3bc>
 800552c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005530:	2200      	movs	r2, #0
 8005532:	2300      	movs	r3, #0
 8005534:	f7fb fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005538:	2800      	cmp	r0, #0
 800553a:	d034      	beq.n	80055a6 <_printf_float+0x276>
 800553c:	4a37      	ldr	r2, [pc, #220]	; (800561c <_printf_float+0x2ec>)
 800553e:	2301      	movs	r3, #1
 8005540:	4631      	mov	r1, r6
 8005542:	4628      	mov	r0, r5
 8005544:	47b8      	blx	r7
 8005546:	3001      	adds	r0, #1
 8005548:	f43f af51 	beq.w	80053ee <_printf_float+0xbe>
 800554c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005550:	429a      	cmp	r2, r3
 8005552:	db02      	blt.n	800555a <_printf_float+0x22a>
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	07d8      	lsls	r0, r3, #31
 8005558:	d510      	bpl.n	800557c <_printf_float+0x24c>
 800555a:	ee18 3a10 	vmov	r3, s16
 800555e:	4652      	mov	r2, sl
 8005560:	4631      	mov	r1, r6
 8005562:	4628      	mov	r0, r5
 8005564:	47b8      	blx	r7
 8005566:	3001      	adds	r0, #1
 8005568:	f43f af41 	beq.w	80053ee <_printf_float+0xbe>
 800556c:	f04f 0800 	mov.w	r8, #0
 8005570:	f104 091a 	add.w	r9, r4, #26
 8005574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005576:	3b01      	subs	r3, #1
 8005578:	4543      	cmp	r3, r8
 800557a:	dc09      	bgt.n	8005590 <_printf_float+0x260>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	079b      	lsls	r3, r3, #30
 8005580:	f100 8107 	bmi.w	8005792 <_printf_float+0x462>
 8005584:	68e0      	ldr	r0, [r4, #12]
 8005586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005588:	4298      	cmp	r0, r3
 800558a:	bfb8      	it	lt
 800558c:	4618      	movlt	r0, r3
 800558e:	e730      	b.n	80053f2 <_printf_float+0xc2>
 8005590:	2301      	movs	r3, #1
 8005592:	464a      	mov	r2, r9
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f af27 	beq.w	80053ee <_printf_float+0xbe>
 80055a0:	f108 0801 	add.w	r8, r8, #1
 80055a4:	e7e6      	b.n	8005574 <_printf_float+0x244>
 80055a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	dc39      	bgt.n	8005620 <_printf_float+0x2f0>
 80055ac:	4a1b      	ldr	r2, [pc, #108]	; (800561c <_printf_float+0x2ec>)
 80055ae:	2301      	movs	r3, #1
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f af19 	beq.w	80053ee <_printf_float+0xbe>
 80055bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d102      	bne.n	80055ca <_printf_float+0x29a>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	07d9      	lsls	r1, r3, #31
 80055c8:	d5d8      	bpl.n	800557c <_printf_float+0x24c>
 80055ca:	ee18 3a10 	vmov	r3, s16
 80055ce:	4652      	mov	r2, sl
 80055d0:	4631      	mov	r1, r6
 80055d2:	4628      	mov	r0, r5
 80055d4:	47b8      	blx	r7
 80055d6:	3001      	adds	r0, #1
 80055d8:	f43f af09 	beq.w	80053ee <_printf_float+0xbe>
 80055dc:	f04f 0900 	mov.w	r9, #0
 80055e0:	f104 0a1a 	add.w	sl, r4, #26
 80055e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e6:	425b      	negs	r3, r3
 80055e8:	454b      	cmp	r3, r9
 80055ea:	dc01      	bgt.n	80055f0 <_printf_float+0x2c0>
 80055ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ee:	e792      	b.n	8005516 <_printf_float+0x1e6>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4652      	mov	r2, sl
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f aef7 	beq.w	80053ee <_printf_float+0xbe>
 8005600:	f109 0901 	add.w	r9, r9, #1
 8005604:	e7ee      	b.n	80055e4 <_printf_float+0x2b4>
 8005606:	bf00      	nop
 8005608:	7fefffff 	.word	0x7fefffff
 800560c:	08007ec4 	.word	0x08007ec4
 8005610:	08007ec8 	.word	0x08007ec8
 8005614:	08007ecc 	.word	0x08007ecc
 8005618:	08007ed0 	.word	0x08007ed0
 800561c:	08007ed4 	.word	0x08007ed4
 8005620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005624:	429a      	cmp	r2, r3
 8005626:	bfa8      	it	ge
 8005628:	461a      	movge	r2, r3
 800562a:	2a00      	cmp	r2, #0
 800562c:	4691      	mov	r9, r2
 800562e:	dc37      	bgt.n	80056a0 <_printf_float+0x370>
 8005630:	f04f 0b00 	mov.w	fp, #0
 8005634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005638:	f104 021a 	add.w	r2, r4, #26
 800563c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	eba3 0309 	sub.w	r3, r3, r9
 8005644:	455b      	cmp	r3, fp
 8005646:	dc33      	bgt.n	80056b0 <_printf_float+0x380>
 8005648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800564c:	429a      	cmp	r2, r3
 800564e:	db3b      	blt.n	80056c8 <_printf_float+0x398>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	07da      	lsls	r2, r3, #31
 8005654:	d438      	bmi.n	80056c8 <_printf_float+0x398>
 8005656:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800565a:	eba2 0903 	sub.w	r9, r2, r3
 800565e:	9b05      	ldr	r3, [sp, #20]
 8005660:	1ad2      	subs	r2, r2, r3
 8005662:	4591      	cmp	r9, r2
 8005664:	bfa8      	it	ge
 8005666:	4691      	movge	r9, r2
 8005668:	f1b9 0f00 	cmp.w	r9, #0
 800566c:	dc35      	bgt.n	80056da <_printf_float+0x3aa>
 800566e:	f04f 0800 	mov.w	r8, #0
 8005672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005676:	f104 0a1a 	add.w	sl, r4, #26
 800567a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	eba3 0309 	sub.w	r3, r3, r9
 8005684:	4543      	cmp	r3, r8
 8005686:	f77f af79 	ble.w	800557c <_printf_float+0x24c>
 800568a:	2301      	movs	r3, #1
 800568c:	4652      	mov	r2, sl
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f aeaa 	beq.w	80053ee <_printf_float+0xbe>
 800569a:	f108 0801 	add.w	r8, r8, #1
 800569e:	e7ec      	b.n	800567a <_printf_float+0x34a>
 80056a0:	4613      	mov	r3, r2
 80056a2:	4631      	mov	r1, r6
 80056a4:	4642      	mov	r2, r8
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	d1c0      	bne.n	8005630 <_printf_float+0x300>
 80056ae:	e69e      	b.n	80053ee <_printf_float+0xbe>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	9205      	str	r2, [sp, #20]
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	f43f ae97 	beq.w	80053ee <_printf_float+0xbe>
 80056c0:	9a05      	ldr	r2, [sp, #20]
 80056c2:	f10b 0b01 	add.w	fp, fp, #1
 80056c6:	e7b9      	b.n	800563c <_printf_float+0x30c>
 80056c8:	ee18 3a10 	vmov	r3, s16
 80056cc:	4652      	mov	r2, sl
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	d1be      	bne.n	8005656 <_printf_float+0x326>
 80056d8:	e689      	b.n	80053ee <_printf_float+0xbe>
 80056da:	9a05      	ldr	r2, [sp, #20]
 80056dc:	464b      	mov	r3, r9
 80056de:	4442      	add	r2, r8
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	d1c1      	bne.n	800566e <_printf_float+0x33e>
 80056ea:	e680      	b.n	80053ee <_printf_float+0xbe>
 80056ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ee:	2a01      	cmp	r2, #1
 80056f0:	dc01      	bgt.n	80056f6 <_printf_float+0x3c6>
 80056f2:	07db      	lsls	r3, r3, #31
 80056f4:	d53a      	bpl.n	800576c <_printf_float+0x43c>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4642      	mov	r2, r8
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f ae74 	beq.w	80053ee <_printf_float+0xbe>
 8005706:	ee18 3a10 	vmov	r3, s16
 800570a:	4652      	mov	r2, sl
 800570c:	4631      	mov	r1, r6
 800570e:	4628      	mov	r0, r5
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	f43f ae6b 	beq.w	80053ee <_printf_float+0xbe>
 8005718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800571c:	2200      	movs	r2, #0
 800571e:	2300      	movs	r3, #0
 8005720:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005724:	f7fb f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005728:	b9d8      	cbnz	r0, 8005762 <_printf_float+0x432>
 800572a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800572e:	f108 0201 	add.w	r2, r8, #1
 8005732:	4631      	mov	r1, r6
 8005734:	4628      	mov	r0, r5
 8005736:	47b8      	blx	r7
 8005738:	3001      	adds	r0, #1
 800573a:	d10e      	bne.n	800575a <_printf_float+0x42a>
 800573c:	e657      	b.n	80053ee <_printf_float+0xbe>
 800573e:	2301      	movs	r3, #1
 8005740:	4652      	mov	r2, sl
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f ae50 	beq.w	80053ee <_printf_float+0xbe>
 800574e:	f108 0801 	add.w	r8, r8, #1
 8005752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005754:	3b01      	subs	r3, #1
 8005756:	4543      	cmp	r3, r8
 8005758:	dcf1      	bgt.n	800573e <_printf_float+0x40e>
 800575a:	464b      	mov	r3, r9
 800575c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005760:	e6da      	b.n	8005518 <_printf_float+0x1e8>
 8005762:	f04f 0800 	mov.w	r8, #0
 8005766:	f104 0a1a 	add.w	sl, r4, #26
 800576a:	e7f2      	b.n	8005752 <_printf_float+0x422>
 800576c:	2301      	movs	r3, #1
 800576e:	4642      	mov	r2, r8
 8005770:	e7df      	b.n	8005732 <_printf_float+0x402>
 8005772:	2301      	movs	r3, #1
 8005774:	464a      	mov	r2, r9
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	f43f ae36 	beq.w	80053ee <_printf_float+0xbe>
 8005782:	f108 0801 	add.w	r8, r8, #1
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800578a:	1a5b      	subs	r3, r3, r1
 800578c:	4543      	cmp	r3, r8
 800578e:	dcf0      	bgt.n	8005772 <_printf_float+0x442>
 8005790:	e6f8      	b.n	8005584 <_printf_float+0x254>
 8005792:	f04f 0800 	mov.w	r8, #0
 8005796:	f104 0919 	add.w	r9, r4, #25
 800579a:	e7f4      	b.n	8005786 <_printf_float+0x456>

0800579c <_printf_common>:
 800579c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	4616      	mov	r6, r2
 80057a2:	4699      	mov	r9, r3
 80057a4:	688a      	ldr	r2, [r1, #8]
 80057a6:	690b      	ldr	r3, [r1, #16]
 80057a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bfb8      	it	lt
 80057b0:	4613      	movlt	r3, r2
 80057b2:	6033      	str	r3, [r6, #0]
 80057b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057b8:	4607      	mov	r7, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	b10a      	cbz	r2, 80057c2 <_printf_common+0x26>
 80057be:	3301      	adds	r3, #1
 80057c0:	6033      	str	r3, [r6, #0]
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	0699      	lsls	r1, r3, #26
 80057c6:	bf42      	ittt	mi
 80057c8:	6833      	ldrmi	r3, [r6, #0]
 80057ca:	3302      	addmi	r3, #2
 80057cc:	6033      	strmi	r3, [r6, #0]
 80057ce:	6825      	ldr	r5, [r4, #0]
 80057d0:	f015 0506 	ands.w	r5, r5, #6
 80057d4:	d106      	bne.n	80057e4 <_printf_common+0x48>
 80057d6:	f104 0a19 	add.w	sl, r4, #25
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	6832      	ldr	r2, [r6, #0]
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	42ab      	cmp	r3, r5
 80057e2:	dc26      	bgt.n	8005832 <_printf_common+0x96>
 80057e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057e8:	1e13      	subs	r3, r2, #0
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	bf18      	it	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	0692      	lsls	r2, r2, #26
 80057f2:	d42b      	bmi.n	800584c <_printf_common+0xb0>
 80057f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057f8:	4649      	mov	r1, r9
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c0      	blx	r8
 80057fe:	3001      	adds	r0, #1
 8005800:	d01e      	beq.n	8005840 <_printf_common+0xa4>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	f003 0306 	and.w	r3, r3, #6
 800580a:	2b04      	cmp	r3, #4
 800580c:	bf02      	ittt	eq
 800580e:	68e5      	ldreq	r5, [r4, #12]
 8005810:	6833      	ldreq	r3, [r6, #0]
 8005812:	1aed      	subeq	r5, r5, r3
 8005814:	68a3      	ldr	r3, [r4, #8]
 8005816:	bf0c      	ite	eq
 8005818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800581c:	2500      	movne	r5, #0
 800581e:	4293      	cmp	r3, r2
 8005820:	bfc4      	itt	gt
 8005822:	1a9b      	subgt	r3, r3, r2
 8005824:	18ed      	addgt	r5, r5, r3
 8005826:	2600      	movs	r6, #0
 8005828:	341a      	adds	r4, #26
 800582a:	42b5      	cmp	r5, r6
 800582c:	d11a      	bne.n	8005864 <_printf_common+0xc8>
 800582e:	2000      	movs	r0, #0
 8005830:	e008      	b.n	8005844 <_printf_common+0xa8>
 8005832:	2301      	movs	r3, #1
 8005834:	4652      	mov	r2, sl
 8005836:	4649      	mov	r1, r9
 8005838:	4638      	mov	r0, r7
 800583a:	47c0      	blx	r8
 800583c:	3001      	adds	r0, #1
 800583e:	d103      	bne.n	8005848 <_printf_common+0xac>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005848:	3501      	adds	r5, #1
 800584a:	e7c6      	b.n	80057da <_printf_common+0x3e>
 800584c:	18e1      	adds	r1, r4, r3
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	2030      	movs	r0, #48	; 0x30
 8005852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005856:	4422      	add	r2, r4
 8005858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800585c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005860:	3302      	adds	r3, #2
 8005862:	e7c7      	b.n	80057f4 <_printf_common+0x58>
 8005864:	2301      	movs	r3, #1
 8005866:	4622      	mov	r2, r4
 8005868:	4649      	mov	r1, r9
 800586a:	4638      	mov	r0, r7
 800586c:	47c0      	blx	r8
 800586e:	3001      	adds	r0, #1
 8005870:	d0e6      	beq.n	8005840 <_printf_common+0xa4>
 8005872:	3601      	adds	r6, #1
 8005874:	e7d9      	b.n	800582a <_printf_common+0x8e>
	...

08005878 <_printf_i>:
 8005878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	7e0f      	ldrb	r7, [r1, #24]
 800587e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005880:	2f78      	cmp	r7, #120	; 0x78
 8005882:	4691      	mov	r9, r2
 8005884:	4680      	mov	r8, r0
 8005886:	460c      	mov	r4, r1
 8005888:	469a      	mov	sl, r3
 800588a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800588e:	d807      	bhi.n	80058a0 <_printf_i+0x28>
 8005890:	2f62      	cmp	r7, #98	; 0x62
 8005892:	d80a      	bhi.n	80058aa <_printf_i+0x32>
 8005894:	2f00      	cmp	r7, #0
 8005896:	f000 80d4 	beq.w	8005a42 <_printf_i+0x1ca>
 800589a:	2f58      	cmp	r7, #88	; 0x58
 800589c:	f000 80c0 	beq.w	8005a20 <_printf_i+0x1a8>
 80058a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058a8:	e03a      	b.n	8005920 <_printf_i+0xa8>
 80058aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058ae:	2b15      	cmp	r3, #21
 80058b0:	d8f6      	bhi.n	80058a0 <_printf_i+0x28>
 80058b2:	a101      	add	r1, pc, #4	; (adr r1, 80058b8 <_printf_i+0x40>)
 80058b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058b8:	08005911 	.word	0x08005911
 80058bc:	08005925 	.word	0x08005925
 80058c0:	080058a1 	.word	0x080058a1
 80058c4:	080058a1 	.word	0x080058a1
 80058c8:	080058a1 	.word	0x080058a1
 80058cc:	080058a1 	.word	0x080058a1
 80058d0:	08005925 	.word	0x08005925
 80058d4:	080058a1 	.word	0x080058a1
 80058d8:	080058a1 	.word	0x080058a1
 80058dc:	080058a1 	.word	0x080058a1
 80058e0:	080058a1 	.word	0x080058a1
 80058e4:	08005a29 	.word	0x08005a29
 80058e8:	08005951 	.word	0x08005951
 80058ec:	080059e3 	.word	0x080059e3
 80058f0:	080058a1 	.word	0x080058a1
 80058f4:	080058a1 	.word	0x080058a1
 80058f8:	08005a4b 	.word	0x08005a4b
 80058fc:	080058a1 	.word	0x080058a1
 8005900:	08005951 	.word	0x08005951
 8005904:	080058a1 	.word	0x080058a1
 8005908:	080058a1 	.word	0x080058a1
 800590c:	080059eb 	.word	0x080059eb
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	602a      	str	r2, [r5, #0]
 8005918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800591c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005920:	2301      	movs	r3, #1
 8005922:	e09f      	b.n	8005a64 <_printf_i+0x1ec>
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	682b      	ldr	r3, [r5, #0]
 8005928:	0607      	lsls	r7, r0, #24
 800592a:	f103 0104 	add.w	r1, r3, #4
 800592e:	6029      	str	r1, [r5, #0]
 8005930:	d501      	bpl.n	8005936 <_printf_i+0xbe>
 8005932:	681e      	ldr	r6, [r3, #0]
 8005934:	e003      	b.n	800593e <_printf_i+0xc6>
 8005936:	0646      	lsls	r6, r0, #25
 8005938:	d5fb      	bpl.n	8005932 <_printf_i+0xba>
 800593a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800593e:	2e00      	cmp	r6, #0
 8005940:	da03      	bge.n	800594a <_printf_i+0xd2>
 8005942:	232d      	movs	r3, #45	; 0x2d
 8005944:	4276      	negs	r6, r6
 8005946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594a:	485a      	ldr	r0, [pc, #360]	; (8005ab4 <_printf_i+0x23c>)
 800594c:	230a      	movs	r3, #10
 800594e:	e012      	b.n	8005976 <_printf_i+0xfe>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	1d19      	adds	r1, r3, #4
 8005956:	6029      	str	r1, [r5, #0]
 8005958:	0605      	lsls	r5, r0, #24
 800595a:	d501      	bpl.n	8005960 <_printf_i+0xe8>
 800595c:	681e      	ldr	r6, [r3, #0]
 800595e:	e002      	b.n	8005966 <_printf_i+0xee>
 8005960:	0641      	lsls	r1, r0, #25
 8005962:	d5fb      	bpl.n	800595c <_printf_i+0xe4>
 8005964:	881e      	ldrh	r6, [r3, #0]
 8005966:	4853      	ldr	r0, [pc, #332]	; (8005ab4 <_printf_i+0x23c>)
 8005968:	2f6f      	cmp	r7, #111	; 0x6f
 800596a:	bf0c      	ite	eq
 800596c:	2308      	moveq	r3, #8
 800596e:	230a      	movne	r3, #10
 8005970:	2100      	movs	r1, #0
 8005972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005976:	6865      	ldr	r5, [r4, #4]
 8005978:	60a5      	str	r5, [r4, #8]
 800597a:	2d00      	cmp	r5, #0
 800597c:	bfa2      	ittt	ge
 800597e:	6821      	ldrge	r1, [r4, #0]
 8005980:	f021 0104 	bicge.w	r1, r1, #4
 8005984:	6021      	strge	r1, [r4, #0]
 8005986:	b90e      	cbnz	r6, 800598c <_printf_i+0x114>
 8005988:	2d00      	cmp	r5, #0
 800598a:	d04b      	beq.n	8005a24 <_printf_i+0x1ac>
 800598c:	4615      	mov	r5, r2
 800598e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005992:	fb03 6711 	mls	r7, r3, r1, r6
 8005996:	5dc7      	ldrb	r7, [r0, r7]
 8005998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800599c:	4637      	mov	r7, r6
 800599e:	42bb      	cmp	r3, r7
 80059a0:	460e      	mov	r6, r1
 80059a2:	d9f4      	bls.n	800598e <_printf_i+0x116>
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d10b      	bne.n	80059c0 <_printf_i+0x148>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	07de      	lsls	r6, r3, #31
 80059ac:	d508      	bpl.n	80059c0 <_printf_i+0x148>
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	6861      	ldr	r1, [r4, #4]
 80059b2:	4299      	cmp	r1, r3
 80059b4:	bfde      	ittt	le
 80059b6:	2330      	movle	r3, #48	; 0x30
 80059b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059c0:	1b52      	subs	r2, r2, r5
 80059c2:	6122      	str	r2, [r4, #16]
 80059c4:	f8cd a000 	str.w	sl, [sp]
 80059c8:	464b      	mov	r3, r9
 80059ca:	aa03      	add	r2, sp, #12
 80059cc:	4621      	mov	r1, r4
 80059ce:	4640      	mov	r0, r8
 80059d0:	f7ff fee4 	bl	800579c <_printf_common>
 80059d4:	3001      	adds	r0, #1
 80059d6:	d14a      	bne.n	8005a6e <_printf_i+0x1f6>
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	b004      	add	sp, #16
 80059de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	f043 0320 	orr.w	r3, r3, #32
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	4833      	ldr	r0, [pc, #204]	; (8005ab8 <_printf_i+0x240>)
 80059ec:	2778      	movs	r7, #120	; 0x78
 80059ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	6829      	ldr	r1, [r5, #0]
 80059f6:	061f      	lsls	r7, r3, #24
 80059f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80059fc:	d402      	bmi.n	8005a04 <_printf_i+0x18c>
 80059fe:	065f      	lsls	r7, r3, #25
 8005a00:	bf48      	it	mi
 8005a02:	b2b6      	uxthmi	r6, r6
 8005a04:	07df      	lsls	r7, r3, #31
 8005a06:	bf48      	it	mi
 8005a08:	f043 0320 	orrmi.w	r3, r3, #32
 8005a0c:	6029      	str	r1, [r5, #0]
 8005a0e:	bf48      	it	mi
 8005a10:	6023      	strmi	r3, [r4, #0]
 8005a12:	b91e      	cbnz	r6, 8005a1c <_printf_i+0x1a4>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	f023 0320 	bic.w	r3, r3, #32
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	e7a7      	b.n	8005970 <_printf_i+0xf8>
 8005a20:	4824      	ldr	r0, [pc, #144]	; (8005ab4 <_printf_i+0x23c>)
 8005a22:	e7e4      	b.n	80059ee <_printf_i+0x176>
 8005a24:	4615      	mov	r5, r2
 8005a26:	e7bd      	b.n	80059a4 <_printf_i+0x12c>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	6826      	ldr	r6, [r4, #0]
 8005a2c:	6961      	ldr	r1, [r4, #20]
 8005a2e:	1d18      	adds	r0, r3, #4
 8005a30:	6028      	str	r0, [r5, #0]
 8005a32:	0635      	lsls	r5, r6, #24
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	d501      	bpl.n	8005a3c <_printf_i+0x1c4>
 8005a38:	6019      	str	r1, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <_printf_i+0x1ca>
 8005a3c:	0670      	lsls	r0, r6, #25
 8005a3e:	d5fb      	bpl.n	8005a38 <_printf_i+0x1c0>
 8005a40:	8019      	strh	r1, [r3, #0]
 8005a42:	2300      	movs	r3, #0
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	4615      	mov	r5, r2
 8005a48:	e7bc      	b.n	80059c4 <_printf_i+0x14c>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	1d1a      	adds	r2, r3, #4
 8005a4e:	602a      	str	r2, [r5, #0]
 8005a50:	681d      	ldr	r5, [r3, #0]
 8005a52:	6862      	ldr	r2, [r4, #4]
 8005a54:	2100      	movs	r1, #0
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7fa fbba 	bl	80001d0 <memchr>
 8005a5c:	b108      	cbz	r0, 8005a62 <_printf_i+0x1ea>
 8005a5e:	1b40      	subs	r0, r0, r5
 8005a60:	6060      	str	r0, [r4, #4]
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	2300      	movs	r3, #0
 8005a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6c:	e7aa      	b.n	80059c4 <_printf_i+0x14c>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	462a      	mov	r2, r5
 8005a72:	4649      	mov	r1, r9
 8005a74:	4640      	mov	r0, r8
 8005a76:	47d0      	blx	sl
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d0ad      	beq.n	80059d8 <_printf_i+0x160>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	079b      	lsls	r3, r3, #30
 8005a80:	d413      	bmi.n	8005aaa <_printf_i+0x232>
 8005a82:	68e0      	ldr	r0, [r4, #12]
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	4298      	cmp	r0, r3
 8005a88:	bfb8      	it	lt
 8005a8a:	4618      	movlt	r0, r3
 8005a8c:	e7a6      	b.n	80059dc <_printf_i+0x164>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4632      	mov	r2, r6
 8005a92:	4649      	mov	r1, r9
 8005a94:	4640      	mov	r0, r8
 8005a96:	47d0      	blx	sl
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d09d      	beq.n	80059d8 <_printf_i+0x160>
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	68e3      	ldr	r3, [r4, #12]
 8005aa0:	9903      	ldr	r1, [sp, #12]
 8005aa2:	1a5b      	subs	r3, r3, r1
 8005aa4:	42ab      	cmp	r3, r5
 8005aa6:	dcf2      	bgt.n	8005a8e <_printf_i+0x216>
 8005aa8:	e7eb      	b.n	8005a82 <_printf_i+0x20a>
 8005aaa:	2500      	movs	r5, #0
 8005aac:	f104 0619 	add.w	r6, r4, #25
 8005ab0:	e7f5      	b.n	8005a9e <_printf_i+0x226>
 8005ab2:	bf00      	nop
 8005ab4:	08007ed6 	.word	0x08007ed6
 8005ab8:	08007ee7 	.word	0x08007ee7

08005abc <std>:
 8005abc:	2300      	movs	r3, #0
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aca:	6083      	str	r3, [r0, #8]
 8005acc:	8181      	strh	r1, [r0, #12]
 8005ace:	6643      	str	r3, [r0, #100]	; 0x64
 8005ad0:	81c2      	strh	r2, [r0, #14]
 8005ad2:	6183      	str	r3, [r0, #24]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	2208      	movs	r2, #8
 8005ad8:	305c      	adds	r0, #92	; 0x5c
 8005ada:	f000 f948 	bl	8005d6e <memset>
 8005ade:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <std+0x58>)
 8005ae0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <std+0x5c>)
 8005ae4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <std+0x60>)
 8005ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aea:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <std+0x64>)
 8005aec:	6323      	str	r3, [r4, #48]	; 0x30
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <std+0x68>)
 8005af0:	6224      	str	r4, [r4, #32]
 8005af2:	429c      	cmp	r4, r3
 8005af4:	d006      	beq.n	8005b04 <std+0x48>
 8005af6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005afa:	4294      	cmp	r4, r2
 8005afc:	d002      	beq.n	8005b04 <std+0x48>
 8005afe:	33d0      	adds	r3, #208	; 0xd0
 8005b00:	429c      	cmp	r4, r3
 8005b02:	d105      	bne.n	8005b10 <std+0x54>
 8005b04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0c:	f000 b9ce 	b.w	8005eac <__retarget_lock_init_recursive>
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	bf00      	nop
 8005b14:	08005ce9 	.word	0x08005ce9
 8005b18:	08005d0b 	.word	0x08005d0b
 8005b1c:	08005d43 	.word	0x08005d43
 8005b20:	08005d67 	.word	0x08005d67
 8005b24:	200002f4 	.word	0x200002f4

08005b28 <stdio_exit_handler>:
 8005b28:	4a02      	ldr	r2, [pc, #8]	; (8005b34 <stdio_exit_handler+0xc>)
 8005b2a:	4903      	ldr	r1, [pc, #12]	; (8005b38 <stdio_exit_handler+0x10>)
 8005b2c:	4803      	ldr	r0, [pc, #12]	; (8005b3c <stdio_exit_handler+0x14>)
 8005b2e:	f000 b869 	b.w	8005c04 <_fwalk_sglue>
 8005b32:	bf00      	nop
 8005b34:	2000000c 	.word	0x2000000c
 8005b38:	080076f9 	.word	0x080076f9
 8005b3c:	20000018 	.word	0x20000018

08005b40 <cleanup_stdio>:
 8005b40:	6841      	ldr	r1, [r0, #4]
 8005b42:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <cleanup_stdio+0x34>)
 8005b44:	4299      	cmp	r1, r3
 8005b46:	b510      	push	{r4, lr}
 8005b48:	4604      	mov	r4, r0
 8005b4a:	d001      	beq.n	8005b50 <cleanup_stdio+0x10>
 8005b4c:	f001 fdd4 	bl	80076f8 <_fflush_r>
 8005b50:	68a1      	ldr	r1, [r4, #8]
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <cleanup_stdio+0x38>)
 8005b54:	4299      	cmp	r1, r3
 8005b56:	d002      	beq.n	8005b5e <cleanup_stdio+0x1e>
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f001 fdcd 	bl	80076f8 <_fflush_r>
 8005b5e:	68e1      	ldr	r1, [r4, #12]
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <cleanup_stdio+0x3c>)
 8005b62:	4299      	cmp	r1, r3
 8005b64:	d004      	beq.n	8005b70 <cleanup_stdio+0x30>
 8005b66:	4620      	mov	r0, r4
 8005b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6c:	f001 bdc4 	b.w	80076f8 <_fflush_r>
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	bf00      	nop
 8005b74:	200002f4 	.word	0x200002f4
 8005b78:	2000035c 	.word	0x2000035c
 8005b7c:	200003c4 	.word	0x200003c4

08005b80 <global_stdio_init.part.0>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <global_stdio_init.part.0+0x30>)
 8005b84:	4c0b      	ldr	r4, [pc, #44]	; (8005bb4 <global_stdio_init.part.0+0x34>)
 8005b86:	4a0c      	ldr	r2, [pc, #48]	; (8005bb8 <global_stdio_init.part.0+0x38>)
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2104      	movs	r1, #4
 8005b90:	f7ff ff94 	bl	8005abc <std>
 8005b94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b98:	2201      	movs	r2, #1
 8005b9a:	2109      	movs	r1, #9
 8005b9c:	f7ff ff8e 	bl	8005abc <std>
 8005ba0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005baa:	2112      	movs	r1, #18
 8005bac:	f7ff bf86 	b.w	8005abc <std>
 8005bb0:	2000042c 	.word	0x2000042c
 8005bb4:	200002f4 	.word	0x200002f4
 8005bb8:	08005b29 	.word	0x08005b29

08005bbc <__sfp_lock_acquire>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <__sfp_lock_acquire+0x8>)
 8005bbe:	f000 b976 	b.w	8005eae <__retarget_lock_acquire_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	20000435 	.word	0x20000435

08005bc8 <__sfp_lock_release>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	; (8005bd0 <__sfp_lock_release+0x8>)
 8005bca:	f000 b971 	b.w	8005eb0 <__retarget_lock_release_recursive>
 8005bce:	bf00      	nop
 8005bd0:	20000435 	.word	0x20000435

08005bd4 <__sinit>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	f7ff fff0 	bl	8005bbc <__sfp_lock_acquire>
 8005bdc:	6a23      	ldr	r3, [r4, #32]
 8005bde:	b11b      	cbz	r3, 8005be8 <__sinit+0x14>
 8005be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be4:	f7ff bff0 	b.w	8005bc8 <__sfp_lock_release>
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <__sinit+0x28>)
 8005bea:	6223      	str	r3, [r4, #32]
 8005bec:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <__sinit+0x2c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f5      	bne.n	8005be0 <__sinit+0xc>
 8005bf4:	f7ff ffc4 	bl	8005b80 <global_stdio_init.part.0>
 8005bf8:	e7f2      	b.n	8005be0 <__sinit+0xc>
 8005bfa:	bf00      	nop
 8005bfc:	08005b41 	.word	0x08005b41
 8005c00:	2000042c 	.word	0x2000042c

08005c04 <_fwalk_sglue>:
 8005c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c08:	4607      	mov	r7, r0
 8005c0a:	4688      	mov	r8, r1
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	2600      	movs	r6, #0
 8005c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c14:	f1b9 0901 	subs.w	r9, r9, #1
 8005c18:	d505      	bpl.n	8005c26 <_fwalk_sglue+0x22>
 8005c1a:	6824      	ldr	r4, [r4, #0]
 8005c1c:	2c00      	cmp	r4, #0
 8005c1e:	d1f7      	bne.n	8005c10 <_fwalk_sglue+0xc>
 8005c20:	4630      	mov	r0, r6
 8005c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d907      	bls.n	8005c3c <_fwalk_sglue+0x38>
 8005c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c30:	3301      	adds	r3, #1
 8005c32:	d003      	beq.n	8005c3c <_fwalk_sglue+0x38>
 8005c34:	4629      	mov	r1, r5
 8005c36:	4638      	mov	r0, r7
 8005c38:	47c0      	blx	r8
 8005c3a:	4306      	orrs	r6, r0
 8005c3c:	3568      	adds	r5, #104	; 0x68
 8005c3e:	e7e9      	b.n	8005c14 <_fwalk_sglue+0x10>

08005c40 <sniprintf>:
 8005c40:	b40c      	push	{r2, r3}
 8005c42:	b530      	push	{r4, r5, lr}
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <sniprintf+0x64>)
 8005c46:	1e0c      	subs	r4, r1, #0
 8005c48:	681d      	ldr	r5, [r3, #0]
 8005c4a:	b09d      	sub	sp, #116	; 0x74
 8005c4c:	da08      	bge.n	8005c60 <sniprintf+0x20>
 8005c4e:	238b      	movs	r3, #139	; 0x8b
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295
 8005c56:	b01d      	add	sp, #116	; 0x74
 8005c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c5c:	b002      	add	sp, #8
 8005c5e:	4770      	bx	lr
 8005c60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005c64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c68:	bf14      	ite	ne
 8005c6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c6e:	4623      	moveq	r3, r4
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	9307      	str	r3, [sp, #28]
 8005c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c78:	9002      	str	r0, [sp, #8]
 8005c7a:	9006      	str	r0, [sp, #24]
 8005c7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c82:	ab21      	add	r3, sp, #132	; 0x84
 8005c84:	a902      	add	r1, sp, #8
 8005c86:	4628      	mov	r0, r5
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	f001 fbb1 	bl	80073f0 <_svfiprintf_r>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	bfbc      	itt	lt
 8005c92:	238b      	movlt	r3, #139	; 0x8b
 8005c94:	602b      	strlt	r3, [r5, #0]
 8005c96:	2c00      	cmp	r4, #0
 8005c98:	d0dd      	beq.n	8005c56 <sniprintf+0x16>
 8005c9a:	9b02      	ldr	r3, [sp, #8]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e7d9      	b.n	8005c56 <sniprintf+0x16>
 8005ca2:	bf00      	nop
 8005ca4:	20000064 	.word	0x20000064

08005ca8 <siprintf>:
 8005ca8:	b40e      	push	{r1, r2, r3}
 8005caa:	b500      	push	{lr}
 8005cac:	b09c      	sub	sp, #112	; 0x70
 8005cae:	ab1d      	add	r3, sp, #116	; 0x74
 8005cb0:	9002      	str	r0, [sp, #8]
 8005cb2:	9006      	str	r0, [sp, #24]
 8005cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cb8:	4809      	ldr	r0, [pc, #36]	; (8005ce0 <siprintf+0x38>)
 8005cba:	9107      	str	r1, [sp, #28]
 8005cbc:	9104      	str	r1, [sp, #16]
 8005cbe:	4909      	ldr	r1, [pc, #36]	; (8005ce4 <siprintf+0x3c>)
 8005cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc4:	9105      	str	r1, [sp, #20]
 8005cc6:	6800      	ldr	r0, [r0, #0]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	a902      	add	r1, sp, #8
 8005ccc:	f001 fb90 	bl	80073f0 <_svfiprintf_r>
 8005cd0:	9b02      	ldr	r3, [sp, #8]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	b01c      	add	sp, #112	; 0x70
 8005cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cdc:	b003      	add	sp, #12
 8005cde:	4770      	bx	lr
 8005ce0:	20000064 	.word	0x20000064
 8005ce4:	ffff0208 	.word	0xffff0208

08005ce8 <__sread>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	460c      	mov	r4, r1
 8005cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf0:	f000 f87e 	bl	8005df0 <_read_r>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	bfab      	itete	ge
 8005cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8005cfc:	181b      	addge	r3, r3, r0
 8005cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d02:	bfac      	ite	ge
 8005d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d06:	81a3      	strhlt	r3, [r4, #12]
 8005d08:	bd10      	pop	{r4, pc}

08005d0a <__swrite>:
 8005d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0e:	461f      	mov	r7, r3
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	05db      	lsls	r3, r3, #23
 8005d14:	4605      	mov	r5, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	4616      	mov	r6, r2
 8005d1a:	d505      	bpl.n	8005d28 <__swrite+0x1e>
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	2302      	movs	r3, #2
 8005d22:	2200      	movs	r2, #0
 8005d24:	f000 f852 	bl	8005dcc <_lseek_r>
 8005d28:	89a3      	ldrh	r3, [r4, #12]
 8005d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d32:	81a3      	strh	r3, [r4, #12]
 8005d34:	4632      	mov	r2, r6
 8005d36:	463b      	mov	r3, r7
 8005d38:	4628      	mov	r0, r5
 8005d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	f000 b879 	b.w	8005e34 <_write_r>

08005d42 <__sseek>:
 8005d42:	b510      	push	{r4, lr}
 8005d44:	460c      	mov	r4, r1
 8005d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4a:	f000 f83f 	bl	8005dcc <_lseek_r>
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	bf15      	itete	ne
 8005d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d5e:	81a3      	strheq	r3, [r4, #12]
 8005d60:	bf18      	it	ne
 8005d62:	81a3      	strhne	r3, [r4, #12]
 8005d64:	bd10      	pop	{r4, pc}

08005d66 <__sclose>:
 8005d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6a:	f000 b81f 	b.w	8005dac <_close_r>

08005d6e <memset>:
 8005d6e:	4402      	add	r2, r0
 8005d70:	4603      	mov	r3, r0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d100      	bne.n	8005d78 <memset+0xa>
 8005d76:	4770      	bx	lr
 8005d78:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7c:	e7f9      	b.n	8005d72 <memset+0x4>

08005d7e <strncpy>:
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	3901      	subs	r1, #1
 8005d82:	4603      	mov	r3, r0
 8005d84:	b132      	cbz	r2, 8005d94 <strncpy+0x16>
 8005d86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d8a:	f803 4b01 	strb.w	r4, [r3], #1
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	2c00      	cmp	r4, #0
 8005d92:	d1f7      	bne.n	8005d84 <strncpy+0x6>
 8005d94:	441a      	add	r2, r3
 8005d96:	2100      	movs	r1, #0
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d100      	bne.n	8005d9e <strncpy+0x20>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005da2:	e7f9      	b.n	8005d98 <strncpy+0x1a>

08005da4 <_localeconv_r>:
 8005da4:	4800      	ldr	r0, [pc, #0]	; (8005da8 <_localeconv_r+0x4>)
 8005da6:	4770      	bx	lr
 8005da8:	20000158 	.word	0x20000158

08005dac <_close_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_close_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb ff9d 	bl	8001cf6 <_close>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_close_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_close_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000430 	.word	0x20000430

08005dcc <_lseek_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d07      	ldr	r5, [pc, #28]	; (8005dec <_lseek_r+0x20>)
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	4608      	mov	r0, r1
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	602a      	str	r2, [r5, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f7fb ffb2 	bl	8001d44 <_lseek>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_lseek_r+0x1e>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_lseek_r+0x1e>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	20000430 	.word	0x20000430

08005df0 <_read_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d07      	ldr	r5, [pc, #28]	; (8005e10 <_read_r+0x20>)
 8005df4:	4604      	mov	r4, r0
 8005df6:	4608      	mov	r0, r1
 8005df8:	4611      	mov	r1, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f7fb ff40 	bl	8001c84 <_read>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_read_r+0x1e>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_read_r+0x1e>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20000430 	.word	0x20000430

08005e14 <_sbrk_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d06      	ldr	r5, [pc, #24]	; (8005e30 <_sbrk_r+0x1c>)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	f7fb ff9e 	bl	8001d60 <_sbrk>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_sbrk_r+0x1a>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_sbrk_r+0x1a>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20000430 	.word	0x20000430

08005e34 <_write_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d07      	ldr	r5, [pc, #28]	; (8005e54 <_write_r+0x20>)
 8005e38:	4604      	mov	r4, r0
 8005e3a:	4608      	mov	r0, r1
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	602a      	str	r2, [r5, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f7fb ff3b 	bl	8001cbe <_write>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_write_r+0x1e>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_write_r+0x1e>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	20000430 	.word	0x20000430

08005e58 <__errno>:
 8005e58:	4b01      	ldr	r3, [pc, #4]	; (8005e60 <__errno+0x8>)
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20000064 	.word	0x20000064

08005e64 <__libc_init_array>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4d0d      	ldr	r5, [pc, #52]	; (8005e9c <__libc_init_array+0x38>)
 8005e68:	4c0d      	ldr	r4, [pc, #52]	; (8005ea0 <__libc_init_array+0x3c>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	2600      	movs	r6, #0
 8005e70:	42a6      	cmp	r6, r4
 8005e72:	d109      	bne.n	8005e88 <__libc_init_array+0x24>
 8005e74:	4d0b      	ldr	r5, [pc, #44]	; (8005ea4 <__libc_init_array+0x40>)
 8005e76:	4c0c      	ldr	r4, [pc, #48]	; (8005ea8 <__libc_init_array+0x44>)
 8005e78:	f001 ffd2 	bl	8007e20 <_init>
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	2600      	movs	r6, #0
 8005e82:	42a6      	cmp	r6, r4
 8005e84:	d105      	bne.n	8005e92 <__libc_init_array+0x2e>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8c:	4798      	blx	r3
 8005e8e:	3601      	adds	r6, #1
 8005e90:	e7ee      	b.n	8005e70 <__libc_init_array+0xc>
 8005e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e96:	4798      	blx	r3
 8005e98:	3601      	adds	r6, #1
 8005e9a:	e7f2      	b.n	8005e82 <__libc_init_array+0x1e>
 8005e9c:	0800823c 	.word	0x0800823c
 8005ea0:	0800823c 	.word	0x0800823c
 8005ea4:	0800823c 	.word	0x0800823c
 8005ea8:	08008240 	.word	0x08008240

08005eac <__retarget_lock_init_recursive>:
 8005eac:	4770      	bx	lr

08005eae <__retarget_lock_acquire_recursive>:
 8005eae:	4770      	bx	lr

08005eb0 <__retarget_lock_release_recursive>:
 8005eb0:	4770      	bx	lr

08005eb2 <quorem>:
 8005eb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb6:	6903      	ldr	r3, [r0, #16]
 8005eb8:	690c      	ldr	r4, [r1, #16]
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	db7e      	blt.n	8005fbe <quorem+0x10c>
 8005ec0:	3c01      	subs	r4, #1
 8005ec2:	f101 0814 	add.w	r8, r1, #20
 8005ec6:	f100 0514 	add.w	r5, r0, #20
 8005eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ed4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	429a      	cmp	r2, r3
 8005edc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ee0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ee4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ee8:	d331      	bcc.n	8005f4e <quorem+0x9c>
 8005eea:	f04f 0e00 	mov.w	lr, #0
 8005eee:	4640      	mov	r0, r8
 8005ef0:	46ac      	mov	ip, r5
 8005ef2:	46f2      	mov	sl, lr
 8005ef4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ef8:	b293      	uxth	r3, r2
 8005efa:	fb06 e303 	mla	r3, r6, r3, lr
 8005efe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f02:	0c1a      	lsrs	r2, r3, #16
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ebaa 0303 	sub.w	r3, sl, r3
 8005f0a:	f8dc a000 	ldr.w	sl, [ip]
 8005f0e:	fa13 f38a 	uxtah	r3, r3, sl
 8005f12:	fb06 220e 	mla	r2, r6, lr, r2
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	9b00      	ldr	r3, [sp, #0]
 8005f1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f1e:	b292      	uxth	r2, r2
 8005f20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f28:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f2c:	4581      	cmp	r9, r0
 8005f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f32:	f84c 3b04 	str.w	r3, [ip], #4
 8005f36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f3a:	d2db      	bcs.n	8005ef4 <quorem+0x42>
 8005f3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f40:	b92b      	cbnz	r3, 8005f4e <quorem+0x9c>
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	3b04      	subs	r3, #4
 8005f46:	429d      	cmp	r5, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	d32c      	bcc.n	8005fa6 <quorem+0xf4>
 8005f4c:	613c      	str	r4, [r7, #16]
 8005f4e:	4638      	mov	r0, r7
 8005f50:	f001 f8f4 	bl	800713c <__mcmp>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	db22      	blt.n	8005f9e <quorem+0xec>
 8005f58:	3601      	adds	r6, #1
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f62:	f8d1 c000 	ldr.w	ip, [r1]
 8005f66:	b293      	uxth	r3, r2
 8005f68:	1ac3      	subs	r3, r0, r3
 8005f6a:	0c12      	lsrs	r2, r2, #16
 8005f6c:	fa13 f38c 	uxtah	r3, r3, ip
 8005f70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f7e:	45c1      	cmp	r9, r8
 8005f80:	f841 3b04 	str.w	r3, [r1], #4
 8005f84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f88:	d2e9      	bcs.n	8005f5e <quorem+0xac>
 8005f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f92:	b922      	cbnz	r2, 8005f9e <quorem+0xec>
 8005f94:	3b04      	subs	r3, #4
 8005f96:	429d      	cmp	r5, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	d30a      	bcc.n	8005fb2 <quorem+0x100>
 8005f9c:	613c      	str	r4, [r7, #16]
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	b003      	add	sp, #12
 8005fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	d1ce      	bne.n	8005f4c <quorem+0x9a>
 8005fae:	3c01      	subs	r4, #1
 8005fb0:	e7c9      	b.n	8005f46 <quorem+0x94>
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	d1f0      	bne.n	8005f9c <quorem+0xea>
 8005fba:	3c01      	subs	r4, #1
 8005fbc:	e7eb      	b.n	8005f96 <quorem+0xe4>
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	e7ee      	b.n	8005fa0 <quorem+0xee>
 8005fc2:	0000      	movs	r0, r0
 8005fc4:	0000      	movs	r0, r0
	...

08005fc8 <_dtoa_r>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	ed2d 8b04 	vpush	{d8-d9}
 8005fd0:	69c5      	ldr	r5, [r0, #28]
 8005fd2:	b093      	sub	sp, #76	; 0x4c
 8005fd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fd8:	ec57 6b10 	vmov	r6, r7, d0
 8005fdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fe0:	9107      	str	r1, [sp, #28]
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	920a      	str	r2, [sp, #40]	; 0x28
 8005fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fe8:	b975      	cbnz	r5, 8006008 <_dtoa_r+0x40>
 8005fea:	2010      	movs	r0, #16
 8005fec:	f7ff f84c 	bl	8005088 <malloc>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	61e0      	str	r0, [r4, #28]
 8005ff4:	b920      	cbnz	r0, 8006000 <_dtoa_r+0x38>
 8005ff6:	4bae      	ldr	r3, [pc, #696]	; (80062b0 <_dtoa_r+0x2e8>)
 8005ff8:	21ef      	movs	r1, #239	; 0xef
 8005ffa:	48ae      	ldr	r0, [pc, #696]	; (80062b4 <_dtoa_r+0x2ec>)
 8005ffc:	f001 fbcc 	bl	8007798 <__assert_func>
 8006000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006004:	6005      	str	r5, [r0, #0]
 8006006:	60c5      	str	r5, [r0, #12]
 8006008:	69e3      	ldr	r3, [r4, #28]
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	b151      	cbz	r1, 8006024 <_dtoa_r+0x5c>
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	604a      	str	r2, [r1, #4]
 8006012:	2301      	movs	r3, #1
 8006014:	4093      	lsls	r3, r2
 8006016:	608b      	str	r3, [r1, #8]
 8006018:	4620      	mov	r0, r4
 800601a:	f000 fe53 	bl	8006cc4 <_Bfree>
 800601e:	69e3      	ldr	r3, [r4, #28]
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	1e3b      	subs	r3, r7, #0
 8006026:	bfbb      	ittet	lt
 8006028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800602c:	9303      	strlt	r3, [sp, #12]
 800602e:	2300      	movge	r3, #0
 8006030:	2201      	movlt	r2, #1
 8006032:	bfac      	ite	ge
 8006034:	f8c8 3000 	strge.w	r3, [r8]
 8006038:	f8c8 2000 	strlt.w	r2, [r8]
 800603c:	4b9e      	ldr	r3, [pc, #632]	; (80062b8 <_dtoa_r+0x2f0>)
 800603e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006042:	ea33 0308 	bics.w	r3, r3, r8
 8006046:	d11b      	bne.n	8006080 <_dtoa_r+0xb8>
 8006048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800604a:	f242 730f 	movw	r3, #9999	; 0x270f
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006054:	4333      	orrs	r3, r6
 8006056:	f000 8593 	beq.w	8006b80 <_dtoa_r+0xbb8>
 800605a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800605c:	b963      	cbnz	r3, 8006078 <_dtoa_r+0xb0>
 800605e:	4b97      	ldr	r3, [pc, #604]	; (80062bc <_dtoa_r+0x2f4>)
 8006060:	e027      	b.n	80060b2 <_dtoa_r+0xea>
 8006062:	4b97      	ldr	r3, [pc, #604]	; (80062c0 <_dtoa_r+0x2f8>)
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	9800      	ldr	r0, [sp, #0]
 800606e:	b013      	add	sp, #76	; 0x4c
 8006070:	ecbd 8b04 	vpop	{d8-d9}
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006078:	4b90      	ldr	r3, [pc, #576]	; (80062bc <_dtoa_r+0x2f4>)
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	3303      	adds	r3, #3
 800607e:	e7f3      	b.n	8006068 <_dtoa_r+0xa0>
 8006080:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006084:	2200      	movs	r2, #0
 8006086:	ec51 0b17 	vmov	r0, r1, d7
 800608a:	eeb0 8a47 	vmov.f32	s16, s14
 800608e:	eef0 8a67 	vmov.f32	s17, s15
 8006092:	2300      	movs	r3, #0
 8006094:	f7fa fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006098:	4681      	mov	r9, r0
 800609a:	b160      	cbz	r0, 80060b6 <_dtoa_r+0xee>
 800609c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800609e:	2301      	movs	r3, #1
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8568 	beq.w	8006b7a <_dtoa_r+0xbb2>
 80060aa:	4b86      	ldr	r3, [pc, #536]	; (80062c4 <_dtoa_r+0x2fc>)
 80060ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	e7da      	b.n	800606c <_dtoa_r+0xa4>
 80060b6:	aa10      	add	r2, sp, #64	; 0x40
 80060b8:	a911      	add	r1, sp, #68	; 0x44
 80060ba:	4620      	mov	r0, r4
 80060bc:	eeb0 0a48 	vmov.f32	s0, s16
 80060c0:	eef0 0a68 	vmov.f32	s1, s17
 80060c4:	f001 f8e0 	bl	8007288 <__d2b>
 80060c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060cc:	4682      	mov	sl, r0
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	d07f      	beq.n	80061d2 <_dtoa_r+0x20a>
 80060d2:	ee18 3a90 	vmov	r3, s17
 80060d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060de:	ec51 0b18 	vmov	r0, r1, d8
 80060e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060ee:	4619      	mov	r1, r3
 80060f0:	2200      	movs	r2, #0
 80060f2:	4b75      	ldr	r3, [pc, #468]	; (80062c8 <_dtoa_r+0x300>)
 80060f4:	f7fa f8c8 	bl	8000288 <__aeabi_dsub>
 80060f8:	a367      	add	r3, pc, #412	; (adr r3, 8006298 <_dtoa_r+0x2d0>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa fa7b 	bl	80005f8 <__aeabi_dmul>
 8006102:	a367      	add	r3, pc, #412	; (adr r3, 80062a0 <_dtoa_r+0x2d8>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa f8c0 	bl	800028c <__adddf3>
 800610c:	4606      	mov	r6, r0
 800610e:	4628      	mov	r0, r5
 8006110:	460f      	mov	r7, r1
 8006112:	f7fa fa07 	bl	8000524 <__aeabi_i2d>
 8006116:	a364      	add	r3, pc, #400	; (adr r3, 80062a8 <_dtoa_r+0x2e0>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	f7fa fa6c 	bl	80005f8 <__aeabi_dmul>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4630      	mov	r0, r6
 8006126:	4639      	mov	r1, r7
 8006128:	f7fa f8b0 	bl	800028c <__adddf3>
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	f7fa fd12 	bl	8000b58 <__aeabi_d2iz>
 8006134:	2200      	movs	r2, #0
 8006136:	4683      	mov	fp, r0
 8006138:	2300      	movs	r3, #0
 800613a:	4630      	mov	r0, r6
 800613c:	4639      	mov	r1, r7
 800613e:	f7fa fccd 	bl	8000adc <__aeabi_dcmplt>
 8006142:	b148      	cbz	r0, 8006158 <_dtoa_r+0x190>
 8006144:	4658      	mov	r0, fp
 8006146:	f7fa f9ed 	bl	8000524 <__aeabi_i2d>
 800614a:	4632      	mov	r2, r6
 800614c:	463b      	mov	r3, r7
 800614e:	f7fa fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006152:	b908      	cbnz	r0, 8006158 <_dtoa_r+0x190>
 8006154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006158:	f1bb 0f16 	cmp.w	fp, #22
 800615c:	d857      	bhi.n	800620e <_dtoa_r+0x246>
 800615e:	4b5b      	ldr	r3, [pc, #364]	; (80062cc <_dtoa_r+0x304>)
 8006160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	ec51 0b18 	vmov	r0, r1, d8
 800616c:	f7fa fcb6 	bl	8000adc <__aeabi_dcmplt>
 8006170:	2800      	cmp	r0, #0
 8006172:	d04e      	beq.n	8006212 <_dtoa_r+0x24a>
 8006174:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006178:	2300      	movs	r3, #0
 800617a:	930c      	str	r3, [sp, #48]	; 0x30
 800617c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800617e:	1b5b      	subs	r3, r3, r5
 8006180:	1e5a      	subs	r2, r3, #1
 8006182:	bf45      	ittet	mi
 8006184:	f1c3 0301 	rsbmi	r3, r3, #1
 8006188:	9305      	strmi	r3, [sp, #20]
 800618a:	2300      	movpl	r3, #0
 800618c:	2300      	movmi	r3, #0
 800618e:	9206      	str	r2, [sp, #24]
 8006190:	bf54      	ite	pl
 8006192:	9305      	strpl	r3, [sp, #20]
 8006194:	9306      	strmi	r3, [sp, #24]
 8006196:	f1bb 0f00 	cmp.w	fp, #0
 800619a:	db3c      	blt.n	8006216 <_dtoa_r+0x24e>
 800619c:	9b06      	ldr	r3, [sp, #24]
 800619e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80061a2:	445b      	add	r3, fp
 80061a4:	9306      	str	r3, [sp, #24]
 80061a6:	2300      	movs	r3, #0
 80061a8:	9308      	str	r3, [sp, #32]
 80061aa:	9b07      	ldr	r3, [sp, #28]
 80061ac:	2b09      	cmp	r3, #9
 80061ae:	d868      	bhi.n	8006282 <_dtoa_r+0x2ba>
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	bfc4      	itt	gt
 80061b4:	3b04      	subgt	r3, #4
 80061b6:	9307      	strgt	r3, [sp, #28]
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	f1a3 0302 	sub.w	r3, r3, #2
 80061be:	bfcc      	ite	gt
 80061c0:	2500      	movgt	r5, #0
 80061c2:	2501      	movle	r5, #1
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	f200 8085 	bhi.w	80062d4 <_dtoa_r+0x30c>
 80061ca:	e8df f003 	tbb	[pc, r3]
 80061ce:	3b2e      	.short	0x3b2e
 80061d0:	5839      	.short	0x5839
 80061d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061d6:	441d      	add	r5, r3
 80061d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061dc:	2b20      	cmp	r3, #32
 80061de:	bfc1      	itttt	gt
 80061e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80061e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061f0:	bfd6      	itet	le
 80061f2:	f1c3 0320 	rsble	r3, r3, #32
 80061f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80061fa:	fa06 f003 	lslle.w	r0, r6, r3
 80061fe:	f7fa f981 	bl	8000504 <__aeabi_ui2d>
 8006202:	2201      	movs	r2, #1
 8006204:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006208:	3d01      	subs	r5, #1
 800620a:	920e      	str	r2, [sp, #56]	; 0x38
 800620c:	e76f      	b.n	80060ee <_dtoa_r+0x126>
 800620e:	2301      	movs	r3, #1
 8006210:	e7b3      	b.n	800617a <_dtoa_r+0x1b2>
 8006212:	900c      	str	r0, [sp, #48]	; 0x30
 8006214:	e7b2      	b.n	800617c <_dtoa_r+0x1b4>
 8006216:	9b05      	ldr	r3, [sp, #20]
 8006218:	eba3 030b 	sub.w	r3, r3, fp
 800621c:	9305      	str	r3, [sp, #20]
 800621e:	f1cb 0300 	rsb	r3, fp, #0
 8006222:	9308      	str	r3, [sp, #32]
 8006224:	2300      	movs	r3, #0
 8006226:	930b      	str	r3, [sp, #44]	; 0x2c
 8006228:	e7bf      	b.n	80061aa <_dtoa_r+0x1e2>
 800622a:	2300      	movs	r3, #0
 800622c:	9309      	str	r3, [sp, #36]	; 0x24
 800622e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	dc52      	bgt.n	80062da <_dtoa_r+0x312>
 8006234:	2301      	movs	r3, #1
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	461a      	mov	r2, r3
 800623c:	920a      	str	r2, [sp, #40]	; 0x28
 800623e:	e00b      	b.n	8006258 <_dtoa_r+0x290>
 8006240:	2301      	movs	r3, #1
 8006242:	e7f3      	b.n	800622c <_dtoa_r+0x264>
 8006244:	2300      	movs	r3, #0
 8006246:	9309      	str	r3, [sp, #36]	; 0x24
 8006248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800624a:	445b      	add	r3, fp
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	3301      	adds	r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	9304      	str	r3, [sp, #16]
 8006254:	bfb8      	it	lt
 8006256:	2301      	movlt	r3, #1
 8006258:	69e0      	ldr	r0, [r4, #28]
 800625a:	2100      	movs	r1, #0
 800625c:	2204      	movs	r2, #4
 800625e:	f102 0614 	add.w	r6, r2, #20
 8006262:	429e      	cmp	r6, r3
 8006264:	d93d      	bls.n	80062e2 <_dtoa_r+0x31a>
 8006266:	6041      	str	r1, [r0, #4]
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fceb 	bl	8006c44 <_Balloc>
 800626e:	9000      	str	r0, [sp, #0]
 8006270:	2800      	cmp	r0, #0
 8006272:	d139      	bne.n	80062e8 <_dtoa_r+0x320>
 8006274:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <_dtoa_r+0x308>)
 8006276:	4602      	mov	r2, r0
 8006278:	f240 11af 	movw	r1, #431	; 0x1af
 800627c:	e6bd      	b.n	8005ffa <_dtoa_r+0x32>
 800627e:	2301      	movs	r3, #1
 8006280:	e7e1      	b.n	8006246 <_dtoa_r+0x27e>
 8006282:	2501      	movs	r5, #1
 8006284:	2300      	movs	r3, #0
 8006286:	9307      	str	r3, [sp, #28]
 8006288:	9509      	str	r5, [sp, #36]	; 0x24
 800628a:	f04f 33ff 	mov.w	r3, #4294967295
 800628e:	9301      	str	r3, [sp, #4]
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	2200      	movs	r2, #0
 8006294:	2312      	movs	r3, #18
 8006296:	e7d1      	b.n	800623c <_dtoa_r+0x274>
 8006298:	636f4361 	.word	0x636f4361
 800629c:	3fd287a7 	.word	0x3fd287a7
 80062a0:	8b60c8b3 	.word	0x8b60c8b3
 80062a4:	3fc68a28 	.word	0x3fc68a28
 80062a8:	509f79fb 	.word	0x509f79fb
 80062ac:	3fd34413 	.word	0x3fd34413
 80062b0:	08007f05 	.word	0x08007f05
 80062b4:	08007f1c 	.word	0x08007f1c
 80062b8:	7ff00000 	.word	0x7ff00000
 80062bc:	08007f01 	.word	0x08007f01
 80062c0:	08007ef8 	.word	0x08007ef8
 80062c4:	08007ed5 	.word	0x08007ed5
 80062c8:	3ff80000 	.word	0x3ff80000
 80062cc:	08008008 	.word	0x08008008
 80062d0:	08007f74 	.word	0x08007f74
 80062d4:	2301      	movs	r3, #1
 80062d6:	9309      	str	r3, [sp, #36]	; 0x24
 80062d8:	e7d7      	b.n	800628a <_dtoa_r+0x2c2>
 80062da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	e7ba      	b.n	8006258 <_dtoa_r+0x290>
 80062e2:	3101      	adds	r1, #1
 80062e4:	0052      	lsls	r2, r2, #1
 80062e6:	e7ba      	b.n	800625e <_dtoa_r+0x296>
 80062e8:	69e3      	ldr	r3, [r4, #28]
 80062ea:	9a00      	ldr	r2, [sp, #0]
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	9b04      	ldr	r3, [sp, #16]
 80062f0:	2b0e      	cmp	r3, #14
 80062f2:	f200 80a8 	bhi.w	8006446 <_dtoa_r+0x47e>
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	f000 80a5 	beq.w	8006446 <_dtoa_r+0x47e>
 80062fc:	f1bb 0f00 	cmp.w	fp, #0
 8006300:	dd38      	ble.n	8006374 <_dtoa_r+0x3ac>
 8006302:	4bc0      	ldr	r3, [pc, #768]	; (8006604 <_dtoa_r+0x63c>)
 8006304:	f00b 020f 	and.w	r2, fp, #15
 8006308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800630c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006310:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006314:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006318:	d019      	beq.n	800634e <_dtoa_r+0x386>
 800631a:	4bbb      	ldr	r3, [pc, #748]	; (8006608 <_dtoa_r+0x640>)
 800631c:	ec51 0b18 	vmov	r0, r1, d8
 8006320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006324:	f7fa fa92 	bl	800084c <__aeabi_ddiv>
 8006328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800632c:	f008 080f 	and.w	r8, r8, #15
 8006330:	2503      	movs	r5, #3
 8006332:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006608 <_dtoa_r+0x640>
 8006336:	f1b8 0f00 	cmp.w	r8, #0
 800633a:	d10a      	bne.n	8006352 <_dtoa_r+0x38a>
 800633c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006340:	4632      	mov	r2, r6
 8006342:	463b      	mov	r3, r7
 8006344:	f7fa fa82 	bl	800084c <__aeabi_ddiv>
 8006348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800634c:	e02b      	b.n	80063a6 <_dtoa_r+0x3de>
 800634e:	2502      	movs	r5, #2
 8006350:	e7ef      	b.n	8006332 <_dtoa_r+0x36a>
 8006352:	f018 0f01 	tst.w	r8, #1
 8006356:	d008      	beq.n	800636a <_dtoa_r+0x3a2>
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006360:	f7fa f94a 	bl	80005f8 <__aeabi_dmul>
 8006364:	3501      	adds	r5, #1
 8006366:	4606      	mov	r6, r0
 8006368:	460f      	mov	r7, r1
 800636a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800636e:	f109 0908 	add.w	r9, r9, #8
 8006372:	e7e0      	b.n	8006336 <_dtoa_r+0x36e>
 8006374:	f000 809f 	beq.w	80064b6 <_dtoa_r+0x4ee>
 8006378:	f1cb 0600 	rsb	r6, fp, #0
 800637c:	4ba1      	ldr	r3, [pc, #644]	; (8006604 <_dtoa_r+0x63c>)
 800637e:	4fa2      	ldr	r7, [pc, #648]	; (8006608 <_dtoa_r+0x640>)
 8006380:	f006 020f 	and.w	r2, r6, #15
 8006384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	ec51 0b18 	vmov	r0, r1, d8
 8006390:	f7fa f932 	bl	80005f8 <__aeabi_dmul>
 8006394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006398:	1136      	asrs	r6, r6, #4
 800639a:	2300      	movs	r3, #0
 800639c:	2502      	movs	r5, #2
 800639e:	2e00      	cmp	r6, #0
 80063a0:	d17e      	bne.n	80064a0 <_dtoa_r+0x4d8>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1d0      	bne.n	8006348 <_dtoa_r+0x380>
 80063a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8084 	beq.w	80064ba <_dtoa_r+0x4f2>
 80063b2:	4b96      	ldr	r3, [pc, #600]	; (800660c <_dtoa_r+0x644>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	4640      	mov	r0, r8
 80063b8:	4649      	mov	r1, r9
 80063ba:	f7fa fb8f 	bl	8000adc <__aeabi_dcmplt>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d07b      	beq.n	80064ba <_dtoa_r+0x4f2>
 80063c2:	9b04      	ldr	r3, [sp, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d078      	beq.n	80064ba <_dtoa_r+0x4f2>
 80063c8:	9b01      	ldr	r3, [sp, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	dd39      	ble.n	8006442 <_dtoa_r+0x47a>
 80063ce:	4b90      	ldr	r3, [pc, #576]	; (8006610 <_dtoa_r+0x648>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7fa f90f 	bl	80005f8 <__aeabi_dmul>
 80063da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063de:	9e01      	ldr	r6, [sp, #4]
 80063e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063e4:	3501      	adds	r5, #1
 80063e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063ea:	4628      	mov	r0, r5
 80063ec:	f7fa f89a 	bl	8000524 <__aeabi_i2d>
 80063f0:	4642      	mov	r2, r8
 80063f2:	464b      	mov	r3, r9
 80063f4:	f7fa f900 	bl	80005f8 <__aeabi_dmul>
 80063f8:	4b86      	ldr	r3, [pc, #536]	; (8006614 <_dtoa_r+0x64c>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	f7f9 ff46 	bl	800028c <__adddf3>
 8006400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006408:	9303      	str	r3, [sp, #12]
 800640a:	2e00      	cmp	r6, #0
 800640c:	d158      	bne.n	80064c0 <_dtoa_r+0x4f8>
 800640e:	4b82      	ldr	r3, [pc, #520]	; (8006618 <_dtoa_r+0x650>)
 8006410:	2200      	movs	r2, #0
 8006412:	4640      	mov	r0, r8
 8006414:	4649      	mov	r1, r9
 8006416:	f7f9 ff37 	bl	8000288 <__aeabi_dsub>
 800641a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800641e:	4680      	mov	r8, r0
 8006420:	4689      	mov	r9, r1
 8006422:	f7fa fb79 	bl	8000b18 <__aeabi_dcmpgt>
 8006426:	2800      	cmp	r0, #0
 8006428:	f040 8296 	bne.w	8006958 <_dtoa_r+0x990>
 800642c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006430:	4640      	mov	r0, r8
 8006432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006436:	4649      	mov	r1, r9
 8006438:	f7fa fb50 	bl	8000adc <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	f040 8289 	bne.w	8006954 <_dtoa_r+0x98c>
 8006442:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006448:	2b00      	cmp	r3, #0
 800644a:	f2c0 814e 	blt.w	80066ea <_dtoa_r+0x722>
 800644e:	f1bb 0f0e 	cmp.w	fp, #14
 8006452:	f300 814a 	bgt.w	80066ea <_dtoa_r+0x722>
 8006456:	4b6b      	ldr	r3, [pc, #428]	; (8006604 <_dtoa_r+0x63c>)
 8006458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800645c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006462:	2b00      	cmp	r3, #0
 8006464:	f280 80dc 	bge.w	8006620 <_dtoa_r+0x658>
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f300 80d8 	bgt.w	8006620 <_dtoa_r+0x658>
 8006470:	f040 826f 	bne.w	8006952 <_dtoa_r+0x98a>
 8006474:	4b68      	ldr	r3, [pc, #416]	; (8006618 <_dtoa_r+0x650>)
 8006476:	2200      	movs	r2, #0
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa f8bc 	bl	80005f8 <__aeabi_dmul>
 8006480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006484:	f7fa fb3e 	bl	8000b04 <__aeabi_dcmpge>
 8006488:	9e04      	ldr	r6, [sp, #16]
 800648a:	4637      	mov	r7, r6
 800648c:	2800      	cmp	r0, #0
 800648e:	f040 8245 	bne.w	800691c <_dtoa_r+0x954>
 8006492:	9d00      	ldr	r5, [sp, #0]
 8006494:	2331      	movs	r3, #49	; 0x31
 8006496:	f805 3b01 	strb.w	r3, [r5], #1
 800649a:	f10b 0b01 	add.w	fp, fp, #1
 800649e:	e241      	b.n	8006924 <_dtoa_r+0x95c>
 80064a0:	07f2      	lsls	r2, r6, #31
 80064a2:	d505      	bpl.n	80064b0 <_dtoa_r+0x4e8>
 80064a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a8:	f7fa f8a6 	bl	80005f8 <__aeabi_dmul>
 80064ac:	3501      	adds	r5, #1
 80064ae:	2301      	movs	r3, #1
 80064b0:	1076      	asrs	r6, r6, #1
 80064b2:	3708      	adds	r7, #8
 80064b4:	e773      	b.n	800639e <_dtoa_r+0x3d6>
 80064b6:	2502      	movs	r5, #2
 80064b8:	e775      	b.n	80063a6 <_dtoa_r+0x3de>
 80064ba:	9e04      	ldr	r6, [sp, #16]
 80064bc:	465f      	mov	r7, fp
 80064be:	e792      	b.n	80063e6 <_dtoa_r+0x41e>
 80064c0:	9900      	ldr	r1, [sp, #0]
 80064c2:	4b50      	ldr	r3, [pc, #320]	; (8006604 <_dtoa_r+0x63c>)
 80064c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064c8:	4431      	add	r1, r6
 80064ca:	9102      	str	r1, [sp, #8]
 80064cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ce:	eeb0 9a47 	vmov.f32	s18, s14
 80064d2:	eef0 9a67 	vmov.f32	s19, s15
 80064d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064de:	2900      	cmp	r1, #0
 80064e0:	d044      	beq.n	800656c <_dtoa_r+0x5a4>
 80064e2:	494e      	ldr	r1, [pc, #312]	; (800661c <_dtoa_r+0x654>)
 80064e4:	2000      	movs	r0, #0
 80064e6:	f7fa f9b1 	bl	800084c <__aeabi_ddiv>
 80064ea:	ec53 2b19 	vmov	r2, r3, d9
 80064ee:	f7f9 fecb 	bl	8000288 <__aeabi_dsub>
 80064f2:	9d00      	ldr	r5, [sp, #0]
 80064f4:	ec41 0b19 	vmov	d9, r0, r1
 80064f8:	4649      	mov	r1, r9
 80064fa:	4640      	mov	r0, r8
 80064fc:	f7fa fb2c 	bl	8000b58 <__aeabi_d2iz>
 8006500:	4606      	mov	r6, r0
 8006502:	f7fa f80f 	bl	8000524 <__aeabi_i2d>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	f7f9 febb 	bl	8000288 <__aeabi_dsub>
 8006512:	3630      	adds	r6, #48	; 0x30
 8006514:	f805 6b01 	strb.w	r6, [r5], #1
 8006518:	ec53 2b19 	vmov	r2, r3, d9
 800651c:	4680      	mov	r8, r0
 800651e:	4689      	mov	r9, r1
 8006520:	f7fa fadc 	bl	8000adc <__aeabi_dcmplt>
 8006524:	2800      	cmp	r0, #0
 8006526:	d164      	bne.n	80065f2 <_dtoa_r+0x62a>
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	4937      	ldr	r1, [pc, #220]	; (800660c <_dtoa_r+0x644>)
 800652e:	2000      	movs	r0, #0
 8006530:	f7f9 feaa 	bl	8000288 <__aeabi_dsub>
 8006534:	ec53 2b19 	vmov	r2, r3, d9
 8006538:	f7fa fad0 	bl	8000adc <__aeabi_dcmplt>
 800653c:	2800      	cmp	r0, #0
 800653e:	f040 80b6 	bne.w	80066ae <_dtoa_r+0x6e6>
 8006542:	9b02      	ldr	r3, [sp, #8]
 8006544:	429d      	cmp	r5, r3
 8006546:	f43f af7c 	beq.w	8006442 <_dtoa_r+0x47a>
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <_dtoa_r+0x648>)
 800654c:	ec51 0b19 	vmov	r0, r1, d9
 8006550:	2200      	movs	r2, #0
 8006552:	f7fa f851 	bl	80005f8 <__aeabi_dmul>
 8006556:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <_dtoa_r+0x648>)
 8006558:	ec41 0b19 	vmov	d9, r0, r1
 800655c:	2200      	movs	r2, #0
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7fa f849 	bl	80005f8 <__aeabi_dmul>
 8006566:	4680      	mov	r8, r0
 8006568:	4689      	mov	r9, r1
 800656a:	e7c5      	b.n	80064f8 <_dtoa_r+0x530>
 800656c:	ec51 0b17 	vmov	r0, r1, d7
 8006570:	f7fa f842 	bl	80005f8 <__aeabi_dmul>
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	9d00      	ldr	r5, [sp, #0]
 8006578:	930f      	str	r3, [sp, #60]	; 0x3c
 800657a:	ec41 0b19 	vmov	d9, r0, r1
 800657e:	4649      	mov	r1, r9
 8006580:	4640      	mov	r0, r8
 8006582:	f7fa fae9 	bl	8000b58 <__aeabi_d2iz>
 8006586:	4606      	mov	r6, r0
 8006588:	f7f9 ffcc 	bl	8000524 <__aeabi_i2d>
 800658c:	3630      	adds	r6, #48	; 0x30
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7f9 fe77 	bl	8000288 <__aeabi_dsub>
 800659a:	f805 6b01 	strb.w	r6, [r5], #1
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	429d      	cmp	r5, r3
 80065a2:	4680      	mov	r8, r0
 80065a4:	4689      	mov	r9, r1
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	d124      	bne.n	80065f6 <_dtoa_r+0x62e>
 80065ac:	4b1b      	ldr	r3, [pc, #108]	; (800661c <_dtoa_r+0x654>)
 80065ae:	ec51 0b19 	vmov	r0, r1, d9
 80065b2:	f7f9 fe6b 	bl	800028c <__adddf3>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7fa faab 	bl	8000b18 <__aeabi_dcmpgt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d173      	bne.n	80066ae <_dtoa_r+0x6e6>
 80065c6:	ec53 2b19 	vmov	r2, r3, d9
 80065ca:	4914      	ldr	r1, [pc, #80]	; (800661c <_dtoa_r+0x654>)
 80065cc:	2000      	movs	r0, #0
 80065ce:	f7f9 fe5b 	bl	8000288 <__aeabi_dsub>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4640      	mov	r0, r8
 80065d8:	4649      	mov	r1, r9
 80065da:	f7fa fa7f 	bl	8000adc <__aeabi_dcmplt>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f43f af2f 	beq.w	8006442 <_dtoa_r+0x47a>
 80065e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065e6:	1e6b      	subs	r3, r5, #1
 80065e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065ee:	2b30      	cmp	r3, #48	; 0x30
 80065f0:	d0f8      	beq.n	80065e4 <_dtoa_r+0x61c>
 80065f2:	46bb      	mov	fp, r7
 80065f4:	e04a      	b.n	800668c <_dtoa_r+0x6c4>
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <_dtoa_r+0x648>)
 80065f8:	f7f9 fffe 	bl	80005f8 <__aeabi_dmul>
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	e7bd      	b.n	800657e <_dtoa_r+0x5b6>
 8006602:	bf00      	nop
 8006604:	08008008 	.word	0x08008008
 8006608:	08007fe0 	.word	0x08007fe0
 800660c:	3ff00000 	.word	0x3ff00000
 8006610:	40240000 	.word	0x40240000
 8006614:	401c0000 	.word	0x401c0000
 8006618:	40140000 	.word	0x40140000
 800661c:	3fe00000 	.word	0x3fe00000
 8006620:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006624:	9d00      	ldr	r5, [sp, #0]
 8006626:	4642      	mov	r2, r8
 8006628:	464b      	mov	r3, r9
 800662a:	4630      	mov	r0, r6
 800662c:	4639      	mov	r1, r7
 800662e:	f7fa f90d 	bl	800084c <__aeabi_ddiv>
 8006632:	f7fa fa91 	bl	8000b58 <__aeabi_d2iz>
 8006636:	9001      	str	r0, [sp, #4]
 8006638:	f7f9 ff74 	bl	8000524 <__aeabi_i2d>
 800663c:	4642      	mov	r2, r8
 800663e:	464b      	mov	r3, r9
 8006640:	f7f9 ffda 	bl	80005f8 <__aeabi_dmul>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f7f9 fe1c 	bl	8000288 <__aeabi_dsub>
 8006650:	9e01      	ldr	r6, [sp, #4]
 8006652:	9f04      	ldr	r7, [sp, #16]
 8006654:	3630      	adds	r6, #48	; 0x30
 8006656:	f805 6b01 	strb.w	r6, [r5], #1
 800665a:	9e00      	ldr	r6, [sp, #0]
 800665c:	1bae      	subs	r6, r5, r6
 800665e:	42b7      	cmp	r7, r6
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	d134      	bne.n	80066d0 <_dtoa_r+0x708>
 8006666:	f7f9 fe11 	bl	800028c <__adddf3>
 800666a:	4642      	mov	r2, r8
 800666c:	464b      	mov	r3, r9
 800666e:	4606      	mov	r6, r0
 8006670:	460f      	mov	r7, r1
 8006672:	f7fa fa51 	bl	8000b18 <__aeabi_dcmpgt>
 8006676:	b9c8      	cbnz	r0, 80066ac <_dtoa_r+0x6e4>
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	4630      	mov	r0, r6
 800667e:	4639      	mov	r1, r7
 8006680:	f7fa fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006684:	b110      	cbz	r0, 800668c <_dtoa_r+0x6c4>
 8006686:	9b01      	ldr	r3, [sp, #4]
 8006688:	07db      	lsls	r3, r3, #31
 800668a:	d40f      	bmi.n	80066ac <_dtoa_r+0x6e4>
 800668c:	4651      	mov	r1, sl
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fb18 	bl	8006cc4 <_Bfree>
 8006694:	2300      	movs	r3, #0
 8006696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006698:	702b      	strb	r3, [r5, #0]
 800669a:	f10b 0301 	add.w	r3, fp, #1
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f43f ace2 	beq.w	800606c <_dtoa_r+0xa4>
 80066a8:	601d      	str	r5, [r3, #0]
 80066aa:	e4df      	b.n	800606c <_dtoa_r+0xa4>
 80066ac:	465f      	mov	r7, fp
 80066ae:	462b      	mov	r3, r5
 80066b0:	461d      	mov	r5, r3
 80066b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066b6:	2a39      	cmp	r2, #57	; 0x39
 80066b8:	d106      	bne.n	80066c8 <_dtoa_r+0x700>
 80066ba:	9a00      	ldr	r2, [sp, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d1f7      	bne.n	80066b0 <_dtoa_r+0x6e8>
 80066c0:	9900      	ldr	r1, [sp, #0]
 80066c2:	2230      	movs	r2, #48	; 0x30
 80066c4:	3701      	adds	r7, #1
 80066c6:	700a      	strb	r2, [r1, #0]
 80066c8:	781a      	ldrb	r2, [r3, #0]
 80066ca:	3201      	adds	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e790      	b.n	80065f2 <_dtoa_r+0x62a>
 80066d0:	4ba3      	ldr	r3, [pc, #652]	; (8006960 <_dtoa_r+0x998>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	f7f9 ff90 	bl	80005f8 <__aeabi_dmul>
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	4606      	mov	r6, r0
 80066de:	460f      	mov	r7, r1
 80066e0:	f7fa f9f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d09e      	beq.n	8006626 <_dtoa_r+0x65e>
 80066e8:	e7d0      	b.n	800668c <_dtoa_r+0x6c4>
 80066ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	f000 80ca 	beq.w	8006886 <_dtoa_r+0x8be>
 80066f2:	9a07      	ldr	r2, [sp, #28]
 80066f4:	2a01      	cmp	r2, #1
 80066f6:	f300 80ad 	bgt.w	8006854 <_dtoa_r+0x88c>
 80066fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066fc:	2a00      	cmp	r2, #0
 80066fe:	f000 80a5 	beq.w	800684c <_dtoa_r+0x884>
 8006702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006706:	9e08      	ldr	r6, [sp, #32]
 8006708:	9d05      	ldr	r5, [sp, #20]
 800670a:	9a05      	ldr	r2, [sp, #20]
 800670c:	441a      	add	r2, r3
 800670e:	9205      	str	r2, [sp, #20]
 8006710:	9a06      	ldr	r2, [sp, #24]
 8006712:	2101      	movs	r1, #1
 8006714:	441a      	add	r2, r3
 8006716:	4620      	mov	r0, r4
 8006718:	9206      	str	r2, [sp, #24]
 800671a:	f000 fb89 	bl	8006e30 <__i2b>
 800671e:	4607      	mov	r7, r0
 8006720:	b165      	cbz	r5, 800673c <_dtoa_r+0x774>
 8006722:	9b06      	ldr	r3, [sp, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	dd09      	ble.n	800673c <_dtoa_r+0x774>
 8006728:	42ab      	cmp	r3, r5
 800672a:	9a05      	ldr	r2, [sp, #20]
 800672c:	bfa8      	it	ge
 800672e:	462b      	movge	r3, r5
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	9205      	str	r2, [sp, #20]
 8006734:	9a06      	ldr	r2, [sp, #24]
 8006736:	1aed      	subs	r5, r5, r3
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	9306      	str	r3, [sp, #24]
 800673c:	9b08      	ldr	r3, [sp, #32]
 800673e:	b1f3      	cbz	r3, 800677e <_dtoa_r+0x7b6>
 8006740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80a3 	beq.w	800688e <_dtoa_r+0x8c6>
 8006748:	2e00      	cmp	r6, #0
 800674a:	dd10      	ble.n	800676e <_dtoa_r+0x7a6>
 800674c:	4639      	mov	r1, r7
 800674e:	4632      	mov	r2, r6
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fc2d 	bl	8006fb0 <__pow5mult>
 8006756:	4652      	mov	r2, sl
 8006758:	4601      	mov	r1, r0
 800675a:	4607      	mov	r7, r0
 800675c:	4620      	mov	r0, r4
 800675e:	f000 fb7d 	bl	8006e5c <__multiply>
 8006762:	4651      	mov	r1, sl
 8006764:	4680      	mov	r8, r0
 8006766:	4620      	mov	r0, r4
 8006768:	f000 faac 	bl	8006cc4 <_Bfree>
 800676c:	46c2      	mov	sl, r8
 800676e:	9b08      	ldr	r3, [sp, #32]
 8006770:	1b9a      	subs	r2, r3, r6
 8006772:	d004      	beq.n	800677e <_dtoa_r+0x7b6>
 8006774:	4651      	mov	r1, sl
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fc1a 	bl	8006fb0 <__pow5mult>
 800677c:	4682      	mov	sl, r0
 800677e:	2101      	movs	r1, #1
 8006780:	4620      	mov	r0, r4
 8006782:	f000 fb55 	bl	8006e30 <__i2b>
 8006786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006788:	2b00      	cmp	r3, #0
 800678a:	4606      	mov	r6, r0
 800678c:	f340 8081 	ble.w	8006892 <_dtoa_r+0x8ca>
 8006790:	461a      	mov	r2, r3
 8006792:	4601      	mov	r1, r0
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fc0b 	bl	8006fb0 <__pow5mult>
 800679a:	9b07      	ldr	r3, [sp, #28]
 800679c:	2b01      	cmp	r3, #1
 800679e:	4606      	mov	r6, r0
 80067a0:	dd7a      	ble.n	8006898 <_dtoa_r+0x8d0>
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	6933      	ldr	r3, [r6, #16]
 80067a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067ac:	6918      	ldr	r0, [r3, #16]
 80067ae:	f000 faf1 	bl	8006d94 <__hi0bits>
 80067b2:	f1c0 0020 	rsb	r0, r0, #32
 80067b6:	9b06      	ldr	r3, [sp, #24]
 80067b8:	4418      	add	r0, r3
 80067ba:	f010 001f 	ands.w	r0, r0, #31
 80067be:	f000 8094 	beq.w	80068ea <_dtoa_r+0x922>
 80067c2:	f1c0 0320 	rsb	r3, r0, #32
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	f340 8085 	ble.w	80068d6 <_dtoa_r+0x90e>
 80067cc:	9b05      	ldr	r3, [sp, #20]
 80067ce:	f1c0 001c 	rsb	r0, r0, #28
 80067d2:	4403      	add	r3, r0
 80067d4:	9305      	str	r3, [sp, #20]
 80067d6:	9b06      	ldr	r3, [sp, #24]
 80067d8:	4403      	add	r3, r0
 80067da:	4405      	add	r5, r0
 80067dc:	9306      	str	r3, [sp, #24]
 80067de:	9b05      	ldr	r3, [sp, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dd05      	ble.n	80067f0 <_dtoa_r+0x828>
 80067e4:	4651      	mov	r1, sl
 80067e6:	461a      	mov	r2, r3
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fc3b 	bl	8007064 <__lshift>
 80067ee:	4682      	mov	sl, r0
 80067f0:	9b06      	ldr	r3, [sp, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	dd05      	ble.n	8006802 <_dtoa_r+0x83a>
 80067f6:	4631      	mov	r1, r6
 80067f8:	461a      	mov	r2, r3
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 fc32 	bl	8007064 <__lshift>
 8006800:	4606      	mov	r6, r0
 8006802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006804:	2b00      	cmp	r3, #0
 8006806:	d072      	beq.n	80068ee <_dtoa_r+0x926>
 8006808:	4631      	mov	r1, r6
 800680a:	4650      	mov	r0, sl
 800680c:	f000 fc96 	bl	800713c <__mcmp>
 8006810:	2800      	cmp	r0, #0
 8006812:	da6c      	bge.n	80068ee <_dtoa_r+0x926>
 8006814:	2300      	movs	r3, #0
 8006816:	4651      	mov	r1, sl
 8006818:	220a      	movs	r2, #10
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fa74 	bl	8006d08 <__multadd>
 8006820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006822:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006826:	4682      	mov	sl, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 81b0 	beq.w	8006b8e <_dtoa_r+0xbc6>
 800682e:	2300      	movs	r3, #0
 8006830:	4639      	mov	r1, r7
 8006832:	220a      	movs	r2, #10
 8006834:	4620      	mov	r0, r4
 8006836:	f000 fa67 	bl	8006d08 <__multadd>
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	4607      	mov	r7, r0
 8006840:	f300 8096 	bgt.w	8006970 <_dtoa_r+0x9a8>
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	2b02      	cmp	r3, #2
 8006848:	dc59      	bgt.n	80068fe <_dtoa_r+0x936>
 800684a:	e091      	b.n	8006970 <_dtoa_r+0x9a8>
 800684c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800684e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006852:	e758      	b.n	8006706 <_dtoa_r+0x73e>
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	1e5e      	subs	r6, r3, #1
 8006858:	9b08      	ldr	r3, [sp, #32]
 800685a:	42b3      	cmp	r3, r6
 800685c:	bfbf      	itttt	lt
 800685e:	9b08      	ldrlt	r3, [sp, #32]
 8006860:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006862:	9608      	strlt	r6, [sp, #32]
 8006864:	1af3      	sublt	r3, r6, r3
 8006866:	bfb4      	ite	lt
 8006868:	18d2      	addlt	r2, r2, r3
 800686a:	1b9e      	subge	r6, r3, r6
 800686c:	9b04      	ldr	r3, [sp, #16]
 800686e:	bfbc      	itt	lt
 8006870:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006872:	2600      	movlt	r6, #0
 8006874:	2b00      	cmp	r3, #0
 8006876:	bfb7      	itett	lt
 8006878:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800687c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006880:	1a9d      	sublt	r5, r3, r2
 8006882:	2300      	movlt	r3, #0
 8006884:	e741      	b.n	800670a <_dtoa_r+0x742>
 8006886:	9e08      	ldr	r6, [sp, #32]
 8006888:	9d05      	ldr	r5, [sp, #20]
 800688a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800688c:	e748      	b.n	8006720 <_dtoa_r+0x758>
 800688e:	9a08      	ldr	r2, [sp, #32]
 8006890:	e770      	b.n	8006774 <_dtoa_r+0x7ac>
 8006892:	9b07      	ldr	r3, [sp, #28]
 8006894:	2b01      	cmp	r3, #1
 8006896:	dc19      	bgt.n	80068cc <_dtoa_r+0x904>
 8006898:	9b02      	ldr	r3, [sp, #8]
 800689a:	b9bb      	cbnz	r3, 80068cc <_dtoa_r+0x904>
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a2:	b99b      	cbnz	r3, 80068cc <_dtoa_r+0x904>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068aa:	0d1b      	lsrs	r3, r3, #20
 80068ac:	051b      	lsls	r3, r3, #20
 80068ae:	b183      	cbz	r3, 80068d2 <_dtoa_r+0x90a>
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	3301      	adds	r3, #1
 80068b4:	9305      	str	r3, [sp, #20]
 80068b6:	9b06      	ldr	r3, [sp, #24]
 80068b8:	3301      	adds	r3, #1
 80068ba:	9306      	str	r3, [sp, #24]
 80068bc:	f04f 0801 	mov.w	r8, #1
 80068c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f47f af6f 	bne.w	80067a6 <_dtoa_r+0x7de>
 80068c8:	2001      	movs	r0, #1
 80068ca:	e774      	b.n	80067b6 <_dtoa_r+0x7ee>
 80068cc:	f04f 0800 	mov.w	r8, #0
 80068d0:	e7f6      	b.n	80068c0 <_dtoa_r+0x8f8>
 80068d2:	4698      	mov	r8, r3
 80068d4:	e7f4      	b.n	80068c0 <_dtoa_r+0x8f8>
 80068d6:	d082      	beq.n	80067de <_dtoa_r+0x816>
 80068d8:	9a05      	ldr	r2, [sp, #20]
 80068da:	331c      	adds	r3, #28
 80068dc:	441a      	add	r2, r3
 80068de:	9205      	str	r2, [sp, #20]
 80068e0:	9a06      	ldr	r2, [sp, #24]
 80068e2:	441a      	add	r2, r3
 80068e4:	441d      	add	r5, r3
 80068e6:	9206      	str	r2, [sp, #24]
 80068e8:	e779      	b.n	80067de <_dtoa_r+0x816>
 80068ea:	4603      	mov	r3, r0
 80068ec:	e7f4      	b.n	80068d8 <_dtoa_r+0x910>
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dc37      	bgt.n	8006964 <_dtoa_r+0x99c>
 80068f4:	9b07      	ldr	r3, [sp, #28]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	dd34      	ble.n	8006964 <_dtoa_r+0x99c>
 80068fa:	9b04      	ldr	r3, [sp, #16]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	b963      	cbnz	r3, 800691c <_dtoa_r+0x954>
 8006902:	4631      	mov	r1, r6
 8006904:	2205      	movs	r2, #5
 8006906:	4620      	mov	r0, r4
 8006908:	f000 f9fe 	bl	8006d08 <__multadd>
 800690c:	4601      	mov	r1, r0
 800690e:	4606      	mov	r6, r0
 8006910:	4650      	mov	r0, sl
 8006912:	f000 fc13 	bl	800713c <__mcmp>
 8006916:	2800      	cmp	r0, #0
 8006918:	f73f adbb 	bgt.w	8006492 <_dtoa_r+0x4ca>
 800691c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691e:	9d00      	ldr	r5, [sp, #0]
 8006920:	ea6f 0b03 	mvn.w	fp, r3
 8006924:	f04f 0800 	mov.w	r8, #0
 8006928:	4631      	mov	r1, r6
 800692a:	4620      	mov	r0, r4
 800692c:	f000 f9ca 	bl	8006cc4 <_Bfree>
 8006930:	2f00      	cmp	r7, #0
 8006932:	f43f aeab 	beq.w	800668c <_dtoa_r+0x6c4>
 8006936:	f1b8 0f00 	cmp.w	r8, #0
 800693a:	d005      	beq.n	8006948 <_dtoa_r+0x980>
 800693c:	45b8      	cmp	r8, r7
 800693e:	d003      	beq.n	8006948 <_dtoa_r+0x980>
 8006940:	4641      	mov	r1, r8
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f9be 	bl	8006cc4 <_Bfree>
 8006948:	4639      	mov	r1, r7
 800694a:	4620      	mov	r0, r4
 800694c:	f000 f9ba 	bl	8006cc4 <_Bfree>
 8006950:	e69c      	b.n	800668c <_dtoa_r+0x6c4>
 8006952:	2600      	movs	r6, #0
 8006954:	4637      	mov	r7, r6
 8006956:	e7e1      	b.n	800691c <_dtoa_r+0x954>
 8006958:	46bb      	mov	fp, r7
 800695a:	4637      	mov	r7, r6
 800695c:	e599      	b.n	8006492 <_dtoa_r+0x4ca>
 800695e:	bf00      	nop
 8006960:	40240000 	.word	0x40240000
 8006964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 80c8 	beq.w	8006afc <_dtoa_r+0xb34>
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	2d00      	cmp	r5, #0
 8006972:	dd05      	ble.n	8006980 <_dtoa_r+0x9b8>
 8006974:	4639      	mov	r1, r7
 8006976:	462a      	mov	r2, r5
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fb73 	bl	8007064 <__lshift>
 800697e:	4607      	mov	r7, r0
 8006980:	f1b8 0f00 	cmp.w	r8, #0
 8006984:	d05b      	beq.n	8006a3e <_dtoa_r+0xa76>
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	4620      	mov	r0, r4
 800698a:	f000 f95b 	bl	8006c44 <_Balloc>
 800698e:	4605      	mov	r5, r0
 8006990:	b928      	cbnz	r0, 800699e <_dtoa_r+0x9d6>
 8006992:	4b83      	ldr	r3, [pc, #524]	; (8006ba0 <_dtoa_r+0xbd8>)
 8006994:	4602      	mov	r2, r0
 8006996:	f240 21ef 	movw	r1, #751	; 0x2ef
 800699a:	f7ff bb2e 	b.w	8005ffa <_dtoa_r+0x32>
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	3202      	adds	r2, #2
 80069a2:	0092      	lsls	r2, r2, #2
 80069a4:	f107 010c 	add.w	r1, r7, #12
 80069a8:	300c      	adds	r0, #12
 80069aa:	f000 fee7 	bl	800777c <memcpy>
 80069ae:	2201      	movs	r2, #1
 80069b0:	4629      	mov	r1, r5
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 fb56 	bl	8007064 <__lshift>
 80069b8:	9b00      	ldr	r3, [sp, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069c2:	4413      	add	r3, r2
 80069c4:	9308      	str	r3, [sp, #32]
 80069c6:	9b02      	ldr	r3, [sp, #8]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	46b8      	mov	r8, r7
 80069ce:	9306      	str	r3, [sp, #24]
 80069d0:	4607      	mov	r7, r0
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	4631      	mov	r1, r6
 80069d6:	3b01      	subs	r3, #1
 80069d8:	4650      	mov	r0, sl
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	f7ff fa69 	bl	8005eb2 <quorem>
 80069e0:	4641      	mov	r1, r8
 80069e2:	9002      	str	r0, [sp, #8]
 80069e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069e8:	4650      	mov	r0, sl
 80069ea:	f000 fba7 	bl	800713c <__mcmp>
 80069ee:	463a      	mov	r2, r7
 80069f0:	9005      	str	r0, [sp, #20]
 80069f2:	4631      	mov	r1, r6
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fbbd 	bl	8007174 <__mdiff>
 80069fa:	68c2      	ldr	r2, [r0, #12]
 80069fc:	4605      	mov	r5, r0
 80069fe:	bb02      	cbnz	r2, 8006a42 <_dtoa_r+0xa7a>
 8006a00:	4601      	mov	r1, r0
 8006a02:	4650      	mov	r0, sl
 8006a04:	f000 fb9a 	bl	800713c <__mcmp>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a10:	f000 f958 	bl	8006cc4 <_Bfree>
 8006a14:	9b07      	ldr	r3, [sp, #28]
 8006a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a18:	9d04      	ldr	r5, [sp, #16]
 8006a1a:	ea43 0102 	orr.w	r1, r3, r2
 8006a1e:	9b06      	ldr	r3, [sp, #24]
 8006a20:	4319      	orrs	r1, r3
 8006a22:	d110      	bne.n	8006a46 <_dtoa_r+0xa7e>
 8006a24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a28:	d029      	beq.n	8006a7e <_dtoa_r+0xab6>
 8006a2a:	9b05      	ldr	r3, [sp, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dd02      	ble.n	8006a36 <_dtoa_r+0xa6e>
 8006a30:	9b02      	ldr	r3, [sp, #8]
 8006a32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	f883 9000 	strb.w	r9, [r3]
 8006a3c:	e774      	b.n	8006928 <_dtoa_r+0x960>
 8006a3e:	4638      	mov	r0, r7
 8006a40:	e7ba      	b.n	80069b8 <_dtoa_r+0x9f0>
 8006a42:	2201      	movs	r2, #1
 8006a44:	e7e1      	b.n	8006a0a <_dtoa_r+0xa42>
 8006a46:	9b05      	ldr	r3, [sp, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	db04      	blt.n	8006a56 <_dtoa_r+0xa8e>
 8006a4c:	9907      	ldr	r1, [sp, #28]
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	9906      	ldr	r1, [sp, #24]
 8006a52:	430b      	orrs	r3, r1
 8006a54:	d120      	bne.n	8006a98 <_dtoa_r+0xad0>
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	dded      	ble.n	8006a36 <_dtoa_r+0xa6e>
 8006a5a:	4651      	mov	r1, sl
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f000 fb00 	bl	8007064 <__lshift>
 8006a64:	4631      	mov	r1, r6
 8006a66:	4682      	mov	sl, r0
 8006a68:	f000 fb68 	bl	800713c <__mcmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dc03      	bgt.n	8006a78 <_dtoa_r+0xab0>
 8006a70:	d1e1      	bne.n	8006a36 <_dtoa_r+0xa6e>
 8006a72:	f019 0f01 	tst.w	r9, #1
 8006a76:	d0de      	beq.n	8006a36 <_dtoa_r+0xa6e>
 8006a78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a7c:	d1d8      	bne.n	8006a30 <_dtoa_r+0xa68>
 8006a7e:	9a01      	ldr	r2, [sp, #4]
 8006a80:	2339      	movs	r3, #57	; 0x39
 8006a82:	7013      	strb	r3, [r2, #0]
 8006a84:	462b      	mov	r3, r5
 8006a86:	461d      	mov	r5, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a8e:	2a39      	cmp	r2, #57	; 0x39
 8006a90:	d06c      	beq.n	8006b6c <_dtoa_r+0xba4>
 8006a92:	3201      	adds	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e747      	b.n	8006928 <_dtoa_r+0x960>
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	dd07      	ble.n	8006aac <_dtoa_r+0xae4>
 8006a9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006aa0:	d0ed      	beq.n	8006a7e <_dtoa_r+0xab6>
 8006aa2:	9a01      	ldr	r2, [sp, #4]
 8006aa4:	f109 0301 	add.w	r3, r9, #1
 8006aa8:	7013      	strb	r3, [r2, #0]
 8006aaa:	e73d      	b.n	8006928 <_dtoa_r+0x960>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	9a08      	ldr	r2, [sp, #32]
 8006ab0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d043      	beq.n	8006b40 <_dtoa_r+0xb78>
 8006ab8:	4651      	mov	r1, sl
 8006aba:	2300      	movs	r3, #0
 8006abc:	220a      	movs	r2, #10
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 f922 	bl	8006d08 <__multadd>
 8006ac4:	45b8      	cmp	r8, r7
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	f04f 020a 	mov.w	r2, #10
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	d107      	bne.n	8006ae6 <_dtoa_r+0xb1e>
 8006ad6:	f000 f917 	bl	8006d08 <__multadd>
 8006ada:	4680      	mov	r8, r0
 8006adc:	4607      	mov	r7, r0
 8006ade:	9b04      	ldr	r3, [sp, #16]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	e775      	b.n	80069d2 <_dtoa_r+0xa0a>
 8006ae6:	f000 f90f 	bl	8006d08 <__multadd>
 8006aea:	4639      	mov	r1, r7
 8006aec:	4680      	mov	r8, r0
 8006aee:	2300      	movs	r3, #0
 8006af0:	220a      	movs	r2, #10
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f908 	bl	8006d08 <__multadd>
 8006af8:	4607      	mov	r7, r0
 8006afa:	e7f0      	b.n	8006ade <_dtoa_r+0xb16>
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	9d00      	ldr	r5, [sp, #0]
 8006b02:	4631      	mov	r1, r6
 8006b04:	4650      	mov	r0, sl
 8006b06:	f7ff f9d4 	bl	8005eb2 <quorem>
 8006b0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	f805 9b01 	strb.w	r9, [r5], #1
 8006b14:	1aea      	subs	r2, r5, r3
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	dd07      	ble.n	8006b2c <_dtoa_r+0xb64>
 8006b1c:	4651      	mov	r1, sl
 8006b1e:	2300      	movs	r3, #0
 8006b20:	220a      	movs	r2, #10
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 f8f0 	bl	8006d08 <__multadd>
 8006b28:	4682      	mov	sl, r0
 8006b2a:	e7ea      	b.n	8006b02 <_dtoa_r+0xb3a>
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfc8      	it	gt
 8006b32:	461d      	movgt	r5, r3
 8006b34:	9b00      	ldr	r3, [sp, #0]
 8006b36:	bfd8      	it	le
 8006b38:	2501      	movle	r5, #1
 8006b3a:	441d      	add	r5, r3
 8006b3c:	f04f 0800 	mov.w	r8, #0
 8006b40:	4651      	mov	r1, sl
 8006b42:	2201      	movs	r2, #1
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fa8d 	bl	8007064 <__lshift>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	f000 faf5 	bl	800713c <__mcmp>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	dc96      	bgt.n	8006a84 <_dtoa_r+0xabc>
 8006b56:	d102      	bne.n	8006b5e <_dtoa_r+0xb96>
 8006b58:	f019 0f01 	tst.w	r9, #1
 8006b5c:	d192      	bne.n	8006a84 <_dtoa_r+0xabc>
 8006b5e:	462b      	mov	r3, r5
 8006b60:	461d      	mov	r5, r3
 8006b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b66:	2a30      	cmp	r2, #48	; 0x30
 8006b68:	d0fa      	beq.n	8006b60 <_dtoa_r+0xb98>
 8006b6a:	e6dd      	b.n	8006928 <_dtoa_r+0x960>
 8006b6c:	9a00      	ldr	r2, [sp, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d189      	bne.n	8006a86 <_dtoa_r+0xabe>
 8006b72:	f10b 0b01 	add.w	fp, fp, #1
 8006b76:	2331      	movs	r3, #49	; 0x31
 8006b78:	e796      	b.n	8006aa8 <_dtoa_r+0xae0>
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <_dtoa_r+0xbdc>)
 8006b7c:	f7ff ba99 	b.w	80060b2 <_dtoa_r+0xea>
 8006b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f47f aa6d 	bne.w	8006062 <_dtoa_r+0x9a>
 8006b88:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <_dtoa_r+0xbe0>)
 8006b8a:	f7ff ba92 	b.w	80060b2 <_dtoa_r+0xea>
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	dcb5      	bgt.n	8006b00 <_dtoa_r+0xb38>
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	f73f aeb1 	bgt.w	80068fe <_dtoa_r+0x936>
 8006b9c:	e7b0      	b.n	8006b00 <_dtoa_r+0xb38>
 8006b9e:	bf00      	nop
 8006ba0:	08007f74 	.word	0x08007f74
 8006ba4:	08007ed4 	.word	0x08007ed4
 8006ba8:	08007ef8 	.word	0x08007ef8

08006bac <_free_r>:
 8006bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bae:	2900      	cmp	r1, #0
 8006bb0:	d044      	beq.n	8006c3c <_free_r+0x90>
 8006bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb6:	9001      	str	r0, [sp, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f1a1 0404 	sub.w	r4, r1, #4
 8006bbe:	bfb8      	it	lt
 8006bc0:	18e4      	addlt	r4, r4, r3
 8006bc2:	f7fe fb09 	bl	80051d8 <__malloc_lock>
 8006bc6:	4a1e      	ldr	r2, [pc, #120]	; (8006c40 <_free_r+0x94>)
 8006bc8:	9801      	ldr	r0, [sp, #4]
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	b933      	cbnz	r3, 8006bdc <_free_r+0x30>
 8006bce:	6063      	str	r3, [r4, #4]
 8006bd0:	6014      	str	r4, [r2, #0]
 8006bd2:	b003      	add	sp, #12
 8006bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bd8:	f7fe bb04 	b.w	80051e4 <__malloc_unlock>
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	d908      	bls.n	8006bf2 <_free_r+0x46>
 8006be0:	6825      	ldr	r5, [r4, #0]
 8006be2:	1961      	adds	r1, r4, r5
 8006be4:	428b      	cmp	r3, r1
 8006be6:	bf01      	itttt	eq
 8006be8:	6819      	ldreq	r1, [r3, #0]
 8006bea:	685b      	ldreq	r3, [r3, #4]
 8006bec:	1949      	addeq	r1, r1, r5
 8006bee:	6021      	streq	r1, [r4, #0]
 8006bf0:	e7ed      	b.n	8006bce <_free_r+0x22>
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	b10b      	cbz	r3, 8006bfc <_free_r+0x50>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d9fa      	bls.n	8006bf2 <_free_r+0x46>
 8006bfc:	6811      	ldr	r1, [r2, #0]
 8006bfe:	1855      	adds	r5, r2, r1
 8006c00:	42a5      	cmp	r5, r4
 8006c02:	d10b      	bne.n	8006c1c <_free_r+0x70>
 8006c04:	6824      	ldr	r4, [r4, #0]
 8006c06:	4421      	add	r1, r4
 8006c08:	1854      	adds	r4, r2, r1
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	6011      	str	r1, [r2, #0]
 8006c0e:	d1e0      	bne.n	8006bd2 <_free_r+0x26>
 8006c10:	681c      	ldr	r4, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	6053      	str	r3, [r2, #4]
 8006c16:	440c      	add	r4, r1
 8006c18:	6014      	str	r4, [r2, #0]
 8006c1a:	e7da      	b.n	8006bd2 <_free_r+0x26>
 8006c1c:	d902      	bls.n	8006c24 <_free_r+0x78>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	6003      	str	r3, [r0, #0]
 8006c22:	e7d6      	b.n	8006bd2 <_free_r+0x26>
 8006c24:	6825      	ldr	r5, [r4, #0]
 8006c26:	1961      	adds	r1, r4, r5
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	bf04      	itt	eq
 8006c2c:	6819      	ldreq	r1, [r3, #0]
 8006c2e:	685b      	ldreq	r3, [r3, #4]
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	bf04      	itt	eq
 8006c34:	1949      	addeq	r1, r1, r5
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	6054      	str	r4, [r2, #4]
 8006c3a:	e7ca      	b.n	8006bd2 <_free_r+0x26>
 8006c3c:	b003      	add	sp, #12
 8006c3e:	bd30      	pop	{r4, r5, pc}
 8006c40:	200002ec 	.word	0x200002ec

08006c44 <_Balloc>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	69c6      	ldr	r6, [r0, #28]
 8006c48:	4604      	mov	r4, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	b976      	cbnz	r6, 8006c6c <_Balloc+0x28>
 8006c4e:	2010      	movs	r0, #16
 8006c50:	f7fe fa1a 	bl	8005088 <malloc>
 8006c54:	4602      	mov	r2, r0
 8006c56:	61e0      	str	r0, [r4, #28]
 8006c58:	b920      	cbnz	r0, 8006c64 <_Balloc+0x20>
 8006c5a:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <_Balloc+0x78>)
 8006c5c:	4818      	ldr	r0, [pc, #96]	; (8006cc0 <_Balloc+0x7c>)
 8006c5e:	216b      	movs	r1, #107	; 0x6b
 8006c60:	f000 fd9a 	bl	8007798 <__assert_func>
 8006c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c68:	6006      	str	r6, [r0, #0]
 8006c6a:	60c6      	str	r6, [r0, #12]
 8006c6c:	69e6      	ldr	r6, [r4, #28]
 8006c6e:	68f3      	ldr	r3, [r6, #12]
 8006c70:	b183      	cbz	r3, 8006c94 <_Balloc+0x50>
 8006c72:	69e3      	ldr	r3, [r4, #28]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c7a:	b9b8      	cbnz	r0, 8006cac <_Balloc+0x68>
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c82:	1d72      	adds	r2, r6, #5
 8006c84:	0092      	lsls	r2, r2, #2
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 fda4 	bl	80077d4 <_calloc_r>
 8006c8c:	b160      	cbz	r0, 8006ca8 <_Balloc+0x64>
 8006c8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c92:	e00e      	b.n	8006cb2 <_Balloc+0x6e>
 8006c94:	2221      	movs	r2, #33	; 0x21
 8006c96:	2104      	movs	r1, #4
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fd9b 	bl	80077d4 <_calloc_r>
 8006c9e:	69e3      	ldr	r3, [r4, #28]
 8006ca0:	60f0      	str	r0, [r6, #12]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e4      	bne.n	8006c72 <_Balloc+0x2e>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	6802      	ldr	r2, [r0, #0]
 8006cae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cb8:	e7f7      	b.n	8006caa <_Balloc+0x66>
 8006cba:	bf00      	nop
 8006cbc:	08007f05 	.word	0x08007f05
 8006cc0:	08007f85 	.word	0x08007f85

08006cc4 <_Bfree>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	69c6      	ldr	r6, [r0, #28]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b976      	cbnz	r6, 8006cec <_Bfree+0x28>
 8006cce:	2010      	movs	r0, #16
 8006cd0:	f7fe f9da 	bl	8005088 <malloc>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	61e8      	str	r0, [r5, #28]
 8006cd8:	b920      	cbnz	r0, 8006ce4 <_Bfree+0x20>
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <_Bfree+0x3c>)
 8006cdc:	4809      	ldr	r0, [pc, #36]	; (8006d04 <_Bfree+0x40>)
 8006cde:	218f      	movs	r1, #143	; 0x8f
 8006ce0:	f000 fd5a 	bl	8007798 <__assert_func>
 8006ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ce8:	6006      	str	r6, [r0, #0]
 8006cea:	60c6      	str	r6, [r0, #12]
 8006cec:	b13c      	cbz	r4, 8006cfe <_Bfree+0x3a>
 8006cee:	69eb      	ldr	r3, [r5, #28]
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cf8:	6021      	str	r1, [r4, #0]
 8006cfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	08007f05 	.word	0x08007f05
 8006d04:	08007f85 	.word	0x08007f85

08006d08 <__multadd>:
 8006d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	690d      	ldr	r5, [r1, #16]
 8006d0e:	4607      	mov	r7, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	461e      	mov	r6, r3
 8006d14:	f101 0c14 	add.w	ip, r1, #20
 8006d18:	2000      	movs	r0, #0
 8006d1a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d1e:	b299      	uxth	r1, r3
 8006d20:	fb02 6101 	mla	r1, r2, r1, r6
 8006d24:	0c1e      	lsrs	r6, r3, #16
 8006d26:	0c0b      	lsrs	r3, r1, #16
 8006d28:	fb02 3306 	mla	r3, r2, r6, r3
 8006d2c:	b289      	uxth	r1, r1
 8006d2e:	3001      	adds	r0, #1
 8006d30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d34:	4285      	cmp	r5, r0
 8006d36:	f84c 1b04 	str.w	r1, [ip], #4
 8006d3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d3e:	dcec      	bgt.n	8006d1a <__multadd+0x12>
 8006d40:	b30e      	cbz	r6, 8006d86 <__multadd+0x7e>
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc19      	bgt.n	8006d7c <__multadd+0x74>
 8006d48:	6861      	ldr	r1, [r4, #4]
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	3101      	adds	r1, #1
 8006d4e:	f7ff ff79 	bl	8006c44 <_Balloc>
 8006d52:	4680      	mov	r8, r0
 8006d54:	b928      	cbnz	r0, 8006d62 <__multadd+0x5a>
 8006d56:	4602      	mov	r2, r0
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <__multadd+0x84>)
 8006d5a:	480d      	ldr	r0, [pc, #52]	; (8006d90 <__multadd+0x88>)
 8006d5c:	21ba      	movs	r1, #186	; 0xba
 8006d5e:	f000 fd1b 	bl	8007798 <__assert_func>
 8006d62:	6922      	ldr	r2, [r4, #16]
 8006d64:	3202      	adds	r2, #2
 8006d66:	f104 010c 	add.w	r1, r4, #12
 8006d6a:	0092      	lsls	r2, r2, #2
 8006d6c:	300c      	adds	r0, #12
 8006d6e:	f000 fd05 	bl	800777c <memcpy>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4638      	mov	r0, r7
 8006d76:	f7ff ffa5 	bl	8006cc4 <_Bfree>
 8006d7a:	4644      	mov	r4, r8
 8006d7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d80:	3501      	adds	r5, #1
 8006d82:	615e      	str	r6, [r3, #20]
 8006d84:	6125      	str	r5, [r4, #16]
 8006d86:	4620      	mov	r0, r4
 8006d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d8c:	08007f74 	.word	0x08007f74
 8006d90:	08007f85 	.word	0x08007f85

08006d94 <__hi0bits>:
 8006d94:	0c03      	lsrs	r3, r0, #16
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	b9d3      	cbnz	r3, 8006dd0 <__hi0bits+0x3c>
 8006d9a:	0400      	lsls	r0, r0, #16
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006da2:	bf04      	itt	eq
 8006da4:	0200      	lsleq	r0, r0, #8
 8006da6:	3308      	addeq	r3, #8
 8006da8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006dac:	bf04      	itt	eq
 8006dae:	0100      	lsleq	r0, r0, #4
 8006db0:	3304      	addeq	r3, #4
 8006db2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006db6:	bf04      	itt	eq
 8006db8:	0080      	lsleq	r0, r0, #2
 8006dba:	3302      	addeq	r3, #2
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	db05      	blt.n	8006dcc <__hi0bits+0x38>
 8006dc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006dc4:	f103 0301 	add.w	r3, r3, #1
 8006dc8:	bf08      	it	eq
 8006dca:	2320      	moveq	r3, #32
 8006dcc:	4618      	mov	r0, r3
 8006dce:	4770      	bx	lr
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e7e4      	b.n	8006d9e <__hi0bits+0xa>

08006dd4 <__lo0bits>:
 8006dd4:	6803      	ldr	r3, [r0, #0]
 8006dd6:	f013 0207 	ands.w	r2, r3, #7
 8006dda:	d00c      	beq.n	8006df6 <__lo0bits+0x22>
 8006ddc:	07d9      	lsls	r1, r3, #31
 8006dde:	d422      	bmi.n	8006e26 <__lo0bits+0x52>
 8006de0:	079a      	lsls	r2, r3, #30
 8006de2:	bf49      	itett	mi
 8006de4:	085b      	lsrmi	r3, r3, #1
 8006de6:	089b      	lsrpl	r3, r3, #2
 8006de8:	6003      	strmi	r3, [r0, #0]
 8006dea:	2201      	movmi	r2, #1
 8006dec:	bf5c      	itt	pl
 8006dee:	6003      	strpl	r3, [r0, #0]
 8006df0:	2202      	movpl	r2, #2
 8006df2:	4610      	mov	r0, r2
 8006df4:	4770      	bx	lr
 8006df6:	b299      	uxth	r1, r3
 8006df8:	b909      	cbnz	r1, 8006dfe <__lo0bits+0x2a>
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	b2d9      	uxtb	r1, r3
 8006e00:	b909      	cbnz	r1, 8006e06 <__lo0bits+0x32>
 8006e02:	3208      	adds	r2, #8
 8006e04:	0a1b      	lsrs	r3, r3, #8
 8006e06:	0719      	lsls	r1, r3, #28
 8006e08:	bf04      	itt	eq
 8006e0a:	091b      	lsreq	r3, r3, #4
 8006e0c:	3204      	addeq	r2, #4
 8006e0e:	0799      	lsls	r1, r3, #30
 8006e10:	bf04      	itt	eq
 8006e12:	089b      	lsreq	r3, r3, #2
 8006e14:	3202      	addeq	r2, #2
 8006e16:	07d9      	lsls	r1, r3, #31
 8006e18:	d403      	bmi.n	8006e22 <__lo0bits+0x4e>
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	f102 0201 	add.w	r2, r2, #1
 8006e20:	d003      	beq.n	8006e2a <__lo0bits+0x56>
 8006e22:	6003      	str	r3, [r0, #0]
 8006e24:	e7e5      	b.n	8006df2 <__lo0bits+0x1e>
 8006e26:	2200      	movs	r2, #0
 8006e28:	e7e3      	b.n	8006df2 <__lo0bits+0x1e>
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	e7e1      	b.n	8006df2 <__lo0bits+0x1e>
	...

08006e30 <__i2b>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	460c      	mov	r4, r1
 8006e34:	2101      	movs	r1, #1
 8006e36:	f7ff ff05 	bl	8006c44 <_Balloc>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <__i2b+0x1a>
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <__i2b+0x24>)
 8006e40:	4805      	ldr	r0, [pc, #20]	; (8006e58 <__i2b+0x28>)
 8006e42:	f240 1145 	movw	r1, #325	; 0x145
 8006e46:	f000 fca7 	bl	8007798 <__assert_func>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	6144      	str	r4, [r0, #20]
 8006e4e:	6103      	str	r3, [r0, #16]
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	08007f74 	.word	0x08007f74
 8006e58:	08007f85 	.word	0x08007f85

08006e5c <__multiply>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	4691      	mov	r9, r2
 8006e62:	690a      	ldr	r2, [r1, #16]
 8006e64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	bfb8      	it	lt
 8006e6c:	460b      	movlt	r3, r1
 8006e6e:	460c      	mov	r4, r1
 8006e70:	bfbc      	itt	lt
 8006e72:	464c      	movlt	r4, r9
 8006e74:	4699      	movlt	r9, r3
 8006e76:	6927      	ldr	r7, [r4, #16]
 8006e78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e7c:	68a3      	ldr	r3, [r4, #8]
 8006e7e:	6861      	ldr	r1, [r4, #4]
 8006e80:	eb07 060a 	add.w	r6, r7, sl
 8006e84:	42b3      	cmp	r3, r6
 8006e86:	b085      	sub	sp, #20
 8006e88:	bfb8      	it	lt
 8006e8a:	3101      	addlt	r1, #1
 8006e8c:	f7ff feda 	bl	8006c44 <_Balloc>
 8006e90:	b930      	cbnz	r0, 8006ea0 <__multiply+0x44>
 8006e92:	4602      	mov	r2, r0
 8006e94:	4b44      	ldr	r3, [pc, #272]	; (8006fa8 <__multiply+0x14c>)
 8006e96:	4845      	ldr	r0, [pc, #276]	; (8006fac <__multiply+0x150>)
 8006e98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006e9c:	f000 fc7c 	bl	8007798 <__assert_func>
 8006ea0:	f100 0514 	add.w	r5, r0, #20
 8006ea4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4543      	cmp	r3, r8
 8006eae:	d321      	bcc.n	8006ef4 <__multiply+0x98>
 8006eb0:	f104 0314 	add.w	r3, r4, #20
 8006eb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006eb8:	f109 0314 	add.w	r3, r9, #20
 8006ebc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ec0:	9202      	str	r2, [sp, #8]
 8006ec2:	1b3a      	subs	r2, r7, r4
 8006ec4:	3a15      	subs	r2, #21
 8006ec6:	f022 0203 	bic.w	r2, r2, #3
 8006eca:	3204      	adds	r2, #4
 8006ecc:	f104 0115 	add.w	r1, r4, #21
 8006ed0:	428f      	cmp	r7, r1
 8006ed2:	bf38      	it	cc
 8006ed4:	2204      	movcc	r2, #4
 8006ed6:	9201      	str	r2, [sp, #4]
 8006ed8:	9a02      	ldr	r2, [sp, #8]
 8006eda:	9303      	str	r3, [sp, #12]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d80c      	bhi.n	8006efa <__multiply+0x9e>
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	dd03      	ble.n	8006eec <__multiply+0x90>
 8006ee4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05b      	beq.n	8006fa4 <__multiply+0x148>
 8006eec:	6106      	str	r6, [r0, #16]
 8006eee:	b005      	add	sp, #20
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	f843 2b04 	str.w	r2, [r3], #4
 8006ef8:	e7d8      	b.n	8006eac <__multiply+0x50>
 8006efa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006efe:	f1ba 0f00 	cmp.w	sl, #0
 8006f02:	d024      	beq.n	8006f4e <__multiply+0xf2>
 8006f04:	f104 0e14 	add.w	lr, r4, #20
 8006f08:	46a9      	mov	r9, r5
 8006f0a:	f04f 0c00 	mov.w	ip, #0
 8006f0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f12:	f8d9 1000 	ldr.w	r1, [r9]
 8006f16:	fa1f fb82 	uxth.w	fp, r2
 8006f1a:	b289      	uxth	r1, r1
 8006f1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f24:	f8d9 2000 	ldr.w	r2, [r9]
 8006f28:	4461      	add	r1, ip
 8006f2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f36:	b289      	uxth	r1, r1
 8006f38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f3c:	4577      	cmp	r7, lr
 8006f3e:	f849 1b04 	str.w	r1, [r9], #4
 8006f42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f46:	d8e2      	bhi.n	8006f0e <__multiply+0xb2>
 8006f48:	9a01      	ldr	r2, [sp, #4]
 8006f4a:	f845 c002 	str.w	ip, [r5, r2]
 8006f4e:	9a03      	ldr	r2, [sp, #12]
 8006f50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f54:	3304      	adds	r3, #4
 8006f56:	f1b9 0f00 	cmp.w	r9, #0
 8006f5a:	d021      	beq.n	8006fa0 <__multiply+0x144>
 8006f5c:	6829      	ldr	r1, [r5, #0]
 8006f5e:	f104 0c14 	add.w	ip, r4, #20
 8006f62:	46ae      	mov	lr, r5
 8006f64:	f04f 0a00 	mov.w	sl, #0
 8006f68:	f8bc b000 	ldrh.w	fp, [ip]
 8006f6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f70:	fb09 220b 	mla	r2, r9, fp, r2
 8006f74:	4452      	add	r2, sl
 8006f76:	b289      	uxth	r1, r1
 8006f78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f7c:	f84e 1b04 	str.w	r1, [lr], #4
 8006f80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f88:	f8be 1000 	ldrh.w	r1, [lr]
 8006f8c:	fb09 110a 	mla	r1, r9, sl, r1
 8006f90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006f94:	4567      	cmp	r7, ip
 8006f96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f9a:	d8e5      	bhi.n	8006f68 <__multiply+0x10c>
 8006f9c:	9a01      	ldr	r2, [sp, #4]
 8006f9e:	50a9      	str	r1, [r5, r2]
 8006fa0:	3504      	adds	r5, #4
 8006fa2:	e799      	b.n	8006ed8 <__multiply+0x7c>
 8006fa4:	3e01      	subs	r6, #1
 8006fa6:	e79b      	b.n	8006ee0 <__multiply+0x84>
 8006fa8:	08007f74 	.word	0x08007f74
 8006fac:	08007f85 	.word	0x08007f85

08006fb0 <__pow5mult>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	f012 0203 	ands.w	r2, r2, #3
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	d007      	beq.n	8006fd0 <__pow5mult+0x20>
 8006fc0:	4c25      	ldr	r4, [pc, #148]	; (8007058 <__pow5mult+0xa8>)
 8006fc2:	3a01      	subs	r2, #1
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fca:	f7ff fe9d 	bl	8006d08 <__multadd>
 8006fce:	4607      	mov	r7, r0
 8006fd0:	10ad      	asrs	r5, r5, #2
 8006fd2:	d03d      	beq.n	8007050 <__pow5mult+0xa0>
 8006fd4:	69f4      	ldr	r4, [r6, #28]
 8006fd6:	b97c      	cbnz	r4, 8006ff8 <__pow5mult+0x48>
 8006fd8:	2010      	movs	r0, #16
 8006fda:	f7fe f855 	bl	8005088 <malloc>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	61f0      	str	r0, [r6, #28]
 8006fe2:	b928      	cbnz	r0, 8006ff0 <__pow5mult+0x40>
 8006fe4:	4b1d      	ldr	r3, [pc, #116]	; (800705c <__pow5mult+0xac>)
 8006fe6:	481e      	ldr	r0, [pc, #120]	; (8007060 <__pow5mult+0xb0>)
 8006fe8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006fec:	f000 fbd4 	bl	8007798 <__assert_func>
 8006ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ff4:	6004      	str	r4, [r0, #0]
 8006ff6:	60c4      	str	r4, [r0, #12]
 8006ff8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007000:	b94c      	cbnz	r4, 8007016 <__pow5mult+0x66>
 8007002:	f240 2171 	movw	r1, #625	; 0x271
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ff12 	bl	8006e30 <__i2b>
 800700c:	2300      	movs	r3, #0
 800700e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007012:	4604      	mov	r4, r0
 8007014:	6003      	str	r3, [r0, #0]
 8007016:	f04f 0900 	mov.w	r9, #0
 800701a:	07eb      	lsls	r3, r5, #31
 800701c:	d50a      	bpl.n	8007034 <__pow5mult+0x84>
 800701e:	4639      	mov	r1, r7
 8007020:	4622      	mov	r2, r4
 8007022:	4630      	mov	r0, r6
 8007024:	f7ff ff1a 	bl	8006e5c <__multiply>
 8007028:	4639      	mov	r1, r7
 800702a:	4680      	mov	r8, r0
 800702c:	4630      	mov	r0, r6
 800702e:	f7ff fe49 	bl	8006cc4 <_Bfree>
 8007032:	4647      	mov	r7, r8
 8007034:	106d      	asrs	r5, r5, #1
 8007036:	d00b      	beq.n	8007050 <__pow5mult+0xa0>
 8007038:	6820      	ldr	r0, [r4, #0]
 800703a:	b938      	cbnz	r0, 800704c <__pow5mult+0x9c>
 800703c:	4622      	mov	r2, r4
 800703e:	4621      	mov	r1, r4
 8007040:	4630      	mov	r0, r6
 8007042:	f7ff ff0b 	bl	8006e5c <__multiply>
 8007046:	6020      	str	r0, [r4, #0]
 8007048:	f8c0 9000 	str.w	r9, [r0]
 800704c:	4604      	mov	r4, r0
 800704e:	e7e4      	b.n	800701a <__pow5mult+0x6a>
 8007050:	4638      	mov	r0, r7
 8007052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007056:	bf00      	nop
 8007058:	080080d0 	.word	0x080080d0
 800705c:	08007f05 	.word	0x08007f05
 8007060:	08007f85 	.word	0x08007f85

08007064 <__lshift>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	460c      	mov	r4, r1
 800706a:	6849      	ldr	r1, [r1, #4]
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	4607      	mov	r7, r0
 8007076:	4691      	mov	r9, r2
 8007078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800707c:	f108 0601 	add.w	r6, r8, #1
 8007080:	42b3      	cmp	r3, r6
 8007082:	db0b      	blt.n	800709c <__lshift+0x38>
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff fddd 	bl	8006c44 <_Balloc>
 800708a:	4605      	mov	r5, r0
 800708c:	b948      	cbnz	r0, 80070a2 <__lshift+0x3e>
 800708e:	4602      	mov	r2, r0
 8007090:	4b28      	ldr	r3, [pc, #160]	; (8007134 <__lshift+0xd0>)
 8007092:	4829      	ldr	r0, [pc, #164]	; (8007138 <__lshift+0xd4>)
 8007094:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007098:	f000 fb7e 	bl	8007798 <__assert_func>
 800709c:	3101      	adds	r1, #1
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	e7ee      	b.n	8007080 <__lshift+0x1c>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f100 0114 	add.w	r1, r0, #20
 80070a8:	f100 0210 	add.w	r2, r0, #16
 80070ac:	4618      	mov	r0, r3
 80070ae:	4553      	cmp	r3, sl
 80070b0:	db33      	blt.n	800711a <__lshift+0xb6>
 80070b2:	6920      	ldr	r0, [r4, #16]
 80070b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070b8:	f104 0314 	add.w	r3, r4, #20
 80070bc:	f019 091f 	ands.w	r9, r9, #31
 80070c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070c8:	d02b      	beq.n	8007122 <__lshift+0xbe>
 80070ca:	f1c9 0e20 	rsb	lr, r9, #32
 80070ce:	468a      	mov	sl, r1
 80070d0:	2200      	movs	r2, #0
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	fa00 f009 	lsl.w	r0, r0, r9
 80070d8:	4310      	orrs	r0, r2
 80070da:	f84a 0b04 	str.w	r0, [sl], #4
 80070de:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e2:	459c      	cmp	ip, r3
 80070e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80070e8:	d8f3      	bhi.n	80070d2 <__lshift+0x6e>
 80070ea:	ebac 0304 	sub.w	r3, ip, r4
 80070ee:	3b15      	subs	r3, #21
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	3304      	adds	r3, #4
 80070f6:	f104 0015 	add.w	r0, r4, #21
 80070fa:	4584      	cmp	ip, r0
 80070fc:	bf38      	it	cc
 80070fe:	2304      	movcc	r3, #4
 8007100:	50ca      	str	r2, [r1, r3]
 8007102:	b10a      	cbz	r2, 8007108 <__lshift+0xa4>
 8007104:	f108 0602 	add.w	r6, r8, #2
 8007108:	3e01      	subs	r6, #1
 800710a:	4638      	mov	r0, r7
 800710c:	612e      	str	r6, [r5, #16]
 800710e:	4621      	mov	r1, r4
 8007110:	f7ff fdd8 	bl	8006cc4 <_Bfree>
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711a:	f842 0f04 	str.w	r0, [r2, #4]!
 800711e:	3301      	adds	r3, #1
 8007120:	e7c5      	b.n	80070ae <__lshift+0x4a>
 8007122:	3904      	subs	r1, #4
 8007124:	f853 2b04 	ldr.w	r2, [r3], #4
 8007128:	f841 2f04 	str.w	r2, [r1, #4]!
 800712c:	459c      	cmp	ip, r3
 800712e:	d8f9      	bhi.n	8007124 <__lshift+0xc0>
 8007130:	e7ea      	b.n	8007108 <__lshift+0xa4>
 8007132:	bf00      	nop
 8007134:	08007f74 	.word	0x08007f74
 8007138:	08007f85 	.word	0x08007f85

0800713c <__mcmp>:
 800713c:	b530      	push	{r4, r5, lr}
 800713e:	6902      	ldr	r2, [r0, #16]
 8007140:	690c      	ldr	r4, [r1, #16]
 8007142:	1b12      	subs	r2, r2, r4
 8007144:	d10e      	bne.n	8007164 <__mcmp+0x28>
 8007146:	f100 0314 	add.w	r3, r0, #20
 800714a:	3114      	adds	r1, #20
 800714c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800715c:	42a5      	cmp	r5, r4
 800715e:	d003      	beq.n	8007168 <__mcmp+0x2c>
 8007160:	d305      	bcc.n	800716e <__mcmp+0x32>
 8007162:	2201      	movs	r2, #1
 8007164:	4610      	mov	r0, r2
 8007166:	bd30      	pop	{r4, r5, pc}
 8007168:	4283      	cmp	r3, r0
 800716a:	d3f3      	bcc.n	8007154 <__mcmp+0x18>
 800716c:	e7fa      	b.n	8007164 <__mcmp+0x28>
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	e7f7      	b.n	8007164 <__mcmp+0x28>

08007174 <__mdiff>:
 8007174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	460c      	mov	r4, r1
 800717a:	4606      	mov	r6, r0
 800717c:	4611      	mov	r1, r2
 800717e:	4620      	mov	r0, r4
 8007180:	4690      	mov	r8, r2
 8007182:	f7ff ffdb 	bl	800713c <__mcmp>
 8007186:	1e05      	subs	r5, r0, #0
 8007188:	d110      	bne.n	80071ac <__mdiff+0x38>
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fd59 	bl	8006c44 <_Balloc>
 8007192:	b930      	cbnz	r0, 80071a2 <__mdiff+0x2e>
 8007194:	4b3a      	ldr	r3, [pc, #232]	; (8007280 <__mdiff+0x10c>)
 8007196:	4602      	mov	r2, r0
 8007198:	f240 2137 	movw	r1, #567	; 0x237
 800719c:	4839      	ldr	r0, [pc, #228]	; (8007284 <__mdiff+0x110>)
 800719e:	f000 fafb 	bl	8007798 <__assert_func>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ac:	bfa4      	itt	ge
 80071ae:	4643      	movge	r3, r8
 80071b0:	46a0      	movge	r8, r4
 80071b2:	4630      	mov	r0, r6
 80071b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071b8:	bfa6      	itte	ge
 80071ba:	461c      	movge	r4, r3
 80071bc:	2500      	movge	r5, #0
 80071be:	2501      	movlt	r5, #1
 80071c0:	f7ff fd40 	bl	8006c44 <_Balloc>
 80071c4:	b920      	cbnz	r0, 80071d0 <__mdiff+0x5c>
 80071c6:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <__mdiff+0x10c>)
 80071c8:	4602      	mov	r2, r0
 80071ca:	f240 2145 	movw	r1, #581	; 0x245
 80071ce:	e7e5      	b.n	800719c <__mdiff+0x28>
 80071d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071d4:	6926      	ldr	r6, [r4, #16]
 80071d6:	60c5      	str	r5, [r0, #12]
 80071d8:	f104 0914 	add.w	r9, r4, #20
 80071dc:	f108 0514 	add.w	r5, r8, #20
 80071e0:	f100 0e14 	add.w	lr, r0, #20
 80071e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80071e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80071ec:	f108 0210 	add.w	r2, r8, #16
 80071f0:	46f2      	mov	sl, lr
 80071f2:	2100      	movs	r1, #0
 80071f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80071f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071fc:	fa11 f88b 	uxtah	r8, r1, fp
 8007200:	b299      	uxth	r1, r3
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	eba8 0801 	sub.w	r8, r8, r1
 8007208:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800720c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007210:	fa1f f888 	uxth.w	r8, r8
 8007214:	1419      	asrs	r1, r3, #16
 8007216:	454e      	cmp	r6, r9
 8007218:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800721c:	f84a 3b04 	str.w	r3, [sl], #4
 8007220:	d8e8      	bhi.n	80071f4 <__mdiff+0x80>
 8007222:	1b33      	subs	r3, r6, r4
 8007224:	3b15      	subs	r3, #21
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	3304      	adds	r3, #4
 800722c:	3415      	adds	r4, #21
 800722e:	42a6      	cmp	r6, r4
 8007230:	bf38      	it	cc
 8007232:	2304      	movcc	r3, #4
 8007234:	441d      	add	r5, r3
 8007236:	4473      	add	r3, lr
 8007238:	469e      	mov	lr, r3
 800723a:	462e      	mov	r6, r5
 800723c:	4566      	cmp	r6, ip
 800723e:	d30e      	bcc.n	800725e <__mdiff+0xea>
 8007240:	f10c 0203 	add.w	r2, ip, #3
 8007244:	1b52      	subs	r2, r2, r5
 8007246:	f022 0203 	bic.w	r2, r2, #3
 800724a:	3d03      	subs	r5, #3
 800724c:	45ac      	cmp	ip, r5
 800724e:	bf38      	it	cc
 8007250:	2200      	movcc	r2, #0
 8007252:	4413      	add	r3, r2
 8007254:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007258:	b17a      	cbz	r2, 800727a <__mdiff+0x106>
 800725a:	6107      	str	r7, [r0, #16]
 800725c:	e7a4      	b.n	80071a8 <__mdiff+0x34>
 800725e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007262:	fa11 f288 	uxtah	r2, r1, r8
 8007266:	1414      	asrs	r4, r2, #16
 8007268:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800726c:	b292      	uxth	r2, r2
 800726e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007272:	f84e 2b04 	str.w	r2, [lr], #4
 8007276:	1421      	asrs	r1, r4, #16
 8007278:	e7e0      	b.n	800723c <__mdiff+0xc8>
 800727a:	3f01      	subs	r7, #1
 800727c:	e7ea      	b.n	8007254 <__mdiff+0xe0>
 800727e:	bf00      	nop
 8007280:	08007f74 	.word	0x08007f74
 8007284:	08007f85 	.word	0x08007f85

08007288 <__d2b>:
 8007288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800728c:	460f      	mov	r7, r1
 800728e:	2101      	movs	r1, #1
 8007290:	ec59 8b10 	vmov	r8, r9, d0
 8007294:	4616      	mov	r6, r2
 8007296:	f7ff fcd5 	bl	8006c44 <_Balloc>
 800729a:	4604      	mov	r4, r0
 800729c:	b930      	cbnz	r0, 80072ac <__d2b+0x24>
 800729e:	4602      	mov	r2, r0
 80072a0:	4b24      	ldr	r3, [pc, #144]	; (8007334 <__d2b+0xac>)
 80072a2:	4825      	ldr	r0, [pc, #148]	; (8007338 <__d2b+0xb0>)
 80072a4:	f240 310f 	movw	r1, #783	; 0x30f
 80072a8:	f000 fa76 	bl	8007798 <__assert_func>
 80072ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072b4:	bb2d      	cbnz	r5, 8007302 <__d2b+0x7a>
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	f1b8 0300 	subs.w	r3, r8, #0
 80072bc:	d026      	beq.n	800730c <__d2b+0x84>
 80072be:	4668      	mov	r0, sp
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	f7ff fd87 	bl	8006dd4 <__lo0bits>
 80072c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072ca:	b1e8      	cbz	r0, 8007308 <__d2b+0x80>
 80072cc:	f1c0 0320 	rsb	r3, r0, #32
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	430b      	orrs	r3, r1
 80072d6:	40c2      	lsrs	r2, r0
 80072d8:	6163      	str	r3, [r4, #20]
 80072da:	9201      	str	r2, [sp, #4]
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	61a3      	str	r3, [r4, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2202      	movne	r2, #2
 80072e6:	2201      	moveq	r2, #1
 80072e8:	6122      	str	r2, [r4, #16]
 80072ea:	b1bd      	cbz	r5, 800731c <__d2b+0x94>
 80072ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072f0:	4405      	add	r5, r0
 80072f2:	603d      	str	r5, [r7, #0]
 80072f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072f8:	6030      	str	r0, [r6, #0]
 80072fa:	4620      	mov	r0, r4
 80072fc:	b003      	add	sp, #12
 80072fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007306:	e7d6      	b.n	80072b6 <__d2b+0x2e>
 8007308:	6161      	str	r1, [r4, #20]
 800730a:	e7e7      	b.n	80072dc <__d2b+0x54>
 800730c:	a801      	add	r0, sp, #4
 800730e:	f7ff fd61 	bl	8006dd4 <__lo0bits>
 8007312:	9b01      	ldr	r3, [sp, #4]
 8007314:	6163      	str	r3, [r4, #20]
 8007316:	3020      	adds	r0, #32
 8007318:	2201      	movs	r2, #1
 800731a:	e7e5      	b.n	80072e8 <__d2b+0x60>
 800731c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007320:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007324:	6038      	str	r0, [r7, #0]
 8007326:	6918      	ldr	r0, [r3, #16]
 8007328:	f7ff fd34 	bl	8006d94 <__hi0bits>
 800732c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007330:	e7e2      	b.n	80072f8 <__d2b+0x70>
 8007332:	bf00      	nop
 8007334:	08007f74 	.word	0x08007f74
 8007338:	08007f85 	.word	0x08007f85

0800733c <__ssputs_r>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	688e      	ldr	r6, [r1, #8]
 8007342:	461f      	mov	r7, r3
 8007344:	42be      	cmp	r6, r7
 8007346:	680b      	ldr	r3, [r1, #0]
 8007348:	4682      	mov	sl, r0
 800734a:	460c      	mov	r4, r1
 800734c:	4690      	mov	r8, r2
 800734e:	d82c      	bhi.n	80073aa <__ssputs_r+0x6e>
 8007350:	898a      	ldrh	r2, [r1, #12]
 8007352:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007356:	d026      	beq.n	80073a6 <__ssputs_r+0x6a>
 8007358:	6965      	ldr	r5, [r4, #20]
 800735a:	6909      	ldr	r1, [r1, #16]
 800735c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007360:	eba3 0901 	sub.w	r9, r3, r1
 8007364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007368:	1c7b      	adds	r3, r7, #1
 800736a:	444b      	add	r3, r9
 800736c:	106d      	asrs	r5, r5, #1
 800736e:	429d      	cmp	r5, r3
 8007370:	bf38      	it	cc
 8007372:	461d      	movcc	r5, r3
 8007374:	0553      	lsls	r3, r2, #21
 8007376:	d527      	bpl.n	80073c8 <__ssputs_r+0x8c>
 8007378:	4629      	mov	r1, r5
 800737a:	f7fd fead 	bl	80050d8 <_malloc_r>
 800737e:	4606      	mov	r6, r0
 8007380:	b360      	cbz	r0, 80073dc <__ssputs_r+0xa0>
 8007382:	6921      	ldr	r1, [r4, #16]
 8007384:	464a      	mov	r2, r9
 8007386:	f000 f9f9 	bl	800777c <memcpy>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	6126      	str	r6, [r4, #16]
 8007398:	6165      	str	r5, [r4, #20]
 800739a:	444e      	add	r6, r9
 800739c:	eba5 0509 	sub.w	r5, r5, r9
 80073a0:	6026      	str	r6, [r4, #0]
 80073a2:	60a5      	str	r5, [r4, #8]
 80073a4:	463e      	mov	r6, r7
 80073a6:	42be      	cmp	r6, r7
 80073a8:	d900      	bls.n	80073ac <__ssputs_r+0x70>
 80073aa:	463e      	mov	r6, r7
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	4632      	mov	r2, r6
 80073b0:	4641      	mov	r1, r8
 80073b2:	f000 f9c9 	bl	8007748 <memmove>
 80073b6:	68a3      	ldr	r3, [r4, #8]
 80073b8:	1b9b      	subs	r3, r3, r6
 80073ba:	60a3      	str	r3, [r4, #8]
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	4433      	add	r3, r6
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	2000      	movs	r0, #0
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	462a      	mov	r2, r5
 80073ca:	f000 fa2b 	bl	8007824 <_realloc_r>
 80073ce:	4606      	mov	r6, r0
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d1e0      	bne.n	8007396 <__ssputs_r+0x5a>
 80073d4:	6921      	ldr	r1, [r4, #16]
 80073d6:	4650      	mov	r0, sl
 80073d8:	f7ff fbe8 	bl	8006bac <_free_r>
 80073dc:	230c      	movs	r3, #12
 80073de:	f8ca 3000 	str.w	r3, [sl]
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	e7e9      	b.n	80073c4 <__ssputs_r+0x88>

080073f0 <_svfiprintf_r>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	4698      	mov	r8, r3
 80073f6:	898b      	ldrh	r3, [r1, #12]
 80073f8:	061b      	lsls	r3, r3, #24
 80073fa:	b09d      	sub	sp, #116	; 0x74
 80073fc:	4607      	mov	r7, r0
 80073fe:	460d      	mov	r5, r1
 8007400:	4614      	mov	r4, r2
 8007402:	d50e      	bpl.n	8007422 <_svfiprintf_r+0x32>
 8007404:	690b      	ldr	r3, [r1, #16]
 8007406:	b963      	cbnz	r3, 8007422 <_svfiprintf_r+0x32>
 8007408:	2140      	movs	r1, #64	; 0x40
 800740a:	f7fd fe65 	bl	80050d8 <_malloc_r>
 800740e:	6028      	str	r0, [r5, #0]
 8007410:	6128      	str	r0, [r5, #16]
 8007412:	b920      	cbnz	r0, 800741e <_svfiprintf_r+0x2e>
 8007414:	230c      	movs	r3, #12
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	e0d0      	b.n	80075c0 <_svfiprintf_r+0x1d0>
 800741e:	2340      	movs	r3, #64	; 0x40
 8007420:	616b      	str	r3, [r5, #20]
 8007422:	2300      	movs	r3, #0
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	2320      	movs	r3, #32
 8007428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800742c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007430:	2330      	movs	r3, #48	; 0x30
 8007432:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075d8 <_svfiprintf_r+0x1e8>
 8007436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800743a:	f04f 0901 	mov.w	r9, #1
 800743e:	4623      	mov	r3, r4
 8007440:	469a      	mov	sl, r3
 8007442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007446:	b10a      	cbz	r2, 800744c <_svfiprintf_r+0x5c>
 8007448:	2a25      	cmp	r2, #37	; 0x25
 800744a:	d1f9      	bne.n	8007440 <_svfiprintf_r+0x50>
 800744c:	ebba 0b04 	subs.w	fp, sl, r4
 8007450:	d00b      	beq.n	800746a <_svfiprintf_r+0x7a>
 8007452:	465b      	mov	r3, fp
 8007454:	4622      	mov	r2, r4
 8007456:	4629      	mov	r1, r5
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff ff6f 	bl	800733c <__ssputs_r>
 800745e:	3001      	adds	r0, #1
 8007460:	f000 80a9 	beq.w	80075b6 <_svfiprintf_r+0x1c6>
 8007464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007466:	445a      	add	r2, fp
 8007468:	9209      	str	r2, [sp, #36]	; 0x24
 800746a:	f89a 3000 	ldrb.w	r3, [sl]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 80a1 	beq.w	80075b6 <_svfiprintf_r+0x1c6>
 8007474:	2300      	movs	r3, #0
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
 800747a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800747e:	f10a 0a01 	add.w	sl, sl, #1
 8007482:	9304      	str	r3, [sp, #16]
 8007484:	9307      	str	r3, [sp, #28]
 8007486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800748a:	931a      	str	r3, [sp, #104]	; 0x68
 800748c:	4654      	mov	r4, sl
 800748e:	2205      	movs	r2, #5
 8007490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007494:	4850      	ldr	r0, [pc, #320]	; (80075d8 <_svfiprintf_r+0x1e8>)
 8007496:	f7f8 fe9b 	bl	80001d0 <memchr>
 800749a:	9a04      	ldr	r2, [sp, #16]
 800749c:	b9d8      	cbnz	r0, 80074d6 <_svfiprintf_r+0xe6>
 800749e:	06d0      	lsls	r0, r2, #27
 80074a0:	bf44      	itt	mi
 80074a2:	2320      	movmi	r3, #32
 80074a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074a8:	0711      	lsls	r1, r2, #28
 80074aa:	bf44      	itt	mi
 80074ac:	232b      	movmi	r3, #43	; 0x2b
 80074ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b2:	f89a 3000 	ldrb.w	r3, [sl]
 80074b6:	2b2a      	cmp	r3, #42	; 0x2a
 80074b8:	d015      	beq.n	80074e6 <_svfiprintf_r+0xf6>
 80074ba:	9a07      	ldr	r2, [sp, #28]
 80074bc:	4654      	mov	r4, sl
 80074be:	2000      	movs	r0, #0
 80074c0:	f04f 0c0a 	mov.w	ip, #10
 80074c4:	4621      	mov	r1, r4
 80074c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ca:	3b30      	subs	r3, #48	; 0x30
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d94d      	bls.n	800756c <_svfiprintf_r+0x17c>
 80074d0:	b1b0      	cbz	r0, 8007500 <_svfiprintf_r+0x110>
 80074d2:	9207      	str	r2, [sp, #28]
 80074d4:	e014      	b.n	8007500 <_svfiprintf_r+0x110>
 80074d6:	eba0 0308 	sub.w	r3, r0, r8
 80074da:	fa09 f303 	lsl.w	r3, r9, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	46a2      	mov	sl, r4
 80074e4:	e7d2      	b.n	800748c <_svfiprintf_r+0x9c>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	1d19      	adds	r1, r3, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	9103      	str	r1, [sp, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bfbb      	ittet	lt
 80074f2:	425b      	neglt	r3, r3
 80074f4:	f042 0202 	orrlt.w	r2, r2, #2
 80074f8:	9307      	strge	r3, [sp, #28]
 80074fa:	9307      	strlt	r3, [sp, #28]
 80074fc:	bfb8      	it	lt
 80074fe:	9204      	strlt	r2, [sp, #16]
 8007500:	7823      	ldrb	r3, [r4, #0]
 8007502:	2b2e      	cmp	r3, #46	; 0x2e
 8007504:	d10c      	bne.n	8007520 <_svfiprintf_r+0x130>
 8007506:	7863      	ldrb	r3, [r4, #1]
 8007508:	2b2a      	cmp	r3, #42	; 0x2a
 800750a:	d134      	bne.n	8007576 <_svfiprintf_r+0x186>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	1d1a      	adds	r2, r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	9203      	str	r2, [sp, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	bfb8      	it	lt
 8007518:	f04f 33ff 	movlt.w	r3, #4294967295
 800751c:	3402      	adds	r4, #2
 800751e:	9305      	str	r3, [sp, #20]
 8007520:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80075e8 <_svfiprintf_r+0x1f8>
 8007524:	7821      	ldrb	r1, [r4, #0]
 8007526:	2203      	movs	r2, #3
 8007528:	4650      	mov	r0, sl
 800752a:	f7f8 fe51 	bl	80001d0 <memchr>
 800752e:	b138      	cbz	r0, 8007540 <_svfiprintf_r+0x150>
 8007530:	9b04      	ldr	r3, [sp, #16]
 8007532:	eba0 000a 	sub.w	r0, r0, sl
 8007536:	2240      	movs	r2, #64	; 0x40
 8007538:	4082      	lsls	r2, r0
 800753a:	4313      	orrs	r3, r2
 800753c:	3401      	adds	r4, #1
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007544:	4825      	ldr	r0, [pc, #148]	; (80075dc <_svfiprintf_r+0x1ec>)
 8007546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800754a:	2206      	movs	r2, #6
 800754c:	f7f8 fe40 	bl	80001d0 <memchr>
 8007550:	2800      	cmp	r0, #0
 8007552:	d038      	beq.n	80075c6 <_svfiprintf_r+0x1d6>
 8007554:	4b22      	ldr	r3, [pc, #136]	; (80075e0 <_svfiprintf_r+0x1f0>)
 8007556:	bb1b      	cbnz	r3, 80075a0 <_svfiprintf_r+0x1b0>
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	3307      	adds	r3, #7
 800755c:	f023 0307 	bic.w	r3, r3, #7
 8007560:	3308      	adds	r3, #8
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007566:	4433      	add	r3, r6
 8007568:	9309      	str	r3, [sp, #36]	; 0x24
 800756a:	e768      	b.n	800743e <_svfiprintf_r+0x4e>
 800756c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007570:	460c      	mov	r4, r1
 8007572:	2001      	movs	r0, #1
 8007574:	e7a6      	b.n	80074c4 <_svfiprintf_r+0xd4>
 8007576:	2300      	movs	r3, #0
 8007578:	3401      	adds	r4, #1
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	4619      	mov	r1, r3
 800757e:	f04f 0c0a 	mov.w	ip, #10
 8007582:	4620      	mov	r0, r4
 8007584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007588:	3a30      	subs	r2, #48	; 0x30
 800758a:	2a09      	cmp	r2, #9
 800758c:	d903      	bls.n	8007596 <_svfiprintf_r+0x1a6>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0c6      	beq.n	8007520 <_svfiprintf_r+0x130>
 8007592:	9105      	str	r1, [sp, #20]
 8007594:	e7c4      	b.n	8007520 <_svfiprintf_r+0x130>
 8007596:	fb0c 2101 	mla	r1, ip, r1, r2
 800759a:	4604      	mov	r4, r0
 800759c:	2301      	movs	r3, #1
 800759e:	e7f0      	b.n	8007582 <_svfiprintf_r+0x192>
 80075a0:	ab03      	add	r3, sp, #12
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	462a      	mov	r2, r5
 80075a6:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <_svfiprintf_r+0x1f4>)
 80075a8:	a904      	add	r1, sp, #16
 80075aa:	4638      	mov	r0, r7
 80075ac:	f7fd fec0 	bl	8005330 <_printf_float>
 80075b0:	1c42      	adds	r2, r0, #1
 80075b2:	4606      	mov	r6, r0
 80075b4:	d1d6      	bne.n	8007564 <_svfiprintf_r+0x174>
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	065b      	lsls	r3, r3, #25
 80075ba:	f53f af2d 	bmi.w	8007418 <_svfiprintf_r+0x28>
 80075be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c0:	b01d      	add	sp, #116	; 0x74
 80075c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c6:	ab03      	add	r3, sp, #12
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	462a      	mov	r2, r5
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <_svfiprintf_r+0x1f4>)
 80075ce:	a904      	add	r1, sp, #16
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7fe f951 	bl	8005878 <_printf_i>
 80075d6:	e7eb      	b.n	80075b0 <_svfiprintf_r+0x1c0>
 80075d8:	080080dc 	.word	0x080080dc
 80075dc:	080080e6 	.word	0x080080e6
 80075e0:	08005331 	.word	0x08005331
 80075e4:	0800733d 	.word	0x0800733d
 80075e8:	080080e2 	.word	0x080080e2

080075ec <__sflush_r>:
 80075ec:	898a      	ldrh	r2, [r1, #12]
 80075ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f2:	4605      	mov	r5, r0
 80075f4:	0710      	lsls	r0, r2, #28
 80075f6:	460c      	mov	r4, r1
 80075f8:	d458      	bmi.n	80076ac <__sflush_r+0xc0>
 80075fa:	684b      	ldr	r3, [r1, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dc05      	bgt.n	800760c <__sflush_r+0x20>
 8007600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc02      	bgt.n	800760c <__sflush_r+0x20>
 8007606:	2000      	movs	r0, #0
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760e:	2e00      	cmp	r6, #0
 8007610:	d0f9      	beq.n	8007606 <__sflush_r+0x1a>
 8007612:	2300      	movs	r3, #0
 8007614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007618:	682f      	ldr	r7, [r5, #0]
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	d032      	beq.n	8007686 <__sflush_r+0x9a>
 8007620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	075a      	lsls	r2, r3, #29
 8007626:	d505      	bpl.n	8007634 <__sflush_r+0x48>
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	1ac0      	subs	r0, r0, r3
 800762c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800762e:	b10b      	cbz	r3, 8007634 <__sflush_r+0x48>
 8007630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007632:	1ac0      	subs	r0, r0, r3
 8007634:	2300      	movs	r3, #0
 8007636:	4602      	mov	r2, r0
 8007638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763a:	6a21      	ldr	r1, [r4, #32]
 800763c:	4628      	mov	r0, r5
 800763e:	47b0      	blx	r6
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	d106      	bne.n	8007654 <__sflush_r+0x68>
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	291d      	cmp	r1, #29
 800764a:	d82b      	bhi.n	80076a4 <__sflush_r+0xb8>
 800764c:	4a29      	ldr	r2, [pc, #164]	; (80076f4 <__sflush_r+0x108>)
 800764e:	410a      	asrs	r2, r1
 8007650:	07d6      	lsls	r6, r2, #31
 8007652:	d427      	bmi.n	80076a4 <__sflush_r+0xb8>
 8007654:	2200      	movs	r2, #0
 8007656:	6062      	str	r2, [r4, #4]
 8007658:	04d9      	lsls	r1, r3, #19
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	d504      	bpl.n	800766a <__sflush_r+0x7e>
 8007660:	1c42      	adds	r2, r0, #1
 8007662:	d101      	bne.n	8007668 <__sflush_r+0x7c>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b903      	cbnz	r3, 800766a <__sflush_r+0x7e>
 8007668:	6560      	str	r0, [r4, #84]	; 0x54
 800766a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766c:	602f      	str	r7, [r5, #0]
 800766e:	2900      	cmp	r1, #0
 8007670:	d0c9      	beq.n	8007606 <__sflush_r+0x1a>
 8007672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007676:	4299      	cmp	r1, r3
 8007678:	d002      	beq.n	8007680 <__sflush_r+0x94>
 800767a:	4628      	mov	r0, r5
 800767c:	f7ff fa96 	bl	8006bac <_free_r>
 8007680:	2000      	movs	r0, #0
 8007682:	6360      	str	r0, [r4, #52]	; 0x34
 8007684:	e7c0      	b.n	8007608 <__sflush_r+0x1c>
 8007686:	2301      	movs	r3, #1
 8007688:	4628      	mov	r0, r5
 800768a:	47b0      	blx	r6
 800768c:	1c41      	adds	r1, r0, #1
 800768e:	d1c8      	bne.n	8007622 <__sflush_r+0x36>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c5      	beq.n	8007622 <__sflush_r+0x36>
 8007696:	2b1d      	cmp	r3, #29
 8007698:	d001      	beq.n	800769e <__sflush_r+0xb2>
 800769a:	2b16      	cmp	r3, #22
 800769c:	d101      	bne.n	80076a2 <__sflush_r+0xb6>
 800769e:	602f      	str	r7, [r5, #0]
 80076a0:	e7b1      	b.n	8007606 <__sflush_r+0x1a>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	e7ad      	b.n	8007608 <__sflush_r+0x1c>
 80076ac:	690f      	ldr	r7, [r1, #16]
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d0a9      	beq.n	8007606 <__sflush_r+0x1a>
 80076b2:	0793      	lsls	r3, r2, #30
 80076b4:	680e      	ldr	r6, [r1, #0]
 80076b6:	bf08      	it	eq
 80076b8:	694b      	ldreq	r3, [r1, #20]
 80076ba:	600f      	str	r7, [r1, #0]
 80076bc:	bf18      	it	ne
 80076be:	2300      	movne	r3, #0
 80076c0:	eba6 0807 	sub.w	r8, r6, r7
 80076c4:	608b      	str	r3, [r1, #8]
 80076c6:	f1b8 0f00 	cmp.w	r8, #0
 80076ca:	dd9c      	ble.n	8007606 <__sflush_r+0x1a>
 80076cc:	6a21      	ldr	r1, [r4, #32]
 80076ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d0:	4643      	mov	r3, r8
 80076d2:	463a      	mov	r2, r7
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b0      	blx	r6
 80076d8:	2800      	cmp	r0, #0
 80076da:	dc06      	bgt.n	80076ea <__sflush_r+0xfe>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e78e      	b.n	8007608 <__sflush_r+0x1c>
 80076ea:	4407      	add	r7, r0
 80076ec:	eba8 0800 	sub.w	r8, r8, r0
 80076f0:	e7e9      	b.n	80076c6 <__sflush_r+0xda>
 80076f2:	bf00      	nop
 80076f4:	dfbffffe 	.word	0xdfbffffe

080076f8 <_fflush_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	690b      	ldr	r3, [r1, #16]
 80076fc:	4605      	mov	r5, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	b913      	cbnz	r3, 8007708 <_fflush_r+0x10>
 8007702:	2500      	movs	r5, #0
 8007704:	4628      	mov	r0, r5
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	b118      	cbz	r0, 8007712 <_fflush_r+0x1a>
 800770a:	6a03      	ldr	r3, [r0, #32]
 800770c:	b90b      	cbnz	r3, 8007712 <_fflush_r+0x1a>
 800770e:	f7fe fa61 	bl	8005bd4 <__sinit>
 8007712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f3      	beq.n	8007702 <_fflush_r+0xa>
 800771a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800771c:	07d0      	lsls	r0, r2, #31
 800771e:	d404      	bmi.n	800772a <_fflush_r+0x32>
 8007720:	0599      	lsls	r1, r3, #22
 8007722:	d402      	bmi.n	800772a <_fflush_r+0x32>
 8007724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007726:	f7fe fbc2 	bl	8005eae <__retarget_lock_acquire_recursive>
 800772a:	4628      	mov	r0, r5
 800772c:	4621      	mov	r1, r4
 800772e:	f7ff ff5d 	bl	80075ec <__sflush_r>
 8007732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007734:	07da      	lsls	r2, r3, #31
 8007736:	4605      	mov	r5, r0
 8007738:	d4e4      	bmi.n	8007704 <_fflush_r+0xc>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	059b      	lsls	r3, r3, #22
 800773e:	d4e1      	bmi.n	8007704 <_fflush_r+0xc>
 8007740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007742:	f7fe fbb5 	bl	8005eb0 <__retarget_lock_release_recursive>
 8007746:	e7dd      	b.n	8007704 <_fflush_r+0xc>

08007748 <memmove>:
 8007748:	4288      	cmp	r0, r1
 800774a:	b510      	push	{r4, lr}
 800774c:	eb01 0402 	add.w	r4, r1, r2
 8007750:	d902      	bls.n	8007758 <memmove+0x10>
 8007752:	4284      	cmp	r4, r0
 8007754:	4623      	mov	r3, r4
 8007756:	d807      	bhi.n	8007768 <memmove+0x20>
 8007758:	1e43      	subs	r3, r0, #1
 800775a:	42a1      	cmp	r1, r4
 800775c:	d008      	beq.n	8007770 <memmove+0x28>
 800775e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007766:	e7f8      	b.n	800775a <memmove+0x12>
 8007768:	4402      	add	r2, r0
 800776a:	4601      	mov	r1, r0
 800776c:	428a      	cmp	r2, r1
 800776e:	d100      	bne.n	8007772 <memmove+0x2a>
 8007770:	bd10      	pop	{r4, pc}
 8007772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800777a:	e7f7      	b.n	800776c <memmove+0x24>

0800777c <memcpy>:
 800777c:	440a      	add	r2, r1
 800777e:	4291      	cmp	r1, r2
 8007780:	f100 33ff 	add.w	r3, r0, #4294967295
 8007784:	d100      	bne.n	8007788 <memcpy+0xc>
 8007786:	4770      	bx	lr
 8007788:	b510      	push	{r4, lr}
 800778a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007792:	4291      	cmp	r1, r2
 8007794:	d1f9      	bne.n	800778a <memcpy+0xe>
 8007796:	bd10      	pop	{r4, pc}

08007798 <__assert_func>:
 8007798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800779a:	4614      	mov	r4, r2
 800779c:	461a      	mov	r2, r3
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <__assert_func+0x2c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4605      	mov	r5, r0
 80077a4:	68d8      	ldr	r0, [r3, #12]
 80077a6:	b14c      	cbz	r4, 80077bc <__assert_func+0x24>
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <__assert_func+0x30>)
 80077aa:	9100      	str	r1, [sp, #0]
 80077ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077b0:	4906      	ldr	r1, [pc, #24]	; (80077cc <__assert_func+0x34>)
 80077b2:	462b      	mov	r3, r5
 80077b4:	f000 f872 	bl	800789c <fiprintf>
 80077b8:	f000 f882 	bl	80078c0 <abort>
 80077bc:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <__assert_func+0x38>)
 80077be:	461c      	mov	r4, r3
 80077c0:	e7f3      	b.n	80077aa <__assert_func+0x12>
 80077c2:	bf00      	nop
 80077c4:	20000064 	.word	0x20000064
 80077c8:	080080f7 	.word	0x080080f7
 80077cc:	08008104 	.word	0x08008104
 80077d0:	08008132 	.word	0x08008132

080077d4 <_calloc_r>:
 80077d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d6:	fba1 2402 	umull	r2, r4, r1, r2
 80077da:	b94c      	cbnz	r4, 80077f0 <_calloc_r+0x1c>
 80077dc:	4611      	mov	r1, r2
 80077de:	9201      	str	r2, [sp, #4]
 80077e0:	f7fd fc7a 	bl	80050d8 <_malloc_r>
 80077e4:	9a01      	ldr	r2, [sp, #4]
 80077e6:	4605      	mov	r5, r0
 80077e8:	b930      	cbnz	r0, 80077f8 <_calloc_r+0x24>
 80077ea:	4628      	mov	r0, r5
 80077ec:	b003      	add	sp, #12
 80077ee:	bd30      	pop	{r4, r5, pc}
 80077f0:	220c      	movs	r2, #12
 80077f2:	6002      	str	r2, [r0, #0]
 80077f4:	2500      	movs	r5, #0
 80077f6:	e7f8      	b.n	80077ea <_calloc_r+0x16>
 80077f8:	4621      	mov	r1, r4
 80077fa:	f7fe fab8 	bl	8005d6e <memset>
 80077fe:	e7f4      	b.n	80077ea <_calloc_r+0x16>

08007800 <__ascii_mbtowc>:
 8007800:	b082      	sub	sp, #8
 8007802:	b901      	cbnz	r1, 8007806 <__ascii_mbtowc+0x6>
 8007804:	a901      	add	r1, sp, #4
 8007806:	b142      	cbz	r2, 800781a <__ascii_mbtowc+0x1a>
 8007808:	b14b      	cbz	r3, 800781e <__ascii_mbtowc+0x1e>
 800780a:	7813      	ldrb	r3, [r2, #0]
 800780c:	600b      	str	r3, [r1, #0]
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	1e10      	subs	r0, r2, #0
 8007812:	bf18      	it	ne
 8007814:	2001      	movne	r0, #1
 8007816:	b002      	add	sp, #8
 8007818:	4770      	bx	lr
 800781a:	4610      	mov	r0, r2
 800781c:	e7fb      	b.n	8007816 <__ascii_mbtowc+0x16>
 800781e:	f06f 0001 	mvn.w	r0, #1
 8007822:	e7f8      	b.n	8007816 <__ascii_mbtowc+0x16>

08007824 <_realloc_r>:
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	4680      	mov	r8, r0
 800782a:	4614      	mov	r4, r2
 800782c:	460e      	mov	r6, r1
 800782e:	b921      	cbnz	r1, 800783a <_realloc_r+0x16>
 8007830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	4611      	mov	r1, r2
 8007836:	f7fd bc4f 	b.w	80050d8 <_malloc_r>
 800783a:	b92a      	cbnz	r2, 8007848 <_realloc_r+0x24>
 800783c:	f7ff f9b6 	bl	8006bac <_free_r>
 8007840:	4625      	mov	r5, r4
 8007842:	4628      	mov	r0, r5
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	f000 f841 	bl	80078ce <_malloc_usable_size_r>
 800784c:	4284      	cmp	r4, r0
 800784e:	4607      	mov	r7, r0
 8007850:	d802      	bhi.n	8007858 <_realloc_r+0x34>
 8007852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007856:	d812      	bhi.n	800787e <_realloc_r+0x5a>
 8007858:	4621      	mov	r1, r4
 800785a:	4640      	mov	r0, r8
 800785c:	f7fd fc3c 	bl	80050d8 <_malloc_r>
 8007860:	4605      	mov	r5, r0
 8007862:	2800      	cmp	r0, #0
 8007864:	d0ed      	beq.n	8007842 <_realloc_r+0x1e>
 8007866:	42bc      	cmp	r4, r7
 8007868:	4622      	mov	r2, r4
 800786a:	4631      	mov	r1, r6
 800786c:	bf28      	it	cs
 800786e:	463a      	movcs	r2, r7
 8007870:	f7ff ff84 	bl	800777c <memcpy>
 8007874:	4631      	mov	r1, r6
 8007876:	4640      	mov	r0, r8
 8007878:	f7ff f998 	bl	8006bac <_free_r>
 800787c:	e7e1      	b.n	8007842 <_realloc_r+0x1e>
 800787e:	4635      	mov	r5, r6
 8007880:	e7df      	b.n	8007842 <_realloc_r+0x1e>

08007882 <__ascii_wctomb>:
 8007882:	b149      	cbz	r1, 8007898 <__ascii_wctomb+0x16>
 8007884:	2aff      	cmp	r2, #255	; 0xff
 8007886:	bf85      	ittet	hi
 8007888:	238a      	movhi	r3, #138	; 0x8a
 800788a:	6003      	strhi	r3, [r0, #0]
 800788c:	700a      	strbls	r2, [r1, #0]
 800788e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007892:	bf98      	it	ls
 8007894:	2001      	movls	r0, #1
 8007896:	4770      	bx	lr
 8007898:	4608      	mov	r0, r1
 800789a:	4770      	bx	lr

0800789c <fiprintf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b503      	push	{r0, r1, lr}
 80078a0:	4601      	mov	r1, r0
 80078a2:	ab03      	add	r3, sp, #12
 80078a4:	4805      	ldr	r0, [pc, #20]	; (80078bc <fiprintf+0x20>)
 80078a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	f000 f83f 	bl	8007930 <_vfiprintf_r>
 80078b2:	b002      	add	sp, #8
 80078b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b8:	b003      	add	sp, #12
 80078ba:	4770      	bx	lr
 80078bc:	20000064 	.word	0x20000064

080078c0 <abort>:
 80078c0:	b508      	push	{r3, lr}
 80078c2:	2006      	movs	r0, #6
 80078c4:	f000 fa0c 	bl	8007ce0 <raise>
 80078c8:	2001      	movs	r0, #1
 80078ca:	f7fa f9d1 	bl	8001c70 <_exit>

080078ce <_malloc_usable_size_r>:
 80078ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d2:	1f18      	subs	r0, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bfbc      	itt	lt
 80078d8:	580b      	ldrlt	r3, [r1, r0]
 80078da:	18c0      	addlt	r0, r0, r3
 80078dc:	4770      	bx	lr

080078de <__sfputc_r>:
 80078de:	6893      	ldr	r3, [r2, #8]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	b410      	push	{r4}
 80078e6:	6093      	str	r3, [r2, #8]
 80078e8:	da08      	bge.n	80078fc <__sfputc_r+0x1e>
 80078ea:	6994      	ldr	r4, [r2, #24]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	db01      	blt.n	80078f4 <__sfputc_r+0x16>
 80078f0:	290a      	cmp	r1, #10
 80078f2:	d103      	bne.n	80078fc <__sfputc_r+0x1e>
 80078f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f8:	f000 b934 	b.w	8007b64 <__swbuf_r>
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	1c58      	adds	r0, r3, #1
 8007900:	6010      	str	r0, [r2, #0]
 8007902:	7019      	strb	r1, [r3, #0]
 8007904:	4608      	mov	r0, r1
 8007906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800790a:	4770      	bx	lr

0800790c <__sfputs_r>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	4606      	mov	r6, r0
 8007910:	460f      	mov	r7, r1
 8007912:	4614      	mov	r4, r2
 8007914:	18d5      	adds	r5, r2, r3
 8007916:	42ac      	cmp	r4, r5
 8007918:	d101      	bne.n	800791e <__sfputs_r+0x12>
 800791a:	2000      	movs	r0, #0
 800791c:	e007      	b.n	800792e <__sfputs_r+0x22>
 800791e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007922:	463a      	mov	r2, r7
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ffda 	bl	80078de <__sfputc_r>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d1f3      	bne.n	8007916 <__sfputs_r+0xa>
 800792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007930 <_vfiprintf_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	460d      	mov	r5, r1
 8007936:	b09d      	sub	sp, #116	; 0x74
 8007938:	4614      	mov	r4, r2
 800793a:	4698      	mov	r8, r3
 800793c:	4606      	mov	r6, r0
 800793e:	b118      	cbz	r0, 8007948 <_vfiprintf_r+0x18>
 8007940:	6a03      	ldr	r3, [r0, #32]
 8007942:	b90b      	cbnz	r3, 8007948 <_vfiprintf_r+0x18>
 8007944:	f7fe f946 	bl	8005bd4 <__sinit>
 8007948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800794a:	07d9      	lsls	r1, r3, #31
 800794c:	d405      	bmi.n	800795a <_vfiprintf_r+0x2a>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	059a      	lsls	r2, r3, #22
 8007952:	d402      	bmi.n	800795a <_vfiprintf_r+0x2a>
 8007954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007956:	f7fe faaa 	bl	8005eae <__retarget_lock_acquire_recursive>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	071b      	lsls	r3, r3, #28
 800795e:	d501      	bpl.n	8007964 <_vfiprintf_r+0x34>
 8007960:	692b      	ldr	r3, [r5, #16]
 8007962:	b99b      	cbnz	r3, 800798c <_vfiprintf_r+0x5c>
 8007964:	4629      	mov	r1, r5
 8007966:	4630      	mov	r0, r6
 8007968:	f000 f93a 	bl	8007be0 <__swsetup_r>
 800796c:	b170      	cbz	r0, 800798c <_vfiprintf_r+0x5c>
 800796e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007970:	07dc      	lsls	r4, r3, #31
 8007972:	d504      	bpl.n	800797e <_vfiprintf_r+0x4e>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b01d      	add	sp, #116	; 0x74
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	0598      	lsls	r0, r3, #22
 8007982:	d4f7      	bmi.n	8007974 <_vfiprintf_r+0x44>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f7fe fa93 	bl	8005eb0 <__retarget_lock_release_recursive>
 800798a:	e7f3      	b.n	8007974 <_vfiprintf_r+0x44>
 800798c:	2300      	movs	r3, #0
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2320      	movs	r3, #32
 8007992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007996:	f8cd 800c 	str.w	r8, [sp, #12]
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007b50 <_vfiprintf_r+0x220>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a4:	f04f 0901 	mov.w	r9, #1
 80079a8:	4623      	mov	r3, r4
 80079aa:	469a      	mov	sl, r3
 80079ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b0:	b10a      	cbz	r2, 80079b6 <_vfiprintf_r+0x86>
 80079b2:	2a25      	cmp	r2, #37	; 0x25
 80079b4:	d1f9      	bne.n	80079aa <_vfiprintf_r+0x7a>
 80079b6:	ebba 0b04 	subs.w	fp, sl, r4
 80079ba:	d00b      	beq.n	80079d4 <_vfiprintf_r+0xa4>
 80079bc:	465b      	mov	r3, fp
 80079be:	4622      	mov	r2, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ffa2 	bl	800790c <__sfputs_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f000 80a9 	beq.w	8007b20 <_vfiprintf_r+0x1f0>
 80079ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d0:	445a      	add	r2, fp
 80079d2:	9209      	str	r2, [sp, #36]	; 0x24
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a1 	beq.w	8007b20 <_vfiprintf_r+0x1f0>
 80079de:	2300      	movs	r3, #0
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e8:	f10a 0a01 	add.w	sl, sl, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f4:	931a      	str	r3, [sp, #104]	; 0x68
 80079f6:	4654      	mov	r4, sl
 80079f8:	2205      	movs	r2, #5
 80079fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fe:	4854      	ldr	r0, [pc, #336]	; (8007b50 <_vfiprintf_r+0x220>)
 8007a00:	f7f8 fbe6 	bl	80001d0 <memchr>
 8007a04:	9a04      	ldr	r2, [sp, #16]
 8007a06:	b9d8      	cbnz	r0, 8007a40 <_vfiprintf_r+0x110>
 8007a08:	06d1      	lsls	r1, r2, #27
 8007a0a:	bf44      	itt	mi
 8007a0c:	2320      	movmi	r3, #32
 8007a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a12:	0713      	lsls	r3, r2, #28
 8007a14:	bf44      	itt	mi
 8007a16:	232b      	movmi	r3, #43	; 0x2b
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b2a      	cmp	r3, #42	; 0x2a
 8007a22:	d015      	beq.n	8007a50 <_vfiprintf_r+0x120>
 8007a24:	9a07      	ldr	r2, [sp, #28]
 8007a26:	4654      	mov	r4, sl
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a34:	3b30      	subs	r3, #48	; 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d94d      	bls.n	8007ad6 <_vfiprintf_r+0x1a6>
 8007a3a:	b1b0      	cbz	r0, 8007a6a <_vfiprintf_r+0x13a>
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	e014      	b.n	8007a6a <_vfiprintf_r+0x13a>
 8007a40:	eba0 0308 	sub.w	r3, r0, r8
 8007a44:	fa09 f303 	lsl.w	r3, r9, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	46a2      	mov	sl, r4
 8007a4e:	e7d2      	b.n	80079f6 <_vfiprintf_r+0xc6>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	1d19      	adds	r1, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9103      	str	r1, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfbb      	ittet	lt
 8007a5c:	425b      	neglt	r3, r3
 8007a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a62:	9307      	strge	r3, [sp, #28]
 8007a64:	9307      	strlt	r3, [sp, #28]
 8007a66:	bfb8      	it	lt
 8007a68:	9204      	strlt	r2, [sp, #16]
 8007a6a:	7823      	ldrb	r3, [r4, #0]
 8007a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6e:	d10c      	bne.n	8007a8a <_vfiprintf_r+0x15a>
 8007a70:	7863      	ldrb	r3, [r4, #1]
 8007a72:	2b2a      	cmp	r3, #42	; 0x2a
 8007a74:	d134      	bne.n	8007ae0 <_vfiprintf_r+0x1b0>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9203      	str	r2, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfb8      	it	lt
 8007a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a86:	3402      	adds	r4, #2
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007b60 <_vfiprintf_r+0x230>
 8007a8e:	7821      	ldrb	r1, [r4, #0]
 8007a90:	2203      	movs	r2, #3
 8007a92:	4650      	mov	r0, sl
 8007a94:	f7f8 fb9c 	bl	80001d0 <memchr>
 8007a98:	b138      	cbz	r0, 8007aaa <_vfiprintf_r+0x17a>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	eba0 000a 	sub.w	r0, r0, sl
 8007aa0:	2240      	movs	r2, #64	; 0x40
 8007aa2:	4082      	lsls	r2, r0
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	3401      	adds	r4, #1
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aae:	4829      	ldr	r0, [pc, #164]	; (8007b54 <_vfiprintf_r+0x224>)
 8007ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab4:	2206      	movs	r2, #6
 8007ab6:	f7f8 fb8b 	bl	80001d0 <memchr>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d03f      	beq.n	8007b3e <_vfiprintf_r+0x20e>
 8007abe:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <_vfiprintf_r+0x228>)
 8007ac0:	bb1b      	cbnz	r3, 8007b0a <_vfiprintf_r+0x1da>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	3307      	adds	r3, #7
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	3308      	adds	r3, #8
 8007acc:	9303      	str	r3, [sp, #12]
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	443b      	add	r3, r7
 8007ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad4:	e768      	b.n	80079a8 <_vfiprintf_r+0x78>
 8007ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ada:	460c      	mov	r4, r1
 8007adc:	2001      	movs	r0, #1
 8007ade:	e7a6      	b.n	8007a2e <_vfiprintf_r+0xfe>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	3401      	adds	r4, #1
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f04f 0c0a 	mov.w	ip, #10
 8007aec:	4620      	mov	r0, r4
 8007aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af2:	3a30      	subs	r2, #48	; 0x30
 8007af4:	2a09      	cmp	r2, #9
 8007af6:	d903      	bls.n	8007b00 <_vfiprintf_r+0x1d0>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0c6      	beq.n	8007a8a <_vfiprintf_r+0x15a>
 8007afc:	9105      	str	r1, [sp, #20]
 8007afe:	e7c4      	b.n	8007a8a <_vfiprintf_r+0x15a>
 8007b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b04:	4604      	mov	r4, r0
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7f0      	b.n	8007aec <_vfiprintf_r+0x1bc>
 8007b0a:	ab03      	add	r3, sp, #12
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	462a      	mov	r2, r5
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <_vfiprintf_r+0x22c>)
 8007b12:	a904      	add	r1, sp, #16
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7fd fc0b 	bl	8005330 <_printf_float>
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	1c78      	adds	r0, r7, #1
 8007b1e:	d1d6      	bne.n	8007ace <_vfiprintf_r+0x19e>
 8007b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b22:	07d9      	lsls	r1, r3, #31
 8007b24:	d405      	bmi.n	8007b32 <_vfiprintf_r+0x202>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	059a      	lsls	r2, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_vfiprintf_r+0x202>
 8007b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2e:	f7fe f9bf 	bl	8005eb0 <__retarget_lock_release_recursive>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	065b      	lsls	r3, r3, #25
 8007b36:	f53f af1d 	bmi.w	8007974 <_vfiprintf_r+0x44>
 8007b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b3c:	e71c      	b.n	8007978 <_vfiprintf_r+0x48>
 8007b3e:	ab03      	add	r3, sp, #12
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	462a      	mov	r2, r5
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <_vfiprintf_r+0x22c>)
 8007b46:	a904      	add	r1, sp, #16
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7fd fe95 	bl	8005878 <_printf_i>
 8007b4e:	e7e4      	b.n	8007b1a <_vfiprintf_r+0x1ea>
 8007b50:	080080dc 	.word	0x080080dc
 8007b54:	080080e6 	.word	0x080080e6
 8007b58:	08005331 	.word	0x08005331
 8007b5c:	0800790d 	.word	0x0800790d
 8007b60:	080080e2 	.word	0x080080e2

08007b64 <__swbuf_r>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	460e      	mov	r6, r1
 8007b68:	4614      	mov	r4, r2
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	b118      	cbz	r0, 8007b76 <__swbuf_r+0x12>
 8007b6e:	6a03      	ldr	r3, [r0, #32]
 8007b70:	b90b      	cbnz	r3, 8007b76 <__swbuf_r+0x12>
 8007b72:	f7fe f82f 	bl	8005bd4 <__sinit>
 8007b76:	69a3      	ldr	r3, [r4, #24]
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	071a      	lsls	r2, r3, #28
 8007b7e:	d525      	bpl.n	8007bcc <__swbuf_r+0x68>
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	b31b      	cbz	r3, 8007bcc <__swbuf_r+0x68>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	6922      	ldr	r2, [r4, #16]
 8007b88:	1a98      	subs	r0, r3, r2
 8007b8a:	6963      	ldr	r3, [r4, #20]
 8007b8c:	b2f6      	uxtb	r6, r6
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	4637      	mov	r7, r6
 8007b92:	dc04      	bgt.n	8007b9e <__swbuf_r+0x3a>
 8007b94:	4621      	mov	r1, r4
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7ff fdae 	bl	80076f8 <_fflush_r>
 8007b9c:	b9e0      	cbnz	r0, 8007bd8 <__swbuf_r+0x74>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	60a3      	str	r3, [r4, #8]
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	701e      	strb	r6, [r3, #0]
 8007bac:	6962      	ldr	r2, [r4, #20]
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d004      	beq.n	8007bbe <__swbuf_r+0x5a>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d506      	bpl.n	8007bc8 <__swbuf_r+0x64>
 8007bba:	2e0a      	cmp	r6, #10
 8007bbc:	d104      	bne.n	8007bc8 <__swbuf_r+0x64>
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f7ff fd99 	bl	80076f8 <_fflush_r>
 8007bc6:	b938      	cbnz	r0, 8007bd8 <__swbuf_r+0x74>
 8007bc8:	4638      	mov	r0, r7
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f806 	bl	8007be0 <__swsetup_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d0d5      	beq.n	8007b84 <__swbuf_r+0x20>
 8007bd8:	f04f 37ff 	mov.w	r7, #4294967295
 8007bdc:	e7f4      	b.n	8007bc8 <__swbuf_r+0x64>
	...

08007be0 <__swsetup_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4b2a      	ldr	r3, [pc, #168]	; (8007c8c <__swsetup_r+0xac>)
 8007be4:	4605      	mov	r5, r0
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	460c      	mov	r4, r1
 8007bea:	b118      	cbz	r0, 8007bf4 <__swsetup_r+0x14>
 8007bec:	6a03      	ldr	r3, [r0, #32]
 8007bee:	b90b      	cbnz	r3, 8007bf4 <__swsetup_r+0x14>
 8007bf0:	f7fd fff0 	bl	8005bd4 <__sinit>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bfa:	0718      	lsls	r0, r3, #28
 8007bfc:	d422      	bmi.n	8007c44 <__swsetup_r+0x64>
 8007bfe:	06d9      	lsls	r1, r3, #27
 8007c00:	d407      	bmi.n	8007c12 <__swsetup_r+0x32>
 8007c02:	2309      	movs	r3, #9
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e034      	b.n	8007c7c <__swsetup_r+0x9c>
 8007c12:	0758      	lsls	r0, r3, #29
 8007c14:	d512      	bpl.n	8007c3c <__swsetup_r+0x5c>
 8007c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c18:	b141      	cbz	r1, 8007c2c <__swsetup_r+0x4c>
 8007c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	d002      	beq.n	8007c28 <__swsetup_r+0x48>
 8007c22:	4628      	mov	r0, r5
 8007c24:	f7fe ffc2 	bl	8006bac <_free_r>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6363      	str	r3, [r4, #52]	; 0x34
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	2300      	movs	r3, #0
 8007c36:	6063      	str	r3, [r4, #4]
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	f043 0308 	orr.w	r3, r3, #8
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b94b      	cbnz	r3, 8007c5c <__swsetup_r+0x7c>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c52:	d003      	beq.n	8007c5c <__swsetup_r+0x7c>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4628      	mov	r0, r5
 8007c58:	f000 f884 	bl	8007d64 <__smakebuf_r>
 8007c5c:	89a0      	ldrh	r0, [r4, #12]
 8007c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c62:	f010 0301 	ands.w	r3, r0, #1
 8007c66:	d00a      	beq.n	8007c7e <__swsetup_r+0x9e>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6963      	ldr	r3, [r4, #20]
 8007c6e:	425b      	negs	r3, r3
 8007c70:	61a3      	str	r3, [r4, #24]
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	b943      	cbnz	r3, 8007c88 <__swsetup_r+0xa8>
 8007c76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c7a:	d1c4      	bne.n	8007c06 <__swsetup_r+0x26>
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	0781      	lsls	r1, r0, #30
 8007c80:	bf58      	it	pl
 8007c82:	6963      	ldrpl	r3, [r4, #20]
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	e7f4      	b.n	8007c72 <__swsetup_r+0x92>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e7f7      	b.n	8007c7c <__swsetup_r+0x9c>
 8007c8c:	20000064 	.word	0x20000064

08007c90 <_raise_r>:
 8007c90:	291f      	cmp	r1, #31
 8007c92:	b538      	push	{r3, r4, r5, lr}
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	d904      	bls.n	8007ca4 <_raise_r+0x14>
 8007c9a:	2316      	movs	r3, #22
 8007c9c:	6003      	str	r3, [r0, #0]
 8007c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ca6:	b112      	cbz	r2, 8007cae <_raise_r+0x1e>
 8007ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cac:	b94b      	cbnz	r3, 8007cc2 <_raise_r+0x32>
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 f830 	bl	8007d14 <_getpid_r>
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	4620      	mov	r0, r4
 8007cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cbe:	f000 b817 	b.w	8007cf0 <_kill_r>
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d00a      	beq.n	8007cdc <_raise_r+0x4c>
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	d103      	bne.n	8007cd2 <_raise_r+0x42>
 8007cca:	2316      	movs	r3, #22
 8007ccc:	6003      	str	r3, [r0, #0]
 8007cce:	2001      	movs	r0, #1
 8007cd0:	e7e7      	b.n	8007ca2 <_raise_r+0x12>
 8007cd2:	2400      	movs	r4, #0
 8007cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cd8:	4628      	mov	r0, r5
 8007cda:	4798      	blx	r3
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e7e0      	b.n	8007ca2 <_raise_r+0x12>

08007ce0 <raise>:
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <raise+0xc>)
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f7ff bfd3 	b.w	8007c90 <_raise_r>
 8007cea:	bf00      	nop
 8007cec:	20000064 	.word	0x20000064

08007cf0 <_kill_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_kill_r+0x20>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	602b      	str	r3, [r5, #0]
 8007cfe:	f7f9 ffa7 	bl	8001c50 <_kill>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	d102      	bne.n	8007d0c <_kill_r+0x1c>
 8007d06:	682b      	ldr	r3, [r5, #0]
 8007d08:	b103      	cbz	r3, 8007d0c <_kill_r+0x1c>
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	bd38      	pop	{r3, r4, r5, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000430 	.word	0x20000430

08007d14 <_getpid_r>:
 8007d14:	f7f9 bf94 	b.w	8001c40 <_getpid>

08007d18 <__swhatbuf_r>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d20:	2900      	cmp	r1, #0
 8007d22:	b096      	sub	sp, #88	; 0x58
 8007d24:	4615      	mov	r5, r2
 8007d26:	461e      	mov	r6, r3
 8007d28:	da0d      	bge.n	8007d46 <__swhatbuf_r+0x2e>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d30:	f04f 0100 	mov.w	r1, #0
 8007d34:	bf0c      	ite	eq
 8007d36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d3a:	2340      	movne	r3, #64	; 0x40
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6031      	str	r1, [r6, #0]
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	b016      	add	sp, #88	; 0x58
 8007d44:	bd70      	pop	{r4, r5, r6, pc}
 8007d46:	466a      	mov	r2, sp
 8007d48:	f000 f848 	bl	8007ddc <_fstat_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	dbec      	blt.n	8007d2a <__swhatbuf_r+0x12>
 8007d50:	9901      	ldr	r1, [sp, #4]
 8007d52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d5a:	4259      	negs	r1, r3
 8007d5c:	4159      	adcs	r1, r3
 8007d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d62:	e7eb      	b.n	8007d3c <__swhatbuf_r+0x24>

08007d64 <__smakebuf_r>:
 8007d64:	898b      	ldrh	r3, [r1, #12]
 8007d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d68:	079d      	lsls	r5, r3, #30
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	d507      	bpl.n	8007d80 <__smakebuf_r+0x1c>
 8007d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	6123      	str	r3, [r4, #16]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	6163      	str	r3, [r4, #20]
 8007d7c:	b002      	add	sp, #8
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	ab01      	add	r3, sp, #4
 8007d82:	466a      	mov	r2, sp
 8007d84:	f7ff ffc8 	bl	8007d18 <__swhatbuf_r>
 8007d88:	9900      	ldr	r1, [sp, #0]
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f7fd f9a3 	bl	80050d8 <_malloc_r>
 8007d92:	b948      	cbnz	r0, 8007da8 <__smakebuf_r+0x44>
 8007d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d98:	059a      	lsls	r2, r3, #22
 8007d9a:	d4ef      	bmi.n	8007d7c <__smakebuf_r+0x18>
 8007d9c:	f023 0303 	bic.w	r3, r3, #3
 8007da0:	f043 0302 	orr.w	r3, r3, #2
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	e7e3      	b.n	8007d70 <__smakebuf_r+0xc>
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	6020      	str	r0, [r4, #0]
 8007dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	6163      	str	r3, [r4, #20]
 8007db6:	9b01      	ldr	r3, [sp, #4]
 8007db8:	6120      	str	r0, [r4, #16]
 8007dba:	b15b      	cbz	r3, 8007dd4 <__smakebuf_r+0x70>
 8007dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f000 f81d 	bl	8007e00 <_isatty_r>
 8007dc6:	b128      	cbz	r0, 8007dd4 <__smakebuf_r+0x70>
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	f023 0303 	bic.w	r3, r3, #3
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	431d      	orrs	r5, r3
 8007dd8:	81a5      	strh	r5, [r4, #12]
 8007dda:	e7cf      	b.n	8007d7c <__smakebuf_r+0x18>

08007ddc <_fstat_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d07      	ldr	r5, [pc, #28]	; (8007dfc <_fstat_r+0x20>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	4611      	mov	r1, r2
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	f7f9 ff90 	bl	8001d0e <_fstat>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d102      	bne.n	8007df8 <_fstat_r+0x1c>
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	b103      	cbz	r3, 8007df8 <_fstat_r+0x1c>
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000430 	.word	0x20000430

08007e00 <_isatty_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d06      	ldr	r5, [pc, #24]	; (8007e1c <_isatty_r+0x1c>)
 8007e04:	2300      	movs	r3, #0
 8007e06:	4604      	mov	r4, r0
 8007e08:	4608      	mov	r0, r1
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	f7f9 ff8f 	bl	8001d2e <_isatty>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d102      	bne.n	8007e1a <_isatty_r+0x1a>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	b103      	cbz	r3, 8007e1a <_isatty_r+0x1a>
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	20000430 	.word	0x20000430

08007e20 <_init>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr

08007e2c <_fini>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr
